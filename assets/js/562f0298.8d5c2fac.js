"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[263],{981:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/cli","title":"CLI API Reference","description":"OneForAll provides a command-line interface (CLI) for creating, developing, and building desktop applications. The CLI is built with Typer and offers several commands to streamline your development workflow.","source":"@site/versioned_docs/version-0.1.0.0a3/api/cli.md","sourceDirName":"api","slug":"/api/cli","permalink":"/OneForAll/docs/api/cli","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/versioned_docs/version-0.1.0.0a3/api/cli.md","tags":[],"version":"0.1.0.0a3","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"State Management API Reference","permalink":"/OneForAll/docs/api/state-management"},"next":{"title":"Examples","permalink":"/OneForAll/docs/examples"}}');var l=i(7259),t=i(1197);const r={sidebar_position:5},o="CLI API Reference",a={},c=[{value:"Installation and Usage",id:"installation-and-usage",level:2},{value:"Commands",id:"commands",level:2},{value:"init",id:"init",level:3},{value:"dev",id:"dev",level:3},{value:"css",id:"css",level:3},{value:"CLI Configuration",id:"cli-configuration",level:2},{value:"Global Configuration",id:"global-configuration",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Typical Development Session",id:"typical-development-session",level:3},{value:"Project Structure Best Practices",id:"project-structure-best-practices",level:3},{value:"Advanced Development Setup",id:"advanced-development-setup",level:3},{value:"Integration with Build Tools",id:"integration-with-build-tools",level:2},{value:"Using with PyInstaller",id:"using-with-pyinstaller",level:3},{value:"Using with Docker",id:"using-with-docker",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Getting Help",id:"getting-help",level:3},{value:"Related APIs",id:"related-apis",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"cli-api-reference",children:"CLI API Reference"})}),"\n",(0,l.jsx)(n.p,{children:"OneForAll provides a command-line interface (CLI) for creating, developing, and building desktop applications. The CLI is built with Typer and offers several commands to streamline your development workflow."}),"\n",(0,l.jsx)(n.admonition,{title:"Alpha Version",type:"info",children:(0,l.jsxs)(n.p,{children:["The CLI is stable in OneForAll ",(0,l.jsx)(n.strong,{children:"alpha"})," (v0.1.0a3) with full functionality for project scaffolding, development, and CSS generation."]})}),"\n",(0,l.jsx)(n.h2,{id:"installation-and-usage",children:"Installation and Usage"}),"\n",(0,l.jsx)(n.p,{children:"The CLI is automatically available when you install OneForAll:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install oneforall\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Access the CLI using the ",(0,l.jsx)(n.code,{children:"oneforall"})," command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"oneforall --help\n"})}),"\n",(0,l.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,l.jsx)(n.h3,{id:"init",children:"init"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new OneForAll application with a basic project structure."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"oneforall init [PROJECT_NAME] [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"PROJECT_NAME"})," (optional): Name of the project directory to create. Defaults to current directory if not specified."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Options:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--template TEXT"}),': Template to use for the project (default: "basic")']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--help"}),": Show help message"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Create a new project in current directory\noneforall init\n\n# Create a new project with specific name\noneforall init my-desktop-app\n\n# Create project with template (when templates are available)\noneforall init my-app --template advanced\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Generated Project Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"my-desktop-app/\n\u251c\u2500\u2500 main.py              # Main application entry point\n\u251c\u2500\u2500 requirements.txt     # Python dependencies\n\u251c\u2500\u2500 assets/             # Static assets (images, icons, etc.)\n\u251c\u2500\u2500 components/         # Custom components (optional)\n\u251c\u2500\u2500 styles/            # Custom CSS files (optional)\n\u2514\u2500\u2500 README.md          # Project documentation\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Generated main.py:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\ndef main():\n    # Create the application\n    app = App()\n    \n    # Create the main window\n    window = app.create_window(\n        title="My OneForAll App",\n        size=(800, 600)\n    )\n    \n    # Create the UI\n    container = Container(className="p-8 text-center")\n    \n    # Add components\n    container.add(Text(\n        "Welcome to OneForAll!",\n        className="text-3xl font-bold mb-6 text-blue-600"\n    ))\n    \n    container.add(Text(\n        "Your desktop app is ready to go.",\n        className="text-lg text-gray-600 mb-8"\n    ))\n    \n    container.add(Button(\n        "Get Started",\n        className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors",\n        onclick=lambda: print("Button clicked!")\n    ))\n    \n    # Add container to window\n    window.add_child(container)\n    \n    # Run the application\n    app.run()\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"dev",children:"dev"}),"\n",(0,l.jsx)(n.p,{children:"Starts the development server with hot reload functionality. Watches for file changes and automatically restarts the application."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"oneforall dev [FILE] [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FILE"}),' (optional): Python file to run. Defaults to "main.py"']}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Options:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--watch-dir TEXT"}),": Additional directories to watch for changes (can be used multiple times)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--ignore-pattern TEXT"}),": File patterns to ignore during watching (can be used multiple times)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--no-reload"}),": Disable hot reload functionality"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--help"}),": Show help message"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Start development server with default file (main.py)\noneforall dev\n\n# Start with specific file\noneforall dev app.py\n\n# Watch additional directories\noneforall dev --watch-dir components --watch-dir assets\n\n# Ignore specific patterns\noneforall dev --ignore-pattern "*.tmp" --ignore-pattern "__pycache__"\n\n# Run without hot reload\noneforall dev --no-reload\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Features:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Hot Reload"}),": Automatically restarts the application when Python files change"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"File Watching"}),": Monitors the current directory and specified watch directories"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Smart Ignoring"}),": Ignores common non-essential files (",(0,l.jsx)(n.code,{children:".git"}),", ",(0,l.jsx)(n.code,{children:"__pycache__"}),", ",(0,l.jsx)(n.code,{children:".pyc"}),", etc.)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fast Restart"}),": Optimized restart process for quick development cycles"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Watched File Types:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".py"})," - Python source files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".css"})," - CSS stylesheets"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".js"})," - JavaScript files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".html"})," - HTML templates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:".json"})," - Configuration files"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Default Ignored Patterns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"__pycache__/"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"*.pyc"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"*.pyo"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:".git/"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:".vscode/"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:".idea/"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"node_modules/"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"*.tmp"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"*.log"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"css",children:"css"}),"\n",(0,l.jsx)(n.p,{children:"Scans Python files for Tailwind CSS classes and generates the corresponding CSS file. This command is essential for ensuring that all Tailwind classes used in your components are included in the final CSS bundle."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"oneforall css [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Options:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--input-dir TEXT"}),": Directory to scan for Python files (default: current directory)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--output-file TEXT"}),': Output CSS file path (default: "styles.css")']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--config-file TEXT"}),": Tailwind config file path (optional)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--watch"}),": Watch for changes and regenerate CSS automatically"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--minify"}),": Minify the generated CSS"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--help"}),": Show help message"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Generate CSS from current directory\noneforall css\n\n# Specify input directory and output file\noneforall css --input-dir src --output-file assets/styles.css\n\n# Watch for changes and auto-regenerate\noneforall css --watch\n\n# Generate minified CSS\noneforall css --minify\n\n# Use custom Tailwind config\noneforall css --config-file tailwind.config.js\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"How it Works:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Scanning"}),": Recursively scans all ",(0,l.jsx)(n.code,{children:".py"})," files in the specified directory"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Extraction"}),": Uses regex patterns to find Tailwind classes in ",(0,l.jsx)(n.code,{children:"className"})," attributes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Generation"}),": Generates CSS using Tailwind's JIT (Just-In-Time) compiler"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Output"}),": Writes the generated CSS to the specified output file"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Supported Class Patterns:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Direct className usage\nText("Hello", className="text-blue-500 font-bold")\nButton("Click", className="px-4 py-2 bg-green-500 rounded")\n\n# Multi-line className\nContainer(className="""\n    flex flex-col items-center\n    p-6 bg-white rounded-lg shadow-md\n    hover:shadow-lg transition-shadow\n""")\n\n# Dynamic className (basic detection)\nbutton_classes = "px-4 py-2 bg-blue-500 text-white rounded"\nButton("Submit", className=button_classes)\n\n# Conditional className\nclassName = "text-red-500" if error else "text-green-500"\nText(message, className=className)\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Generated CSS Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:"/* Base Tailwind styles */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Generated utility classes */\n.text-blue-500 { color: rgb(59 130 246); }\n.font-bold { font-weight: 700; }\n.px-4 { padding-left: 1rem; padding-right: 1rem; }\n.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n/* ... more classes as needed */\n"})}),"\n",(0,l.jsx)(n.h2,{id:"cli-configuration",children:"CLI Configuration"}),"\n",(0,l.jsx)(n.h3,{id:"global-configuration",children:"Global Configuration"}),"\n",(0,l.jsxs)(n.p,{children:["Create a ",(0,l.jsx)(n.code,{children:".oneforall.json"})," file in your project root to configure CLI behavior:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "dev": {\n    "defaultFile": "app.py",\n    "watchDirs": ["components", "assets"],\n    "ignorePatterns": ["*.tmp", "test_*"],\n    "autoReload": true\n  },\n  "css": {\n    "inputDir": "src",\n    "outputFile": "assets/styles.css",\n    "watch": false,\n    "minify": false,\n    "configFile": "tailwind.config.js"\n  },\n  "init": {\n    "defaultTemplate": "basic",\n    "author": "Your Name",\n    "license": "MIT"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,l.jsx)(n.p,{children:"Configure CLI behavior using environment variables:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Development settings\nexport ONEFORALL_DEV_FILE=app.py\nexport ONEFORALL_DEV_WATCH_DIRS=components,assets\nexport ONEFORALL_DEV_AUTO_RELOAD=true\n\n# CSS generation settings\nexport ONEFORALL_CSS_INPUT_DIR=src\nexport ONEFORALL_CSS_OUTPUT_FILE=dist/styles.css\nexport ONEFORALL_CSS_MINIFY=true\n\n# General settings\nexport ONEFORALL_LOG_LEVEL=INFO\n"})}),"\n",(0,l.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,l.jsx)(n.h3,{id:"typical-development-session",children:"Typical Development Session"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# 1. Create a new project\noneforall init my-app\ncd my-app\n\n# 2. Start development server\noneforall dev\n\n# 3. In another terminal, watch CSS changes\noneforall css --watch\n\n# 4. Edit your Python files - the app will auto-reload\n# 5. Add new Tailwind classes - CSS will auto-regenerate\n"})}),"\n",(0,l.jsx)(n.h3,{id:"project-structure-best-practices",children:"Project Structure Best Practices"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"my-app/\n\u251c\u2500\u2500 main.py                 # Application entry point\n\u251c\u2500\u2500 components/            # Custom components\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 header.py\n\u2502   \u251c\u2500\u2500 sidebar.py\n\u2502   \u2514\u2500\u2500 footer.py\n\u251c\u2500\u2500 pages/                 # Application pages/views\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 home.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u2514\u2500\u2500 about.py\n\u251c\u2500\u2500 assets/               # Static assets\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 icons/\n\u2502   \u2514\u2500\u2500 styles.css        # Generated CSS\n\u251c\u2500\u2500 utils/               # Utility functions\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 helpers.py\n\u2502   \u2514\u2500\u2500 constants.py\n\u251c\u2500\u2500 requirements.txt     # Dependencies\n\u251c\u2500\u2500 .oneforall.json     # CLI configuration\n\u2514\u2500\u2500 README.md           # Documentation\n"})}),"\n",(0,l.jsx)(n.h3,{id:"advanced-development-setup",children:"Advanced Development Setup"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Create project with custom structure\noneforall init advanced-app\ncd advanced-app\n\n# Setup development with multiple watch directories\noneforall dev main.py \\\n  --watch-dir components \\\n  --watch-dir pages \\\n  --watch-dir utils \\\n  --ignore-pattern "test_*" \\\n  --ignore-pattern "*.backup"\n\n# Setup CSS generation with custom config\noneforall css \\\n  --input-dir . \\\n  --output-file assets/dist/styles.css \\\n  --config-file tailwind.config.js \\\n  --watch \\\n  --minify\n'})}),"\n",(0,l.jsx)(n.h2,{id:"integration-with-build-tools",children:"Integration with Build Tools"}),"\n",(0,l.jsx)(n.h3,{id:"using-with-pyinstaller",children:"Using with PyInstaller"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Generate CSS before building\noneforall css --minify --output-file dist/styles.css\n\n# Build executable\npyinstaller --onefile \\\n  --add-data "dist/styles.css;." \\\n  --add-data "assets;assets" \\\n  main.py\n'})}),"\n",(0,l.jsx)(n.h3,{id:"using-with-docker",children:"Using with Docker"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dockerfile",children:'FROM python:3.9-slim\n\nWORKDIR /app\n\n# Copy requirements and install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy source code\nCOPY . .\n\n# Generate CSS\nRUN oneforall css --minify --output-file assets/styles.css\n\n# Run the application\nCMD ["python", "main.py"]\n'})}),"\n",(0,l.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"# GitHub Actions example\nname: Build OneForAll App\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.9'\n    \n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n    \n    - name: Generate CSS\n      run: |\n        oneforall css --minify --output-file dist/styles.css\n    \n    - name: Run tests\n      run: |\n        python -m pytest\n    \n    - name: Build executable\n      run: |\n        pyinstaller --onefile main.py\n"})}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"1. Command not found"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Error: oneforall: command not found\n# Solution: Ensure OneForAll is installed and in PATH\npip install oneforall\n# or\npython -m oneforall --help\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"2. Hot reload not working"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Check if files are being watched\noneforall dev --watch-dir . --ignore-pattern ""\n\n# Try running without reload to test basic functionality\noneforall dev --no-reload\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"3. CSS not generating"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Check if Python files contain className attributes\ngrep -r "className" .\n\n# Run with verbose output\noneforall css --input-dir . --output-file debug.css\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"4. Permission errors"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# On Windows, run as administrator if needed\n# On Unix systems, check file permissions\nchmod +x main.py\n"})}),"\n",(0,l.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,l.jsx)(n.p,{children:"Enable debug logging for troubleshooting:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Set log level\nexport ONEFORALL_LOG_LEVEL=DEBUG\n\n# Run commands with debug output\noneforall dev --help\noneforall css --help\n"})}),"\n",(0,l.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# General help\noneforall --help\n\n# Command-specific help\noneforall init --help\noneforall dev --help\noneforall css --help\n\n# Version information\noneforall --version\n"})}),"\n",(0,l.jsx)(n.h2,{id:"related-apis",children:"Related APIs"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./app",children:"App API"})," - Application management"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./components",children:"Components API"})," - UI components that use Tailwind classes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./window",children:"Window API"})," - Window management"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(n.p,{children:["See the ",(0,l.jsx)(n.a,{href:"../tutorial-basics/your-first-app",children:"Your First App Tutorial"})," for a complete example of using the CLI to create and develop a OneForAll application."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.p,{children:"The CLI provides essential tools for OneForAll development, from project creation to hot reload development and CSS generation, making it easy to build and maintain desktop applications."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},1197:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6363);const l={},t=s.createContext(l);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
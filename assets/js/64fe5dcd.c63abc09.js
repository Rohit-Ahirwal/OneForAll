"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[652],{1197:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6363);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},6108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorial-basics/styling","title":"Styling with Tailwind CSS","description":"OneForAll uses Tailwind CSS for styling, providing a utility-first approach that makes it easy to create beautiful, responsive designs. This tutorial covers everything you need to know about styling your OneForAll applications.","source":"@site/docs/tutorial-basics/styling.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/styling","permalink":"/docs/tutorial-basics/styling","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/tutorial-basics/styling.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Creating Layouts","permalink":"/docs/tutorial-basics/creating-layouts"},"next":{"title":"Multiple Windows","permalink":"/docs/tutorial-basics/multiple-windows"}}');var s=t(7259),i=t(1197);const r={sidebar_position:4},o="Styling with Tailwind CSS",d={},l=[{value:"Tailwind CSS Basics",id:"tailwind-css-basics",level:2},{value:"Basic Styling",id:"basic-styling",level:3},{value:"Color System",id:"color-system",level:2},{value:"Text Colors",id:"text-colors",level:3},{value:"Background Colors",id:"background-colors",level:3},{value:"Color Shades",id:"color-shades",level:3},{value:"Typography",id:"typography",level:2},{value:"Font Sizes",id:"font-sizes",level:3},{value:"Font Weights",id:"font-weights",level:3},{value:"Text Alignment",id:"text-alignment",level:3},{value:"Spacing",id:"spacing",level:2},{value:"Padding",id:"padding",level:3},{value:"Margin",id:"margin",level:3},{value:"Space Between",id:"space-between",level:3},{value:"Borders and Shadows",id:"borders-and-shadows",level:2},{value:"Borders",id:"borders",level:3},{value:"Shadows",id:"shadows",level:3},{value:"Rounded Corners",id:"rounded-corners",level:2},{value:"Interactive States",id:"interactive-states",level:2},{value:"Hover Effects",id:"hover-effects",level:3},{value:"Focus States",id:"focus-states",level:3},{value:"Gradients",id:"gradients",level:2},{value:"Responsive Design",id:"responsive-design",level:2},{value:"Responsive Classes",id:"responsive-classes",level:3},{value:"Breakpoint Reference",id:"breakpoint-reference",level:3},{value:"Component Styling Patterns",id:"component-styling-patterns",level:2},{value:"Button Variants",id:"button-variants",level:3},{value:"Card Variants",id:"card-variants",level:3},{value:"Dark Mode Support",id:"dark-mode-support",level:2},{value:"Custom Styling Utilities",id:"custom-styling-utilities",level:2},{value:"Creating Reusable Style Classes",id:"creating-reusable-style-classes",level:3},{value:"Animation and Transitions",id:"animation-and-transitions",level:2},{value:"Complete Styling Example",id:"complete-styling-example",level:2},{value:"Styling Best Practices",id:"styling-best-practices",level:2},{value:"1. Use Consistent Color Schemes",id:"1-use-consistent-color-schemes",level:3},{value:"2. Maintain Consistent Spacing",id:"2-maintain-consistent-spacing",level:3},{value:"3. Use Semantic Class Names",id:"3-use-semantic-class-names",level:3},{value:"4. Plan for Responsive Design",id:"4-plan-for-responsive-design",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"styling-with-tailwind-css",children:"Styling with Tailwind CSS"})}),"\n",(0,s.jsx)(n.p,{children:"OneForAll uses Tailwind CSS for styling, providing a utility-first approach that makes it easy to create beautiful, responsive designs. This tutorial covers everything you need to know about styling your OneForAll applications."}),"\n",(0,s.jsx)(n.h2,{id:"tailwind-css-basics",children:"Tailwind CSS Basics"}),"\n",(0,s.jsx)(n.p,{children:"Tailwind CSS uses utility classes that you apply directly to your components. Instead of writing custom CSS, you compose designs using pre-built classes."}),"\n",(0,s.jsx)(n.h3,{id:"basic-styling",children:"Basic Styling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\nwindow = Window(title="Styling Demo", size=(800, 600))\n\n# Basic text styling\nstyled_text = Text(\n    "Hello, World!", \n    className="text-2xl font-bold text-blue-600 text-center"\n)\n\n# Basic button styling\nstyled_button = Button(\n    "Click Me", \n    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"\n)\n\n# Container with background and padding\nstyled_container = Container(className="bg-gray-100 p-6 rounded-lg shadow-md")\nstyled_container.add(styled_text)\nstyled_container.add(styled_button)\n\nwindow.add_child(styled_container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"color-system",children:"Color System"}),"\n",(0,s.jsx)(n.h3,{id:"text-colors",children:"Text Colors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Text color examples\ncolors_container = Container(className="space-y-2 p-4")\n\ntext_colors = [\n    ("text-gray-900", "Dark Gray Text"),\n    ("text-red-600", "Red Text"),\n    ("text-blue-600", "Blue Text"),\n    ("text-green-600", "Green Text"),\n    ("text-yellow-600", "Yellow Text"),\n    ("text-purple-600", "Purple Text"),\n    ("text-pink-600", "Pink Text"),\n]\n\nfor color_class, label in text_colors:\n    colors_container.add(Text(label, className=f"{color_class} font-medium"))\n\nwindow.add_child(colors_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"background-colors",children:"Background Colors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Background color examples\nbg_container = Container(className="grid grid-cols-2 gap-4 p-4")\n\nbackground_colors = [\n    ("bg-red-100", "Light Red Background"),\n    ("bg-blue-100", "Light Blue Background"),\n    ("bg-green-100", "Light Green Background"),\n    ("bg-yellow-100", "Light Yellow Background"),\n    ("bg-purple-100", "Light Purple Background"),\n    ("bg-pink-100", "Light Pink Background"),\n]\n\nfor bg_class, label in background_colors:\n    card = Container(className=f"{bg_class} p-4 rounded-lg")\n    card.add(Text(label, className="text-gray-800 font-medium"))\n    bg_container.add(card)\n\nwindow.add_child(bg_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"color-shades",children:"Color Shades"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Different shades of the same color\nshades_container = Container(className="space-y-2 p-4")\n\nblue_shades = [\n    ("bg-blue-50 text-blue-900", "Blue 50"),\n    ("bg-blue-100 text-blue-900", "Blue 100"),\n    ("bg-blue-200 text-blue-900", "Blue 200"),\n    ("bg-blue-300 text-blue-800", "Blue 300"),\n    ("bg-blue-400 text-blue-800", "Blue 400"),\n    ("bg-blue-500 text-white", "Blue 500"),\n    ("bg-blue-600 text-white", "Blue 600"),\n    ("bg-blue-700 text-white", "Blue 700"),\n    ("bg-blue-800 text-white", "Blue 800"),\n    ("bg-blue-900 text-white", "Blue 900"),\n]\n\nfor classes, label in blue_shades:\n    shade_item = Container(className=f"{classes} p-3 rounded")\n    shade_item.add(Text(label, className="font-medium"))\n    shades_container.add(shade_item)\n\nwindow.add_child(shades_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"typography",children:"Typography"}),"\n",(0,s.jsx)(n.h3,{id:"font-sizes",children:"Font Sizes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Font size examples\ntypography_container = Container(className="space-y-4 p-4")\n\nfont_sizes = [\n    ("text-xs", "Extra Small Text (12px)"),\n    ("text-sm", "Small Text (14px)"),\n    ("text-base", "Base Text (16px)"),\n    ("text-lg", "Large Text (18px)"),\n    ("text-xl", "Extra Large Text (20px)"),\n    ("text-2xl", "2X Large Text (24px)"),\n    ("text-3xl", "3X Large Text (30px)"),\n    ("text-4xl", "4X Large Text (36px)"),\n]\n\nfor size_class, label in font_sizes:\n    typography_container.add(Text(label, className=f"{size_class} text-gray-800"))\n\nwindow.add_child(typography_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"font-weights",children:"Font Weights"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Font weight examples\nweights_container = Container(className="space-y-2 p-4")\n\nfont_weights = [\n    ("font-thin", "Thin Weight (100)"),\n    ("font-light", "Light Weight (300)"),\n    ("font-normal", "Normal Weight (400)"),\n    ("font-medium", "Medium Weight (500)"),\n    ("font-semibold", "Semibold Weight (600)"),\n    ("font-bold", "Bold Weight (700)"),\n    ("font-extrabold", "Extra Bold Weight (800)"),\n    ("font-black", "Black Weight (900)"),\n]\n\nfor weight_class, label in font_weights:\n    weights_container.add(Text(label, className=f"{weight_class} text-lg text-gray-800"))\n\nwindow.add_child(weights_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"text-alignment",children:"Text Alignment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Text alignment examples\nalignment_container = Container(className="space-y-4 p-4 bg-gray-50")\n\nalignments = [\n    ("text-left", "Left aligned text"),\n    ("text-center", "Center aligned text"),\n    ("text-right", "Right aligned text"),\n    ("text-justify", "Justified text that spans multiple lines and is aligned to both left and right margins"),\n]\n\nfor align_class, text_content in alignments:\n    alignment_container.add(Text(text_content, className=f"{align_class} text-gray-800 bg-white p-3 rounded"))\n\nwindow.add_child(alignment_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spacing",children:"Spacing"}),"\n",(0,s.jsx)(n.h3,{id:"padding",children:"Padding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Padding examples\npadding_container = Container(className="space-y-4 p-4")\n\npadding_examples = [\n    ("p-2", "Padding 2 (8px all sides)"),\n    ("p-4", "Padding 4 (16px all sides)"),\n    ("px-4 py-2", "Horizontal 4, Vertical 2"),\n    ("pt-4 pb-2 pl-6 pr-6", "Top 4, Bottom 2, Left/Right 6"),\n]\n\nfor padding_class, label in padding_examples:\n    example = Container(className=f"bg-blue-100 {padding_class} rounded border-2 border-blue-300")\n    example.add(Text(label, className="text-blue-800 font-medium"))\n    padding_container.add(example)\n\nwindow.add_child(padding_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"margin",children:"Margin"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Margin examples\nmargin_container = Container(className="bg-gray-100 p-4")\n\nmargin_examples = [\n    ("m-2", "Margin 2 (8px all sides)"),\n    ("m-4", "Margin 4 (16px all sides)"),\n    ("mx-4 my-2", "Horizontal 4, Vertical 2"),\n    ("mt-4 mb-2", "Top 4, Bottom 2"),\n]\n\nfor margin_class, label in margin_examples:\n    example = Container(className=f"bg-white {margin_class} p-3 rounded border")\n    example.add(Text(label, className="text-gray-800 font-medium"))\n    margin_container.add(example)\n\nwindow.add_child(margin_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"space-between",children:"Space Between"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Space between children\nspace_container = Container(className="space-y-4 p-4")\n\n# Vertical spacing\nvertical_space = Container(className="space-y-3")\nfor i in range(3):\n    vertical_space.add(Container(className="bg-blue-100 p-3 rounded"))\n    vertical_space.children[-1].add(Text(f"Item {i+1}", className="text-blue-800"))\n\nspace_container.add(Text("Vertical Spacing (space-y-3):", className="font-bold"))\nspace_container.add(vertical_space)\n\n# Horizontal spacing\nhorizontal_space = Container(className="flex space-x-3")\nfor i in range(3):\n    horizontal_space.add(Container(className="bg-green-100 p-3 rounded"))\n    horizontal_space.children[-1].add(Text(f"Item {i+1}", className="text-green-800"))\n\nspace_container.add(Text("Horizontal Spacing (space-x-3):", className="font-bold"))\nspace_container.add(horizontal_space)\n\nwindow.add_child(space_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"borders-and-shadows",children:"Borders and Shadows"}),"\n",(0,s.jsx)(n.h3,{id:"borders",children:"Borders"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Border examples\nborder_container = Container(className="grid grid-cols-2 gap-4 p-4")\n\nborder_examples = [\n    ("border", "Default Border"),\n    ("border-2", "Thick Border"),\n    ("border-4", "Extra Thick Border"),\n    ("border-dashed", "Dashed Border"),\n    ("border-dotted", "Dotted Border"),\n    ("border-t-4", "Top Border Only"),\n    ("border-l-4 border-blue-500", "Left Blue Border"),\n    ("border-2 border-red-500", "Red Border"),\n]\n\nfor border_class, label in border_examples:\n    border_example = Container(className=f"{border_class} p-4 rounded bg-white")\n    border_example.add(Text(label, className="text-gray-800 font-medium"))\n    border_container.add(border_example)\n\nwindow.add_child(border_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"shadows",children:"Shadows"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Shadow examples\nshadow_container = Container(className="grid grid-cols-2 gap-6 p-6 bg-gray-50")\n\nshadow_examples = [\n    ("shadow-sm", "Small Shadow"),\n    ("shadow", "Default Shadow"),\n    ("shadow-md", "Medium Shadow"),\n    ("shadow-lg", "Large Shadow"),\n    ("shadow-xl", "Extra Large Shadow"),\n    ("shadow-2xl", "2X Large Shadow"),\n    ("shadow-inner", "Inner Shadow"),\n    ("shadow-none", "No Shadow"),\n]\n\nfor shadow_class, label in shadow_examples:\n    shadow_example = Container(className=f"bg-white p-4 rounded {shadow_class}")\n    shadow_example.add(Text(label, className="text-gray-800 font-medium"))\n    shadow_container.add(shadow_example)\n\nwindow.add_child(shadow_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"rounded-corners",children:"Rounded Corners"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Rounded corner examples\nrounded_container = Container(className="grid grid-cols-3 gap-4 p-4")\n\nrounded_examples = [\n    ("rounded-none", "No Rounding"),\n    ("rounded-sm", "Small Rounding"),\n    ("rounded", "Default Rounding"),\n    ("rounded-md", "Medium Rounding"),\n    ("rounded-lg", "Large Rounding"),\n    ("rounded-xl", "Extra Large Rounding"),\n    ("rounded-2xl", "2X Large Rounding"),\n    ("rounded-3xl", "3X Large Rounding"),\n    ("rounded-full", "Full Rounding"),\n]\n\nfor rounded_class, label in rounded_examples:\n    rounded_example = Container(className=f"bg-blue-100 p-4 {rounded_class} border-2 border-blue-300")\n    rounded_example.add(Text(label, className="text-blue-800 font-medium text-center"))\n    rounded_container.add(rounded_example)\n\nwindow.add_child(rounded_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"interactive-states",children:"Interactive States"}),"\n",(0,s.jsx)(n.h3,{id:"hover-effects",children:"Hover Effects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Hover effect examples\nhover_container = Container(className="space-y-4 p-4")\n\n# Hover button\nhover_button = Button(\n    "Hover Me", \n    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors duration-200"\n)\nhover_container.add(hover_button)\n\n# Hover card\nhover_card = Container(className="bg-white p-4 rounded-lg shadow hover:shadow-lg transition-shadow duration-200 cursor-pointer")\nhover_card.add(Text("Hover Card", className="font-bold text-lg"))\nhover_card.add(Text("This card has a hover effect", className="text-gray-600"))\nhover_container.add(hover_card)\n\n# Color change on hover\ncolor_hover = Container(className="bg-gray-100 hover:bg-blue-100 p-4 rounded transition-colors duration-200")\ncolor_hover.add(Text("Hover to change background", className="text-gray-800"))\nhover_container.add(color_hover)\n\nwindow.add_child(hover_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"focus-states",children:"Focus States"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Focus state examples (for interactive elements)\nfocus_container = Container(className="space-y-4 p-4")\n\n# Focus button\nfocus_button = Button(\n    "Focus Me", \n    className="bg-green-500 hover:bg-green-600 focus:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 text-white font-bold py-2 px-4 rounded"\n)\nfocus_container.add(focus_button)\n\nwindow.add_child(focus_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"gradients",children:"Gradients"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Gradient examples\ngradient_container = Container(className="space-y-4 p-4")\n\ngradient_examples = [\n    ("bg-gradient-to-r from-blue-500 to-purple-600", "Blue to Purple"),\n    ("bg-gradient-to-br from-green-400 to-blue-600", "Green to Blue (diagonal)"),\n    ("bg-gradient-to-t from-yellow-400 via-red-500 to-pink-500", "Multi-color gradient"),\n    ("bg-gradient-to-r from-purple-400 via-pink-500 to-red-500", "Purple to Red"),\n]\n\nfor gradient_class, label in gradient_examples:\n    gradient_example = Container(className=f"{gradient_class} p-6 rounded-lg")\n    gradient_example.add(Text(label, className="text-white font-bold text-center"))\n    gradient_container.add(gradient_example)\n\nwindow.add_child(gradient_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"responsive-design",children:"Responsive Design"}),"\n",(0,s.jsx)(n.h3,{id:"responsive-classes",children:"Responsive Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Responsive design examples\nresponsive_container = Container(className="p-4")\n\n# Responsive text size\nresponsive_text = Text(\n    "Responsive Text", \n    className="text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl font-bold text-center"\n)\nresponsive_container.add(responsive_text)\n\n# Responsive padding\nresponsive_padding = Container(className="bg-blue-100 p-2 sm:p-4 md:p-6 lg:p-8 rounded mt-4")\nresponsive_padding.add(Text("Responsive Padding", className="text-blue-800 font-medium"))\nresponsive_container.add(responsive_padding)\n\n# Responsive grid\nresponsive_grid = Container(className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4")\nfor i in range(8):\n    grid_item = Container(className="bg-gray-200 p-3 rounded")\n    grid_item.add(Text(f"Item {i+1}", className="text-center font-medium"))\n    responsive_grid.add(grid_item)\n\nresponsive_container.add(responsive_grid)\nwindow.add_child(responsive_container)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"breakpoint-reference",children:"Breakpoint Reference"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Breakpoint demonstration\nbreakpoint_info = Container(className="p-4 bg-gray-50 rounded")\nbreakpoint_info.add(Text("Tailwind CSS Breakpoints:", className="font-bold text-lg mb-4"))\n\nbreakpoints = [\n    ("sm:", "640px and up"),\n    ("md:", "768px and up"),\n    ("lg:", "1024px and up"),\n    ("xl:", "1280px and up"),\n    ("2xl:", "1536px and up"),\n]\n\nfor prefix, description in breakpoints:\n    breakpoint_item = Container(className="flex justify-between items-center py-2 border-b border-gray-200")\n    breakpoint_item.add(Text(prefix, className="font-mono font-bold text-blue-600"))\n    breakpoint_item.add(Text(description, className="text-gray-600"))\n    breakpoint_info.add(breakpoint_item)\n\nwindow.add_child(breakpoint_info)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"component-styling-patterns",children:"Component Styling Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"button-variants",children:"Button Variants"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Different button styles\nbutton_variants = Container(className="space-y-4 p-4")\n\n# Primary button\nprimary_btn = Button(\n    "Primary", \n    className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors"\n)\nbutton_variants.add(primary_btn)\n\n# Secondary button\nsecondary_btn = Button(\n    "Secondary", \n    className="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors"\n)\nbutton_variants.add(secondary_btn)\n\n# Outline button\noutline_btn = Button(\n    "Outline", \n    className="border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white font-medium py-2 px-4 rounded-md transition-colors"\n)\nbutton_variants.add(outline_btn)\n\n# Danger button\ndanger_btn = Button(\n    "Danger", \n    className="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors"\n)\nbutton_variants.add(danger_btn)\n\n# Success button\nsuccess_btn = Button(\n    "Success", \n    className="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors"\n)\nbutton_variants.add(success_btn)\n\nwindow.add_child(button_variants)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"card-variants",children:"Card Variants"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Different card styles\ncard_variants = Container(className="grid grid-cols-1 md:grid-cols-2 gap-6 p-4")\n\n# Simple card\nsimple_card = Container(className="bg-white p-6 rounded-lg shadow-md")\nsimple_card.add(Text("Simple Card", className="text-xl font-bold mb-2"))\nsimple_card.add(Text("This is a simple card with basic styling.", className="text-gray-600"))\ncard_variants.add(simple_card)\n\n# Bordered card\nbordered_card = Container(className="bg-white p-6 rounded-lg border-2 border-gray-200 hover:border-blue-300 transition-colors")\nbordered_card.add(Text("Bordered Card", className="text-xl font-bold mb-2"))\nbordered_card.add(Text("This card has a border instead of shadow.", className="text-gray-600"))\ncard_variants.add(bordered_card)\n\n# Gradient card\ngradient_card = Container(className="bg-gradient-to-br from-purple-500 to-pink-500 p-6 rounded-lg text-white")\ngradient_card.add(Text("Gradient Card", className="text-xl font-bold mb-2"))\ngradient_card.add(Text("This card has a gradient background.", className="text-purple-100"))\ncard_variants.add(gradient_card)\n\n# Elevated card\nelevated_card = Container(className="bg-white p-6 rounded-lg shadow-xl hover:shadow-2xl transition-shadow")\nelevated_card.add(Text("Elevated Card", className="text-xl font-bold mb-2"))\nelevated_card.add(Text("This card has a strong shadow effect.", className="text-gray-600"))\ncard_variants.add(elevated_card)\n\nwindow.add_child(card_variants)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"dark-mode-support",children:"Dark Mode Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Dark mode styling (when supported)\ndark_mode_container = Container(className="p-4")\n\n# Dark mode card\ndark_card = Container(className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md")\ndark_card.add(Text("Dark Mode Card", className="text-gray-900 dark:text-white text-xl font-bold mb-2"))\ndark_card.add(Text("This card adapts to dark mode.", className="text-gray-600 dark:text-gray-300"))\ndark_mode_container.add(dark_card)\n\n# Dark mode button\ndark_button = Button(\n    "Dark Mode Button", \n    className="bg-blue-600 dark:bg-blue-500 hover:bg-blue-700 dark:hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition-colors"\n)\ndark_mode_container.add(dark_button)\n\nwindow.add_child(dark_mode_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"custom-styling-utilities",children:"Custom Styling Utilities"}),"\n",(0,s.jsx)(n.h3,{id:"creating-reusable-style-classes",children:"Creating Reusable Style Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class StyleUtils:\n    """Utility class for common styling patterns"""\n    \n    # Button styles\n    BUTTON_PRIMARY = "bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors"\n    BUTTON_SECONDARY = "bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors"\n    BUTTON_DANGER = "bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors"\n    \n    # Card styles\n    CARD_DEFAULT = "bg-white p-6 rounded-lg shadow-md"\n    CARD_BORDERED = "bg-white p-6 rounded-lg border-2 border-gray-200"\n    CARD_ELEVATED = "bg-white p-6 rounded-lg shadow-xl"\n    \n    # Text styles\n    HEADING_1 = "text-3xl font-bold text-gray-900"\n    HEADING_2 = "text-2xl font-bold text-gray-900"\n    HEADING_3 = "text-xl font-bold text-gray-900"\n    BODY_TEXT = "text-base text-gray-700"\n    MUTED_TEXT = "text-sm text-gray-500"\n    \n    # Layout styles\n    CONTAINER_CENTERED = "max-w-4xl mx-auto px-4"\n    FLEX_CENTER = "flex items-center justify-center"\n    GRID_RESPONSIVE = "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"\n\n# Usage example\nutils_demo = Container(className="p-4 space-y-4")\n\n# Using style utilities\nutils_demo.add(Text("Main Heading", className=StyleUtils.HEADING_1))\nutils_demo.add(Text("Subheading", className=StyleUtils.HEADING_2))\nutils_demo.add(Text("This is body text using our utility class.", className=StyleUtils.BODY_TEXT))\nutils_demo.add(Text("This is muted text.", className=StyleUtils.MUTED_TEXT))\n\n# Card with utility class\nutility_card = Container(className=StyleUtils.CARD_DEFAULT)\nutility_card.add(Text("Utility Card", className=StyleUtils.HEADING_3))\nutility_card.add(Text("This card uses our predefined style.", className=StyleUtils.BODY_TEXT))\nutility_card.add(Button("Primary Action", className=StyleUtils.BUTTON_PRIMARY))\nutils_demo.add(utility_card)\n\nwindow.add_child(utils_demo)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"animation-and-transitions",children:"Animation and Transitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Animation examples\nanimation_container = Container(className="space-y-6 p-4")\n\n# Transition effects\ntransition_card = Container(className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transform hover:scale-105 transition-all duration-300")\ntransition_card.add(Text("Hover Animation", className="text-xl font-bold mb-2"))\ntransition_card.add(Text("This card scales and changes shadow on hover.", className="text-gray-600"))\nanimation_container.add(transition_card)\n\n# Color transition\ncolor_transition = Container(className="bg-blue-100 hover:bg-blue-200 p-4 rounded transition-colors duration-500")\ncolor_transition.add(Text("Slow Color Transition", className="text-blue-800 font-medium"))\nanimation_container.add(color_transition)\n\n# Multiple transitions\nmulti_transition = Button(\n    "Multi-Effect Button", \n    className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-lg transform hover:scale-110 hover:shadow-lg transition-all duration-200"\n)\nanimation_container.add(multi_transition)\n\nwindow.add_child(animation_container)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"complete-styling-example",children:"Complete Styling Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example showcasing various styling techniques:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\nwindow = Window(title="Complete Styling Demo", size=(1000, 700))\n\n# Main container with background\nmain_container = Container(className="min-h-full bg-gradient-to-br from-blue-50 to-indigo-100 p-6")\n\n# Header section\nheader = Container(className="text-center mb-8")\nheader.add(Text("OneForAll Styling Demo", className="text-4xl font-bold text-gray-800 mb-2"))\nheader.add(Text("Showcasing Tailwind CSS styling capabilities", className="text-xl text-gray-600"))\nmain_container.add(header)\n\n# Feature cards grid\nfeatures_grid = Container(className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8")\n\nfeatures = [\n    {\n        "title": "Colors & Typography",\n        "description": "Rich color palette and typography system",\n        "icon": "\ud83c\udfa8",\n        "bg": "bg-red-100",\n        "text": "text-red-800",\n        "button": "bg-red-500 hover:bg-red-600"\n    },\n    {\n        "title": "Layouts & Spacing",\n        "description": "Flexible layout system with consistent spacing",\n        "icon": "\ud83d\udcd0",\n        "bg": "bg-blue-100",\n        "text": "text-blue-800",\n        "button": "bg-blue-500 hover:bg-blue-600"\n    },\n    {\n        "title": "Interactive States",\n        "description": "Hover, focus, and transition effects",\n        "icon": "\u26a1",\n        "bg": "bg-green-100",\n        "text": "text-green-800",\n        "button": "bg-green-500 hover:bg-green-600"\n    },\n    {\n        "title": "Responsive Design",\n        "description": "Mobile-first responsive design system",\n        "icon": "\ud83d\udcf1",\n        "bg": "bg-purple-100",\n        "text": "text-purple-800",\n        "button": "bg-purple-500 hover:bg-purple-600"\n    },\n    {\n        "title": "Shadows & Borders",\n        "description": "Elegant shadows and border utilities",\n        "icon": "\ud83d\udd32",\n        "bg": "bg-yellow-100",\n        "text": "text-yellow-800",\n        "button": "bg-yellow-500 hover:bg-yellow-600"\n    },\n    {\n        "title": "Animations",\n        "description": "Smooth transitions and animations",\n        "icon": "\ud83c\udfad",\n        "bg": "bg-pink-100",\n        "text": "text-pink-800",\n        "button": "bg-pink-500 hover:bg-pink-600"\n    }\n]\n\nfor feature in features:\n    card = Container(className=f"bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 {feature[\'bg\']} border border-gray-200")\n    \n    # Icon\n    card.add(Text(feature["icon"], className="text-4xl mb-4 text-center"))\n    \n    # Title\n    card.add(Text(feature["title"], className=f"text-xl font-bold {feature[\'text\']} mb-3 text-center"))\n    \n    # Description\n    card.add(Text(feature["description"], className="text-gray-600 text-center mb-4"))\n    \n    # Button\n    card.add(Button(\n        "Learn More", \n        className=f"{feature[\'button\']} text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 w-full"\n    ))\n    \n    features_grid.add(card)\n\nmain_container.add(features_grid)\n\n# Stats section\nstats_section = Container(className="bg-white rounded-2xl shadow-xl p-8 mb-8")\nstats_section.add(Text("Styling Statistics", className="text-2xl font-bold text-center text-gray-800 mb-6"))\n\nstats_grid = Container(className="grid grid-cols-1 md:grid-cols-4 gap-6")\n\nstats = [\n    ("500+", "Utility Classes", "text-blue-600"),\n    ("12", "Color Palettes", "text-green-600"),\n    ("5", "Breakpoints", "text-purple-600"),\n    ("\u221e", "Possibilities", "text-red-600")\n]\n\nfor value, label, color in stats:\n    stat_item = Container(className="text-center")\n    stat_item.add(Text(value, className=f"text-4xl font-bold {color} mb-2"))\n    stat_item.add(Text(label, className="text-gray-600 font-medium"))\n    stats_grid.add(stat_item)\n\nstats_section.add(stats_grid)\nmain_container.add(stats_section)\n\n# Call-to-action section\ncta_section = Container(className="bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl p-8 text-center text-white")\ncta_section.add(Text("Ready to Style Your App?", className="text-3xl font-bold mb-4"))\ncta_section.add(Text("Start building beautiful interfaces with OneForAll and Tailwind CSS", className="text-xl text-indigo-100 mb-6"))\n\ncta_buttons = Container(className="flex flex-col sm:flex-row gap-4 justify-center")\ncta_buttons.add(Button(\n    "Get Started", \n    className="bg-white text-indigo-600 font-bold py-3 px-8 rounded-lg hover:bg-gray-100 transition-colors duration-200"\n))\ncta_buttons.add(Button(\n    "View Examples", \n    className="border-2 border-white text-white font-bold py-3 px-8 rounded-lg hover:bg-white hover:text-indigo-600 transition-colors duration-200"\n))\ncta_section.add(cta_buttons)\n\nmain_container.add(cta_section)\n\nwindow.add_child(main_container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"styling-best-practices",children:"Styling Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-use-consistent-color-schemes",children:"1. Use Consistent Color Schemes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - Consistent color scheme\nprimary_color = "blue-600"\nsecondary_color = "gray-600"\nsuccess_color = "green-600"\ndanger_color = "red-600"\n\n# Use throughout your app\nprimary_button = Button("Primary", className=f"bg-{primary_color} text-white")\nsecondary_button = Button("Secondary", className=f"bg-{secondary_color} text-white")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-maintain-consistent-spacing",children:"2. Maintain Consistent Spacing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - Consistent spacing scale\ncontainer = Container(className="p-4 space-y-4")  # 16px padding and spacing\ncard = Container(className="p-6 space-y-3")       # 24px padding, 12px spacing\n\n# \u274c Bad - Inconsistent spacing\ncontainer = Container(className="p-3 space-y-5")  # Mixed spacing values\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-use-semantic-class-names",children:"3. Use Semantic Class Names"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - Semantic styling\nerror_message = Text("Error occurred", className="text-red-600 font-medium")\nsuccess_message = Text("Success!", className="text-green-600 font-medium")\n\n# \u274c Bad - Non-semantic styling\nred_text = Text("Error occurred", className="text-red-600 font-medium")\ngreen_text = Text("Success!", className="text-green-600 font-medium")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-plan-for-responsive-design",children:"4. Plan for Responsive Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - Mobile-first responsive\nresponsive_grid = Container(className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4")\n\n# \u274c Bad - Desktop-only design\nfixed_grid = Container(className="grid grid-cols-3 gap-4")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"You now know how to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Apply colors, typography, and spacing"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Create borders, shadows, and rounded corners"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Use responsive design principles"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Add hover effects and transitions"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Create reusable styling utilities"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Build complete styled interfaces"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./multiple-windows",children:"Multiple Windows"})," - Learn to work with multiple windows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/components",children:"Advanced Components"})," - Explore all available components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/state-management",children:"State Management"})," - Master reactive state management"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
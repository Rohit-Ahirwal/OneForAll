"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[812],{1197:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var a=n(6363);const s={},o=a.createContext(s);function i(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:t},e.children)}},3066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"tutorial-basics/state-management","title":"State Management","description":"OneForAll provides a powerful reactive state management system that automatically tracks dependencies and updates only the components that need to be refreshed when state changes. This makes building dynamic, interactive applications simple and efficient.","source":"@site/versioned_docs/version-0.1.0.0a3/tutorial-basics/state-management.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/state-management","permalink":"/OneForAll/docs/tutorial-basics/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/versioned_docs/version-0.1.0.0a3/tutorial-basics/state-management.md","tags":[],"version":"0.1.0.0a3","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/OneForAll/docs/tutorial-basics/components"},"next":{"title":"Creating Layouts","permalink":"/OneForAll/docs/tutorial-basics/creating-layouts"}}');var s=n(7259),o=n(1197);const i={sidebar_position:3},r="State Management",l={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"What is State?",id:"what-is-state",level:3},{value:"Reactive Updates",id:"reactive-updates",level:3},{value:"Basic State Operations",id:"basic-state-operations",level:2},{value:"Creating State",id:"creating-state",level:3},{value:"Reading State",id:"reading-state",level:3},{value:"Updating State",id:"updating-state",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Simple Counter with Multiple Displays",id:"simple-counter-with-multiple-displays",level:3},{value:"User Profile Management",id:"user-profile-management",level:3},{value:"Todo List Application",id:"todo-list-application",level:3},{value:"Advanced State Patterns",id:"advanced-state-patterns",level:2},{value:"Computed State",id:"computed-state",level:3},{value:"State Validation",id:"state-validation",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"State Organization",id:"state-organization",level:3},{value:"State Updates",id:"state-updates",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"state-management",children:"State Management"})}),"\n",(0,s.jsx)(t.p,{children:"OneForAll provides a powerful reactive state management system that automatically tracks dependencies and updates only the components that need to be refreshed when state changes. This makes building dynamic, interactive applications simple and efficient."}),"\n",(0,s.jsx)(t.admonition,{title:"Alpha Version",type:"info",children:(0,s.jsxs)(t.p,{children:["State management is a core feature in OneForAll ",(0,s.jsx)(t.strong,{children:"alpha"})," (v0.1.0a3). The API is stable and performant for most use cases."]})}),"\n",(0,s.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(t.h3,{id:"what-is-state",children:"What is State?"}),"\n",(0,s.jsx)(t.p,{children:"State represents the data that can change over time in your application. This includes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"User input values"}),"\n",(0,s.jsx)(t.li,{children:"Application settings"}),"\n",(0,s.jsx)(t.li,{children:"UI state (like which tab is active)"}),"\n",(0,s.jsx)(t.li,{children:"Data from external sources"}),"\n",(0,s.jsx)(t.li,{children:"Computed values"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"reactive-updates",children:"Reactive Updates"}),"\n",(0,s.jsx)(t.p,{children:"When state changes, OneForAll automatically:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Identifies which components depend on that state"}),"\n",(0,s.jsx)(t.li,{children:"Re-renders only those components"}),"\n",(0,s.jsx)(t.li,{children:"Updates the UI efficiently without full page refreshes"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"basic-state-operations",children:"Basic State Operations"}),"\n",(0,s.jsx)(t.h3,{id:"creating-state",children:"Creating State"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"app.use_state()"})," to create or access state variables:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from oneforall import App, Text, Button\n\napp = App()\n\n# Create state with initial value\ncounter = app.use_state('counter', 0)\nuser_name = app.use_state('user_name', 'Anonymous')\nis_logged_in = app.use_state('logged_in', False)\n\n# Display state in components\ncounter_display = Text(f\"Count: {counter}\")\ngreeting = Text(f\"Hello, {user_name}!\")\n"})}),"\n",(0,s.jsx)(t.h3,{id:"reading-state",children:"Reading State"}),"\n",(0,s.jsxs)(t.p,{children:["Access current state values using ",(0,s.jsx)(t.code,{children:"app.get_state()"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def handle_click():\n    current_count = app.get_state('counter')\n    current_user = app.get_state('user_name')\n    print(f\"User {current_user} clicked {current_count} times\")\n"})}),"\n",(0,s.jsx)(t.h3,{id:"updating-state",children:"Updating State"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"app.set_state()"})," to update state and trigger UI updates:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def increment_counter():\n    current = app.get_state('counter')\n    app.set_state('counter', current + 1)\n\ndef update_user():\n    app.set_state('user_name', 'John Doe')\n    app.set_state('logged_in', True)\n\nincrement_btn = Button(\"Increment\", on_click=increment_counter)\nlogin_btn = Button(\"Login\", on_click=update_user)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,s.jsx)(t.h3,{id:"simple-counter-with-multiple-displays",children:"Simple Counter with Multiple Displays"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Text, Button, Container\n\napp = App()\nwindow = app.create_window(title="Counter App", size=(400, 300))\n\n# Initialize counter state\ncounter = app.use_state(\'counter\', 0)\n\n# Multiple components showing the same state\nmain_display = Text(f"Count: {counter}", className="text-3xl font-bold text-blue-600")\nsmall_display = Text(f"Current value: {counter}", className="text-sm text-gray-600")\nstatus_text = Text(\n    "Even" if counter % 2 == 0 else "Odd", \n    className="text-lg font-medium text-purple-600"\n)\n\n# Event handlers\ndef increment():\n    current = app.get_state(\'counter\')\n    app.set_state(\'counter\', current + 1)\n\ndef decrement():\n    current = app.get_state(\'counter\')\n    app.set_state(\'counter\', current - 1)\n\ndef reset():\n    app.set_state(\'counter\', 0)\n\n# Buttons\nincrement_btn = Button("+ Increment", on_click=increment)\ndecrement_btn = Button("- Decrement", on_click=decrement)\nreset_btn = Button("Reset", on_click=reset)\n\n# Layout\ncontainer = Container(className="p-8 space-y-4 text-center")\ncontainer.add(main_display)\ncontainer.add(small_display)\ncontainer.add(status_text)\n\nbutton_row = Container(className="flex space-x-4 justify-center")\nbutton_row.add(decrement_btn)\nbutton_row.add(increment_btn)\nbutton_row.add(reset_btn)\n\ncontainer.add(button_row)\nwindow.add_child(container)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"user-profile-management",children:"User Profile Management"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Text, Button, Container\n\napp = App()\nwindow = app.create_window(title="User Profile", size=(500, 400))\n\n# User state\nuser_name = app.use_state(\'user_name\', \'Guest\')\nuser_email = app.use_state(\'user_email\', \'guest@example.com\')\nis_premium = app.use_state(\'is_premium\', False)\nlogin_count = app.use_state(\'login_count\', 0)\n\n# Display components that react to state changes\nname_display = Text(f"Name: {user_name}", className="text-lg font-medium")\nemail_display = Text(f"Email: {user_email}", className="text-gray-600")\nstatus_display = Text(\n    f"Status: {\'Premium\' if is_premium else \'Free\'}", \n    className=f"font-semibold {\'text-gold-600\' if is_premium else \'text-gray-500\'}"\n)\nlogin_display = Text(f"Logins: {login_count}", className="text-sm text-blue-600")\n\n# Event handlers\ndef upgrade_to_premium():\n    app.set_state(\'is_premium\', True)\n\ndef simulate_login():\n    current_count = app.get_state(\'login_count\')\n    app.set_state(\'login_count\', current_count + 1)\n\ndef update_profile():\n    app.set_state(\'user_name\', \'John Doe\')\n    app.set_state(\'user_email\', \'john.doe@example.com\')\n\n# Buttons\nupgrade_btn = Button(\n    "Upgrade to Premium", \n    on_click=upgrade_to_premium,\n    className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600"\n)\n\nlogin_btn = Button(\n    "Simulate Login", \n    on_click=simulate_login,\n    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"\n)\n\nupdate_btn = Button(\n    "Update Profile", \n    on_click=update_profile,\n    className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"\n)\n\n# Layout\nprofile_container = Container(className="p-6 bg-white rounded-lg shadow-lg max-w-md mx-auto mt-8")\nprofile_container.add(Text("User Profile", className="text-2xl font-bold mb-4"))\nprofile_container.add(name_display)\nprofile_container.add(email_display)\nprofile_container.add(status_display)\nprofile_container.add(login_display)\n\nbutton_container = Container(className="mt-6 space-y-2")\nbutton_container.add(update_btn)\nbutton_container.add(upgrade_btn)\nbutton_container.add(login_btn)\n\nprofile_container.add(button_container)\nwindow.add_child(profile_container)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"todo-list-application",children:"Todo List Application"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from oneforall import App, Text, Button, Container\n\napp = App()\nwindow = app.create_window(title=\"Todo List\", size=(600, 500))\n\n# Todo state\ntodos = app.use_state('todos', [])\ntodo_count = app.use_state('todo_count', 0)\n\n# Helper functions\ndef add_todo(text):\n    current_todos = app.get_state('todos')\n    current_count = app.get_state('todo_count')\n    \n    new_todo = {\n        'id': current_count + 1,\n        'text': text,\n        'completed': False\n    }\n    \n    app.set_state('todos', current_todos + [new_todo])\n    app.set_state('todo_count', current_count + 1)\n\ndef toggle_todo(todo_id):\n    current_todos = app.get_state('todos')\n    updated_todos = []\n    \n    for todo in current_todos:\n        if todo['id'] == todo_id:\n            todo['completed'] = not todo['completed']\n        updated_todos.append(todo)\n    \n    app.set_state('todos', updated_todos)\n\ndef remove_todo(todo_id):\n    current_todos = app.get_state('todos')\n    filtered_todos = [todo for todo in current_todos if todo['id'] != todo_id]\n    app.set_state('todos', filtered_todos)\n\n# Event handlers\ndef add_sample_todo():\n    sample_todos = [\n        \"Learn OneForAll\",\n        \"Build a desktop app\",\n        \"Deploy to production\"\n    ]\n    import random\n    add_todo(random.choice(sample_todos))\n\ndef clear_completed():\n    current_todos = app.get_state('todos')\n    active_todos = [todo for todo in current_todos if not todo['completed']]\n    app.set_state('todos', active_todos)\n\n# Create todo list display\ndef create_todo_list():\n    todo_list = Container(className=\"space-y-2 max-h-64 overflow-y-auto\")\n    current_todos = app.get_state('todos')\n    \n    for todo in current_todos:\n        todo_item = Container(className=\"flex items-center space-x-3 p-2 bg-gray-50 rounded\")\n        \n        # Todo text\n        todo_text = Text(\n            todo['text'],\n            className=f\"flex-1 {'line-through text-gray-500' if todo['completed'] else 'text-gray-800'}\"\n        )\n        \n        # Toggle button\n        toggle_btn = Button(\n            \"\u2713\" if todo['completed'] else \"\u25cb\",\n            on_click=lambda tid=todo['id']: toggle_todo(tid),\n            className=f\"px-2 py-1 rounded {'bg-green-500 text-white' if todo['completed'] else 'bg-gray-200'}\"\n        )\n        \n        # Remove button\n        remove_btn = Button(\n            \"\u2715\",\n            on_click=lambda tid=todo['id']: remove_todo(tid),\n            className=\"px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\n        )\n        \n        todo_item.add(toggle_btn)\n        todo_item.add(todo_text)\n        todo_item.add(remove_btn)\n        todo_list.add(todo_item)\n    \n    return todo_list\n\n# Main container\nmain_container = Container(className=\"p-6 max-w-lg mx-auto\")\nmain_container.add(Text(\"Todo List\", className=\"text-3xl font-bold mb-6\"))\n\n# Stats\nstats_text = Text(\n    f\"Total: {len(todos)} | Completed: {len([t for t in todos if t.get('completed', False)])}\",\n    className=\"text-gray-600 mb-4\"\n)\nmain_container.add(stats_text)\n\n# Add todo button\nadd_btn = Button(\n    \"Add Sample Todo\",\n    on_click=add_sample_todo,\n    className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 mb-4\"\n)\nmain_container.add(add_btn)\n\n# Todo list (this will be recreated on each state change)\ntodo_list_container = create_todo_list()\nmain_container.add(todo_list_container)\n\n# Clear completed button\nclear_btn = Button(\n    \"Clear Completed\",\n    on_click=clear_completed,\n    className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 mt-4\"\n)\nmain_container.add(clear_btn)\n\nwindow.add_child(main_container)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"advanced-state-patterns",children:"Advanced State Patterns"}),"\n",(0,s.jsx)(t.h3,{id:"computed-state",children:"Computed State"}),"\n",(0,s.jsx)(t.p,{children:"Create derived state values that automatically update:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# Base state\nitems = app.use_state('items', [])\nfilter_type = app.use_state('filter', 'all')  # 'all', 'active', 'completed'\n\n# Computed values (recalculated when dependencies change)\ndef get_filtered_items():\n    all_items = app.get_state('items')\n    current_filter = app.get_state('filter')\n    \n    if current_filter == 'active':\n        return [item for item in all_items if not item.get('completed', False)]\n    elif current_filter == 'completed':\n        return [item for item in all_items if item.get('completed', False)]\n    else:\n        return all_items\n\ndef get_stats():\n    all_items = app.get_state('items')\n    total = len(all_items)\n    completed = len([item for item in all_items if item.get('completed', False)])\n    active = total - completed\n    \n    return {'total': total, 'completed': completed, 'active': active}\n\n# Use computed values in components\nfiltered_items = get_filtered_items()\nstats = get_stats()\n\nstats_display = Text(\n    f\"Total: {stats['total']} | Active: {stats['active']} | Completed: {stats['completed']}\",\n    className=\"text-sm text-gray-600\"\n)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"state-validation",children:"State Validation"}),"\n",(0,s.jsx)(t.p,{children:"Add validation when updating state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def set_user_age(age):\n    \"\"\"Set user age with validation\"\"\"\n    if isinstance(age, int) and 0 <= age <= 150:\n        app.set_state('user_age', age)\n        app.set_state('age_error', None)\n    else:\n        app.set_state('age_error', 'Age must be between 0 and 150')\n\ndef set_email(email):\n    \"\"\"Set email with basic validation\"\"\"\n    if '@' in email and '.' in email:\n        app.set_state('user_email', email)\n        app.set_state('email_error', None)\n    else:\n        app.set_state('email_error', 'Please enter a valid email address')\n\n# Display validation errors\nage_error = app.use_state('age_error', None)\nemail_error = app.use_state('email_error', None)\n\nif age_error:\n    error_display = Text(age_error, className=\"text-red-500 text-sm\")\n"})}),"\n",(0,s.jsx)(t.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,s.jsx)(t.p,{children:"Save and restore state (basic pattern):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import json\nimport os\n\ndef save_state():\n    \"\"\"Save current state to file\"\"\"\n    state_data = {\n        'user_name': app.get_state('user_name'),\n        'settings': app.get_state('settings'),\n        'preferences': app.get_state('preferences')\n    }\n    \n    with open('app_state.json', 'w') as f:\n        json.dump(state_data, f)\n\ndef load_state():\n    \"\"\"Load state from file\"\"\"\n    if os.path.exists('app_state.json'):\n        with open('app_state.json', 'r') as f:\n            state_data = json.load(f)\n            \n        for key, value in state_data.items():\n            app.set_state(key, value)\n\n# Load state on app start\nload_state()\n\n# Save state button\nsave_btn = Button(\"Save Settings\", on_click=save_state)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(t.h3,{id:"state-organization",children:"State Organization"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# \u2705 Good: Use descriptive state keys\napp.use_state('user_profile', {})\napp.use_state('app_settings', {})\napp.use_state('current_tab', 'home')\n\n# \u274c Avoid: Generic or unclear keys\napp.use_state('data', {})\napp.use_state('x', 0)\napp.use_state('temp', None)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"state-updates",children:"State Updates"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# \u2705 Good: Update state in event handlers\ndef handle_form_submit():\n    name = get_form_value('name')\n    app.set_state('user_name', name)\n\n# \u2705 Good: Batch related updates\ndef login_user(user_data):\n    app.set_state('user_name', user_data['name'])\n    app.set_state('user_email', user_data['email'])\n    app.set_state('is_logged_in', True)\n    app.set_state('login_time', datetime.now())\n\n# \u274c Avoid: Direct state mutation\n# Don't modify state objects directly\nuser_data = app.get_state('user_profile')\nuser_data['name'] = 'New Name'  # This won't trigger updates!\n\n# \u2705 Good: Create new objects for updates\nuser_data = app.get_state('user_profile')\nupdated_data = {**user_data, 'name': 'New Name'}\napp.set_state('user_profile', updated_data)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# \u2705 Good: Use specific state keys for different concerns\napp.use_state('ui_theme', 'light')\napp.use_state('user_preferences', {})\napp.use_state('app_data', {})\n\n# \u2705 Good: Minimize state dependencies in components\n# Only use state that the component actually needs\nuser_name = app.use_state('user_name', 'Guest')\nwelcome_text = Text(f\"Welcome, {user_name}!\")  # Only depends on user_name\n\n# \u274c Avoid: Unnecessary state dependencies\nall_app_state = app.use_state('entire_app_state', {})\nwelcome_text = Text(f\"Welcome, {all_app_state.get('user', {}).get('name', 'Guest')}!\")\n"})}),"\n",(0,s.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(t.p,{children:"Now that you understand OneForAll's state management:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./creating-layouts",children:"Create Beautiful Layouts"})," - Build complex UIs with state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./styling",children:"Style with Tailwind"})," - Style components based on state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./multiple-windows",children:"Multiple Windows"})," - Manage state across windows"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"../api/state-management",children:"API Reference"})," - Complete state management API"]}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.p,{children:"State management is the heart of interactive OneForAll applications. Master these patterns to build dynamic, responsive desktop applications!"})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);
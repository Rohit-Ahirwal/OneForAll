"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[646],{1197:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6363);const a={},l=s.createContext(a);function o(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(l.Provider,{value:n},e.children)}},1203:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/components","title":"Components API Reference","description":"OneForAll provides a component-based architecture for building user interfaces. All components inherit from the base Component class and can be composed to create complex UIs.","source":"@site/docs/api/components.md","sourceDirName":"api","slug":"/api/components","permalink":"/OneForAll/docs/next/api/components","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/api/components.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Window API Reference","permalink":"/OneForAll/docs/next/api/window"},"next":{"title":"State Management API Reference","permalink":"/OneForAll/docs/next/api/state-management"}}');var a=t(7259),l=t(1197);const o={sidebar_position:3},r="Components API Reference",i={},d=[{value:"Base Component Class",id:"base-component-class",level:2},{value:"Component",id:"component",level:3},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"render()",id:"render",level:5},{value:"add()",id:"add",level:5},{value:"remove()",id:"remove",level:5},{value:"children_html()",id:"children_html",level:5},{value:"Built-in Components",id:"built-in-components",level:2},{value:"Container",id:"container",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Usage Examples",id:"usage-examples",level:4},{value:"Text",id:"text",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Usage Examples",id:"usage-examples-1",level:4},{value:"Button",id:"button",level:3},{value:"Constructor",id:"constructor-1",level:4},{value:"Usage Examples",id:"usage-examples-2",level:4},{value:"Image",id:"image",level:3},{value:"Constructor",id:"constructor-2",level:4},{value:"Usage Examples",id:"usage-examples-3",level:4},{value:"Component Composition",id:"component-composition",level:2},{value:"Building Complex Components",id:"building-complex-components",level:3},{value:"Component Factory Pattern",id:"component-factory-pattern",level:3},{value:"Custom Components",id:"custom-components",level:2},{value:"Creating Custom Components",id:"creating-custom-components",level:3},{value:"Component with State Integration",id:"component-with-state-integration",level:3},{value:"Component Lifecycle",id:"component-lifecycle",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Rendering",id:"rendering",level:3},{value:"Updates and Re-rendering",id:"updates-and-re-rendering",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Component Organization",id:"component-organization",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Related APIs",id:"related-apis",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"components-api-reference",children:"Components API Reference"})}),"\n",(0,a.jsxs)(n.p,{children:["OneForAll provides a component-based architecture for building user interfaces. All components inherit from the base ",(0,a.jsx)(n.code,{children:"Component"})," class and can be composed to create complex UIs."]}),"\n",(0,a.jsx)(n.admonition,{title:"Alpha Version",type:"info",children:(0,a.jsxs)(n.p,{children:["The Components API is stable in OneForAll ",(0,a.jsx)(n.strong,{children:"alpha"})," (v0.1.0a3) with full functionality for building desktop applications."]})}),"\n",(0,a.jsx)(n.h2,{id:"base-component-class",children:"Base Component Class"}),"\n",(0,a.jsxs)(n.p,{children:["All OneForAll components inherit from the base ",(0,a.jsx)(n.code,{children:"Component"})," class, which provides core functionality for rendering, state management, and lifecycle."]}),"\n",(0,a.jsx)(n.h3,{id:"component",children:"Component"}),"\n",(0,a.jsx)(n.p,{children:"The base class for all UI components."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from oneforall.components import Component\n\nclass CustomComponent(Component):\n    def __init__(self, **props):\n        super().__init__(**props)\n    \n    def render(self):\n        return f'<div class=\"{self.className}\">{self.children_html()}</div>'\n"})}),"\n",(0,a.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(n.p,{children:"All components support these base properties:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"className"})," (",(0,a.jsx)(n.code,{children:"str"}),"): CSS classes to apply to the component"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"id"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Unique identifier for the component"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"style"})," (",(0,a.jsx)(n.code,{children:"dict"}),"): Inline CSS styles"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"children"})," (",(0,a.jsx)(n.code,{children:"list"}),"): Child components"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.h5,{id:"render",children:"render()"}),"\n",(0,a.jsx)(n.p,{children:"Renders the component to HTML."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"html = component.render()\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"})," ",(0,a.jsx)(n.code,{children:"str"})," - The HTML representation of the component"]}),"\n",(0,a.jsx)(n.h5,{id:"add",children:"add()"}),"\n",(0,a.jsx)(n.p,{children:"Adds a child component."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'container.add(Text("Hello World"))\ncontainer.add(Button("Click Me"))\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"component"})," (Component): The child component to add"]}),"\n"]}),"\n",(0,a.jsx)(n.h5,{id:"remove",children:"remove()"}),"\n",(0,a.jsx)(n.p,{children:"Removes a child component."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"container.remove(child_component)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"component"})," (Component): The child component to remove"]}),"\n"]}),"\n",(0,a.jsx)(n.h5,{id:"children_html",children:"children_html()"}),"\n",(0,a.jsx)(n.p,{children:"Renders all child components to HTML."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"children_html = component.children_html()\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"})," ",(0,a.jsx)(n.code,{children:"str"})," - The HTML of all child components"]}),"\n",(0,a.jsx)(n.h2,{id:"built-in-components",children:"Built-in Components"}),"\n",(0,a.jsx)(n.h3,{id:"container",children:"Container"}),"\n",(0,a.jsx)(n.p,{children:"A flexible container component for layout and grouping."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall import Container\n\ncontainer = Container(\n    className="flex flex-col p-4 bg-white rounded shadow",\n    id="main-container"\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"properties-1",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"className"})," (",(0,a.jsx)(n.code,{children:"str"}),"): CSS classes (supports all Tailwind CSS classes)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"id"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Unique identifier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"style"})," (",(0,a.jsx)(n.code,{children:"dict"}),"): Inline CSS styles"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Basic container\ncontainer = Container(className="p-6")\n\n# Flexbox layout\nflex_container = Container(className="flex items-center justify-between")\n\n# Grid layout\ngrid_container = Container(className="grid grid-cols-3 gap-4")\n\n# Card-like container\ncard = Container(className="bg-white rounded-lg shadow-md p-6 m-4")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"text",children:"Text"}),"\n",(0,a.jsx)(n.p,{children:"Displays text content with styling support."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall import Text\n\ntext = Text(\n    "Hello World",\n    className="text-xl font-bold text-blue-600",\n    id="greeting"\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'Text(content, className="", id="", style={})\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"content"})," (",(0,a.jsx)(n.code,{children:"str"}),"): The text content to display"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"className"})," (",(0,a.jsx)(n.code,{children:"str"}),"): CSS classes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"id"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Unique identifier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"style"})," (",(0,a.jsx)(n.code,{children:"dict"}),"): Inline CSS styles"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-examples-1",children:"Usage Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Basic text\ntitle = Text("Welcome to OneForAll", className="text-2xl font-bold")\n\n# Styled text\nsubtitle = Text(\n    "Build desktop apps with Python",\n    className="text-lg text-gray-600 mb-4"\n)\n\n# Text with custom styling\ncustom_text = Text(\n    "Custom styled text",\n    style={"color": "#ff6b6b", "font-weight": "bold"}\n)\n\n# Multi-line text\ndescription = Text(\n    "This is a longer description that might span multiple lines.",\n    className="text-base leading-relaxed"\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"button",children:"Button"}),"\n",(0,a.jsx)(n.p,{children:"Interactive button component with click handling."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall import Button\n\nbutton = Button(\n    "Click Me",\n    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600",\n    onclick=handle_click\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"constructor-1",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'Button(text, className="", id="", onclick=None, disabled=False, style={})\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"text"})," (",(0,a.jsx)(n.code,{children:"str"}),"): The button text"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"className"})," (",(0,a.jsx)(n.code,{children:"str"}),"): CSS classes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"id"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Unique identifier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"onclick"})," (",(0,a.jsx)(n.code,{children:"callable"}),"): Click event handler function"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"disabled"})," (",(0,a.jsx)(n.code,{children:"bool"}),"): Whether the button is disabled"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"style"})," (",(0,a.jsx)(n.code,{children:"dict"}),"): Inline CSS styles"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-examples-2",children:"Usage Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Basic button\nsave_button = Button("Save", onclick=save_data)\n\n# Styled button\nprimary_button = Button(\n    "Get Started",\n    className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"\n)\n\n# Disabled button\ndisabled_button = Button(\n    "Loading...",\n    disabled=True,\n    className="px-4 py-2 bg-gray-300 text-gray-500 rounded cursor-not-allowed"\n)\n\n# Button with custom styling\ncustom_button = Button(\n    "Custom",\n    style={\n        "background": "linear-gradient(45deg, #ff6b6b, #4ecdc4)",\n        "border": "none",\n        "color": "white",\n        "padding": "12px 24px",\n        "border-radius": "25px"\n    }\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"image",children:"Image"}),"\n",(0,a.jsx)(n.p,{children:"Displays images with various sizing and styling options."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall import Image\n\nimage = Image(\n    src="path/to/image.jpg",\n    alt="Description",\n    className="w-32 h-32 object-cover rounded"\n)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"constructor-2",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'Image(src, alt="", className="", id="", width=None, height=None, style={})\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"src"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Image source path or URL"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"alt"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Alternative text for accessibility"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"className"})," (",(0,a.jsx)(n.code,{children:"str"}),"): CSS classes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"id"})," (",(0,a.jsx)(n.code,{children:"str"}),"): Unique identifier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"width"})," (",(0,a.jsx)(n.code,{children:"int"}),"): Image width in pixels"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"height"})," (",(0,a.jsx)(n.code,{children:"int"}),"): Image height in pixels"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"style"})," (",(0,a.jsx)(n.code,{children:"dict"}),"): Inline CSS styles"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"usage-examples-3",children:"Usage Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Basic image\nlogo = Image(\n    src="assets/logo.png",\n    alt="Company Logo",\n    className="w-24 h-24"\n)\n\n# Responsive image\nhero_image = Image(\n    src="assets/hero.jpg",\n    alt="Hero Image",\n    className="w-full h-64 object-cover"\n)\n\n# Fixed size image\navatar = Image(\n    src="assets/avatar.jpg",\n    alt="User Avatar",\n    width=50,\n    height=50,\n    className="rounded-full"\n)\n\n# Image with custom styling\nstyled_image = Image(\n    src="assets/photo.jpg",\n    alt="Photo",\n    style={\n        "border": "3px solid #ddd",\n        "border-radius": "10px",\n        "box-shadow": "0 4px 8px rgba(0,0,0,0.1)"\n    }\n)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"component-composition",children:"Component Composition"}),"\n",(0,a.jsx)(n.h3,{id:"building-complex-components",children:"Building Complex Components"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall import Container, Text, Button, Image\n\ndef create_user_card(user_data):\n    """Create a user card component"""\n    card = Container(className="bg-white rounded-lg shadow-md p-6 m-4 max-w-sm")\n    \n    # Header with avatar and name\n    header = Container(className="flex items-center mb-4")\n    \n    avatar = Image(\n        src=user_data.get("avatar", "assets/default-avatar.png"),\n        alt=f"{user_data[\'name\']} Avatar",\n        className="w-12 h-12 rounded-full mr-4"\n    )\n    \n    name_container = Container(className="flex-1")\n    name = Text(user_data["name"], className="text-lg font-semibold")\n    role = Text(user_data["role"], className="text-sm text-gray-600")\n    \n    name_container.add(name)\n    name_container.add(role)\n    \n    header.add(avatar)\n    header.add(name_container)\n    \n    # Content\n    if user_data.get("bio"):\n        bio = Text(user_data["bio"], className="text-gray-700 mb-4")\n        card.add(bio)\n    \n    # Actions\n    actions = Container(className="flex space-x-2")\n    \n    view_button = Button(\n        "View Profile",\n        className="flex-1 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600",\n        onclick=lambda: view_profile(user_data["id"])\n    )\n    \n    message_button = Button(\n        "Message",\n        className="flex-1 px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300",\n        onclick=lambda: send_message(user_data["id"])\n    )\n    \n    actions.add(view_button)\n    actions.add(message_button)\n    \n    # Assemble card\n    card.add(header)\n    card.add(actions)\n    \n    return card\n\n# Usage\nuser = {\n    "id": 1,\n    "name": "John Doe",\n    "role": "Software Developer",\n    "bio": "Passionate about building great software with Python.",\n    "avatar": "assets/john-avatar.jpg"\n}\n\nuser_card = create_user_card(user)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"component-factory-pattern",children:"Component Factory Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class ComponentFactory:\n    """Factory for creating common component patterns"""\n    \n    @staticmethod\n    def create_form_field(label, input_type="text", placeholder="", required=False):\n        """Create a form field with label and input"""\n        field = Container(className="mb-4")\n        \n        # Label\n        label_text = label\n        if required:\n            label_text += " *"\n        \n        field_label = Text(\n            label_text,\n            className="block text-sm font-medium text-gray-700 mb-1"\n        )\n        \n        # Input (simulated with styled container for now)\n        input_field = Container(\n            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"\n        )\n        \n        if placeholder:\n            input_field.add(Text(placeholder, className="text-gray-400"))\n        \n        field.add(field_label)\n        field.add(input_field)\n        \n        return field\n    \n    @staticmethod\n    def create_alert(message, alert_type="info"):\n        """Create an alert component"""\n        type_classes = {\n            "info": "bg-blue-100 border-blue-500 text-blue-700",\n            "success": "bg-green-100 border-green-500 text-green-700",\n            "warning": "bg-yellow-100 border-yellow-500 text-yellow-700",\n            "error": "bg-red-100 border-red-500 text-red-700"\n        }\n        \n        alert = Container(\n            className=f"border-l-4 p-4 mb-4 {type_classes.get(alert_type, type_classes[\'info\'])}"\n        )\n        \n        alert.add(Text(message, className="font-medium"))\n        \n        return alert\n    \n    @staticmethod\n    def create_loading_spinner():\n        """Create a loading spinner component"""\n        spinner = Container(\n            className="flex items-center justify-center p-4"\n        )\n        \n        # Animated spinner (CSS animation would be handled by Tailwind)\n        spinner_element = Container(\n            className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"\n        )\n        \n        spinner.add(spinner_element)\n        spinner.add(Text("Loading...", className="ml-2 text-gray-600"))\n        \n        return spinner\n    \n    @staticmethod\n    def create_modal(title, content, on_close=None):\n        """Create a modal dialog component"""\n        # Backdrop\n        modal = Container(\n            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"\n        )\n        \n        # Modal content\n        modal_content = Container(\n            className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4"\n        )\n        \n        # Header\n        header = Container(\n            className="flex items-center justify-between p-6 border-b"\n        )\n        \n        title_text = Text(title, className="text-lg font-semibold")\n        close_button = Button(\n            "\xd7",\n            className="text-gray-400 hover:text-gray-600 text-2xl font-bold",\n            onclick=on_close\n        )\n        \n        header.add(title_text)\n        header.add(close_button)\n        \n        # Body\n        body = Container(className="p-6")\n        if isinstance(content, str):\n            body.add(Text(content))\n        else:\n            body.add(content)\n        \n        modal_content.add(header)\n        modal_content.add(body)\n        modal.add(modal_content)\n        \n        return modal\n\n# Usage examples\nname_field = ComponentFactory.create_form_field("Full Name", required=True)\nsuccess_alert = ComponentFactory.create_alert("Data saved successfully!", "success")\nloading = ComponentFactory.create_loading_spinner()\nmodal = ComponentFactory.create_modal("Confirm Action", "Are you sure you want to proceed?")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"custom-components",children:"Custom Components"}),"\n",(0,a.jsx)(n.h3,{id:"creating-custom-components",children:"Creating Custom Components"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall.components import Component\n\nclass ProgressBar(Component):\n    """Custom progress bar component"""\n    \n    def __init__(self, value=0, max_value=100, className="", **props):\n        super().__init__(className=className, **props)\n        self.value = value\n        self.max_value = max_value\n    \n    def render(self):\n        percentage = (self.value / self.max_value) * 100\n        \n        return f\'\'\'\n        <div class="w-full bg-gray-200 rounded-full h-4 {self.className}">\n            <div class="bg-blue-500 h-4 rounded-full transition-all duration-300" \n                 style="width: {percentage}%"></div>\n        </div>\n        \'\'\'\n    \n    def set_value(self, value):\n        """Update the progress value"""\n        self.value = max(0, min(value, self.max_value))\n\nclass CounterWidget(Component):\n    """Custom counter widget with increment/decrement buttons"""\n    \n    def __init__(self, initial_value=0, min_value=None, max_value=None, **props):\n        super().__init__(**props)\n        self.value = initial_value\n        self.min_value = min_value\n        self.max_value = max_value\n        self.setup_ui()\n    \n    def setup_ui(self):\n        """Setup the counter UI"""\n        self.container = Container(className="flex items-center space-x-2")\n        \n        # Decrement button\n        self.decrement_btn = Button(\n            "-",\n            className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300",\n            onclick=self.decrement\n        )\n        \n        # Value display\n        self.value_display = Text(\n            str(self.value),\n            className="px-4 py-1 bg-gray-100 rounded min-w-12 text-center"\n        )\n        \n        # Increment button\n        self.increment_btn = Button(\n            "+",\n            className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300",\n            onclick=self.increment\n        )\n        \n        self.container.add(self.decrement_btn)\n        self.container.add(self.value_display)\n        self.container.add(self.increment_btn)\n        \n        self.add(self.container)\n    \n    def increment(self):\n        """Increment the counter value"""\n        if self.max_value is None or self.value < self.max_value:\n            self.value += 1\n            self.update_display()\n    \n    def decrement(self):\n        """Decrement the counter value"""\n        if self.min_value is None or self.value > self.min_value:\n            self.value -= 1\n            self.update_display()\n    \n    def update_display(self):\n        """Update the value display"""\n        self.value_display.content = str(self.value)\n    \n    def render(self):\n        return self.container.render()\n\n# Usage\nprogress = ProgressBar(value=75, className="mb-4")\ncounter = CounterWidget(initial_value=5, min_value=0, max_value=10)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"component-with-state-integration",children:"Component with State Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\nfrom oneforall.components import Component\n\nclass TodoItem(Component):\n    """Todo item component with state integration"""\n    \n    def __init__(self, todo_id, app_state, **props):\n        super().__init__(**props)\n        self.todo_id = todo_id\n        self.app_state = app_state\n        self.setup_ui()\n    \n    def setup_ui(self):\n        """Setup the todo item UI"""\n        todo = self.app_state.get(f"todos.{self.todo_id}")\n        \n        self.container = Container(\n            className="flex items-center justify-between p-3 border-b hover:bg-gray-50"\n        )\n        \n        # Left side - checkbox and text\n        left_side = Container(className="flex items-center space-x-3")\n        \n        # Checkbox (simulated with button)\n        checkbox = Button(\n            "\u2713" if todo.get("completed") else "\u25cb",\n            className=f"w-6 h-6 rounded border text-sm {\n                \'bg-green-500 text-white\' if todo.get(\'completed\') \n                else \'bg-white border-gray-300\'\n            }",\n            onclick=self.toggle_completed\n        )\n        \n        # Todo text\n        text_class = "text-gray-500 line-through" if todo.get("completed") else "text-gray-900"\n        todo_text = Text(todo.get("text", ""), className=text_class)\n        \n        left_side.add(checkbox)\n        left_side.add(todo_text)\n        \n        # Right side - delete button\n        delete_btn = Button(\n            "\ud83d\uddd1",\n            className="text-red-500 hover:text-red-700 px-2 py-1",\n            onclick=self.delete_todo\n        )\n        \n        self.container.add(left_side)\n        self.container.add(delete_btn)\n        \n        self.add(self.container)\n    \n    def toggle_completed(self):\n        """Toggle the completed state of the todo"""\n        current_state = self.app_state.get(f"todos.{self.todo_id}.completed", False)\n        self.app_state.set(f"todos.{self.todo_id}.completed", not current_state)\n    \n    def delete_todo(self):\n        """Delete the todo item"""\n        todos = self.app_state.get("todos", {})\n        if self.todo_id in todos:\n            del todos[self.todo_id]\n            self.app_state.set("todos", todos)\n    \n    def render(self):\n        return self.container.render()\n\n# Usage in an app\nclass TodoApp:\n    def __init__(self):\n        self.app = App()\n        self.window = self.app.create_window("Todo App", (500, 600))\n        self.setup_ui()\n    \n    def setup_ui(self):\n        container = Container(className="p-6")\n        \n        # Title\n        container.add(Text("My Todos", className="text-2xl font-bold mb-6"))\n        \n        # Todo list\n        self.todo_list = Container(className="space-y-2")\n        self.update_todo_list()\n        container.add(self.todo_list)\n        \n        self.window.add_child(container)\n    \n    def update_todo_list(self):\n        """Update the todo list display"""\n        self.todo_list.children.clear()\n        \n        todos = self.app.state.get("todos", {})\n        for todo_id in todos:\n            todo_item = TodoItem(todo_id, self.app.state)\n            self.todo_list.add(todo_item)\n    \n    def run(self):\n        # Initialize with some sample todos\n        self.app.state.set("todos", {\n            "1": {"text": "Learn OneForAll", "completed": False},\n            "2": {"text": "Build an app", "completed": False},\n            "3": {"text": "Deploy to production", "completed": False}\n        })\n        \n        self.app.run()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"component-lifecycle",children:"Component Lifecycle"}),"\n",(0,a.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class MyComponent(Component):\n    def __init__(self, **props):\n        super().__init__(**props)\n        # Component initialization\n        self.setup_initial_state()\n        self.setup_ui()\n    \n    def setup_initial_state(self):\n        """Initialize component state"""\n        self.internal_state = {}\n    \n    def setup_ui(self):\n        """Setup the component UI"""\n        # Build component structure\n        pass\n'})}),"\n",(0,a.jsx)(n.h3,{id:"rendering",children:"Rendering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class MyComponent(Component):\n    def render(self):\n        """Render the component to HTML"""\n        # Custom rendering logic\n        return f\'<div class="{self.className}">{self.children_html()}</div>\'\n'})}),"\n",(0,a.jsx)(n.h3,{id:"updates-and-re-rendering",children:"Updates and Re-rendering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class DynamicComponent(Component):\n    def __init__(self, **props):\n        super().__init__(**props)\n        self.data = []\n        self.setup_ui()\n    \n    def update_data(self, new_data):\n        """Update component data and re-render"""\n        self.data = new_data\n        self.refresh_ui()\n    \n    def refresh_ui(self):\n        """Refresh the component UI"""\n        # Clear existing children\n        self.children.clear()\n        \n        # Rebuild UI with new data\n        self.setup_ui()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"component-organization",children:"Component Organization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# \u2705 Good: Organize components by functionality\nclass UserInterface:\n    @staticmethod\n    def create_header(title):\n        header = Container(className="bg-blue-500 text-white p-4")\n        header.add(Text(title, className="text-xl font-bold"))\n        return header\n    \n    @staticmethod\n    def create_sidebar():\n        sidebar = Container(className="w-64 bg-gray-100 p-4")\n        # Add sidebar content\n        return sidebar\n    \n    @staticmethod\n    def create_main_content():\n        content = Container(className="flex-1 p-6")\n        # Add main content\n        return content\n\n# \u2705 Good: Use composition over inheritance\ndef create_dashboard():\n    dashboard = Container(className="flex h-screen")\n    \n    sidebar = UserInterface.create_sidebar()\n    main_area = Container(className="flex-1 flex flex-col")\n    \n    header = UserInterface.create_header("Dashboard")\n    content = UserInterface.create_main_content()\n    \n    main_area.add(header)\n    main_area.add(content)\n    \n    dashboard.add(sidebar)\n    dashboard.add(main_area)\n    \n    return dashboard\n'})}),"\n",(0,a.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# \u2705 Good: Minimize re-renders\nclass OptimizedList(Component):\n    def __init__(self, items, **props):\n        super().__init__(**props)\n        self.items = items\n        self.rendered_items = {}\n        self.setup_ui()\n    \n    def update_items(self, new_items):\n        """Update items efficiently"""\n        # Only re-render changed items\n        for item in new_items:\n            if item.id not in self.rendered_items or item != self.rendered_items[item.id]:\n                self.rendered_items[item.id] = item\n                # Re-render only this item\n                self.update_item_display(item)\n    \n    def update_item_display(self, item):\n        """Update a specific item display"""\n        # Efficient item update logic\n        pass\n\n# \u2705 Good: Use lazy loading for large datasets\nclass LazyLoadList(Component):\n    def __init__(self, data_source, page_size=20, **props):\n        super().__init__(**props)\n        self.data_source = data_source\n        self.page_size = page_size\n        self.current_page = 0\n        self.loaded_items = []\n        self.load_initial_data()\n    \n    def load_initial_data(self):\n        """Load initial page of data"""\n        self.loaded_items = self.data_source.get_page(0, self.page_size)\n        self.setup_ui()\n    \n    def load_more(self):\n        """Load more data"""\n        self.current_page += 1\n        new_items = self.data_source.get_page(self.current_page, self.page_size)\n        self.loaded_items.extend(new_items)\n        self.add_items_to_ui(new_items)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class RobustComponent(Component):\n    def __init__(self, **props):\n        super().__init__(**props)\n        self.error_state = None\n        try:\n            self.setup_ui()\n        except Exception as e:\n            self.handle_error(e)\n    \n    def handle_error(self, error):\n        """Handle component errors gracefully"""\n        self.error_state = str(error)\n        self.show_error_ui()\n    \n    def show_error_ui(self):\n        """Show error state UI"""\n        error_container = Container(className="p-4 bg-red-100 border border-red-400 rounded")\n        error_container.add(Text("Error loading component", className="text-red-700 font-bold"))\n        error_container.add(Text(self.error_state, className="text-red-600 text-sm"))\n        \n        retry_button = Button(\n            "Retry",\n            className="mt-2 px-4 py-2 bg-red-500 text-white rounded",\n            onclick=self.retry_setup\n        )\n        error_container.add(retry_button)\n        \n        self.add(error_container)\n    \n    def retry_setup(self):\n        """Retry component setup"""\n        self.children.clear()\n        self.error_state = None\n        try:\n            self.setup_ui()\n        except Exception as e:\n            self.handle_error(e)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"related-apis",children:"Related APIs"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./app",children:"App API"})," - Application management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./window",children:"Window API"})," - Window management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./state-management",children:"State Management API"})," - Reactive state handling"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"../tutorial-basics/components",children:"Components Tutorial"})," for comprehensive examples and usage patterns."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"The Components API provides a powerful foundation for building rich, interactive desktop applications with OneForAll's reactive architecture."})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);
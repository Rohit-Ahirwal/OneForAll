"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[187],{1197:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6363);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},2449:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorial-basics/creating-layouts","title":"Creating Layouts","description":"Learn how to create beautiful, responsive layouts in OneForAll using Container components and Tailwind CSS. This guide covers everything from basic layouts to complex application structures.","source":"@site/docs/tutorial-basics/creating-layouts.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/creating-layouts","permalink":"/OneForAll/docs/next/tutorial-basics/creating-layouts","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/tutorial-basics/creating-layouts.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"State Management","permalink":"/OneForAll/docs/next/tutorial-basics/state-management"},"next":{"title":"Styling with Tailwind CSS","permalink":"/OneForAll/docs/next/tutorial-basics/styling"}}');var r=a(7259),s=a(1197);const o={sidebar_position:4},i="Creating Layouts",l={},d=[{value:"Layout Fundamentals",id:"layout-fundamentals",level:2},{value:"Container Component",id:"container-component",level:3},{value:"Flexbox Layouts",id:"flexbox-layouts",level:3},{value:"Basic Flex Container",id:"basic-flex-container",level:4},{value:"Flex Alignment",id:"flex-alignment",level:4},{value:"Common Layout Patterns",id:"common-layout-patterns",level:2},{value:"Application Shell",id:"application-shell",level:3},{value:"Card Layout",id:"card-layout",level:3},{value:"Dashboard Layout",id:"dashboard-layout",level:3},{value:"Form Layout",id:"form-layout",level:3},{value:"Responsive Design",id:"responsive-design",level:2},{value:"Breakpoint Classes",id:"breakpoint-classes",level:3},{value:"Mobile-First Layout",id:"mobile-first-layout",level:3},{value:"Advanced Layout Techniques",id:"advanced-layout-techniques",level:2},{value:"Sticky Elements",id:"sticky-elements",level:3},{value:"Overlay and Modal Patterns",id:"overlay-and-modal-patterns",level:3},{value:"Split Panes",id:"split-panes",level:3},{value:"Layout Best Practices",id:"layout-best-practices",level:2},{value:"Consistent Spacing",id:"consistent-spacing",level:3},{value:"Semantic Layout Structure",id:"semantic-layout-structure",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"creating-layouts",children:"Creating Layouts"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to create beautiful, responsive layouts in OneForAll using Container components and Tailwind CSS. This guide covers everything from basic layouts to complex application structures."}),"\n",(0,r.jsx)(n.admonition,{title:"Alpha Version",type:"info",children:(0,r.jsxs)(n.p,{children:["Layout capabilities are fully functional in OneForAll ",(0,r.jsx)(n.strong,{children:"alpha"})," (v0.1.0a3). Tailwind CSS integration provides extensive layout options."]})}),"\n",(0,r.jsx)(n.h2,{id:"layout-fundamentals",children:"Layout Fundamentals"}),"\n",(0,r.jsx)(n.h3,{id:"container-component",children:"Container Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Container"})," component is your primary tool for creating layouts. It acts as a wrapper that can hold other components and apply layout styles."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from oneforall import Container, Text, Button\n\n# Basic container\nmain_container = Container(className="p-4")\nmain_container.add(Text("Hello World"))\nmain_container.add(Button("Click Me"))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"flexbox-layouts",children:"Flexbox Layouts"}),"\n",(0,r.jsx)(n.p,{children:"Flexbox is the most versatile layout system in OneForAll, powered by Tailwind CSS."}),"\n",(0,r.jsx)(n.h4,{id:"basic-flex-container",children:"Basic Flex Container"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Horizontal layout (default)\nhorizontal_container = Container(className="flex space-x-4")\nhorizontal_container.add(Button("Button 1"))\nhorizontal_container.add(Button("Button 2"))\nhorizontal_container.add(Button("Button 3"))\n\n# Vertical layout\nvertical_container = Container(className="flex flex-col space-y-4")\nvertical_container.add(Text("Item 1"))\nvertical_container.add(Text("Item 2"))\nvertical_container.add(Text("Item 3"))\n'})}),"\n",(0,r.jsx)(n.h4,{id:"flex-alignment",children:"Flex Alignment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Center items horizontally and vertically\ncentered_container = Container(className="flex items-center justify-center min-h-screen")\ncentered_container.add(Text("Perfectly Centered", className="text-2xl"))\n\n# Distribute items evenly\ndistributed_container = Container(className="flex justify-between items-center p-4")\ndistributed_container.add(Text("Left"))\ndistributed_container.add(Text("Center"))\ndistributed_container.add(Text("Right"))\n\n# Align items to different positions\nheader_container = Container(className="flex justify-between items-center p-4 bg-gray-100")\nheader_container.add(Text("Logo", className="font-bold"))\nheader_container.add(Button("Login", className="px-4 py-2 bg-blue-500 text-white rounded"))\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-layout-patterns",children:"Common Layout Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"application-shell",children:"Application Shell"}),"\n",(0,r.jsx)(n.p,{children:"Create a typical application layout with header, sidebar, and main content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\napp = App()\nwindow = app.create_window(title="App Layout", size=(1000, 700))\n\n# Main application container\napp_container = Container(className="flex flex-col min-h-screen bg-gray-50")\n\n# Header\nheader = Container(className="bg-white shadow-sm border-b border-gray-200 p-4")\nheader_content = Container(className="flex justify-between items-center max-w-7xl mx-auto")\nheader_content.add(Text("My Application", className="text-xl font-bold text-gray-800"))\n\n# Navigation buttons\nnav_container = Container(className="flex space-x-4")\nnav_container.add(Button("Home", className="px-3 py-2 text-gray-600 hover:text-gray-800"))\nnav_container.add(Button("About", className="px-3 py-2 text-gray-600 hover:text-gray-800"))\nnav_container.add(Button("Contact", className="px-3 py-2 text-gray-600 hover:text-gray-800"))\n\nheader_content.add(nav_container)\nheader.add(header_content)\n\n# Main content area with sidebar\nmain_area = Container(className="flex flex-1")\n\n# Sidebar\nsidebar = Container(className="w-64 bg-white border-r border-gray-200 p-6")\nsidebar.add(Text("Navigation", className="text-lg font-semibold mb-4"))\nsidebar.add(Button("Dashboard", className="w-full text-left p-2 hover:bg-gray-100 rounded mb-2"))\nsidebar.add(Button("Settings", className="w-full text-left p-2 hover:bg-gray-100 rounded mb-2"))\nsidebar.add(Button("Profile", className="w-full text-left p-2 hover:bg-gray-100 rounded mb-2"))\n\n# Main content\ncontent = Container(className="flex-1 p-6")\ncontent.add(Text("Main Content Area", className="text-2xl font-bold mb-4"))\ncontent.add(Text("This is where your main application content goes.", className="text-gray-600"))\n\n# Assemble layout\nmain_area.add(sidebar)\nmain_area.add(content)\napp_container.add(header)\napp_container.add(main_area)\n\nwindow.add_child(app_container)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"card-layout",children:"Card Layout"}),"\n",(0,r.jsx)(n.p,{children:"Create card-based layouts for displaying information:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def create_card(title, description, image_url=None, actions=None):\n    """Create a reusable card component"""\n    card = Container(className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow")\n    \n    # Card image (if provided)\n    if image_url:\n        from oneforall import Image\n        card.add(Image(\n            src=image_url, \n            alt=title,\n            className="w-full h-48 object-cover"\n        ))\n    \n    # Card content\n    content = Container(className="p-6")\n    content.add(Text(title, className="text-xl font-bold mb-2"))\n    content.add(Text(description, className="text-gray-600 mb-4"))\n    \n    # Card actions\n    if actions:\n        action_container = Container(className="flex space-x-2")\n        for action in actions:\n            action_container.add(action)\n        content.add(action_container)\n    \n    card.add(content)\n    return card\n\n# Create a grid of cards\ncards_container = Container(className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6")\n\n# Add multiple cards\nfor i in range(6):\n    card = create_card(\n        title=f"Card {i+1}",\n        description="This is a sample card with some description text.",\n        actions=[\n            Button("View", className="px-3 py-1 bg-blue-500 text-white rounded text-sm"),\n            Button("Edit", className="px-3 py-1 bg-gray-200 text-gray-700 rounded text-sm")\n        ]\n    )\n    cards_container.add(card)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dashboard-layout",children:"Dashboard Layout"}),"\n",(0,r.jsx)(n.p,{children:"Create a dashboard with metrics and charts:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Dashboard container\ndashboard = Container(className="p-6 bg-gray-50 min-h-screen")\n\n# Dashboard header\ndashboard_header = Container(className="mb-8")\ndashboard_header.add(Text("Dashboard", className="text-3xl font-bold text-gray-800 mb-2"))\ndashboard_header.add(Text("Welcome back! Here\'s what\'s happening.", className="text-gray-600"))\n\n# Metrics row\nmetrics_row = Container(className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8")\n\ndef create_metric_card(title, value, change, color="blue"):\n    """Create a metric card"""\n    card = Container(className="bg-white rounded-lg shadow p-6")\n    card.add(Text(title, className="text-sm font-medium text-gray-600 mb-2"))\n    card.add(Text(value, className="text-3xl font-bold text-gray-800 mb-1"))\n    card.add(Text(\n        change, \n        className=f"text-sm font-medium text-{color}-600"\n    ))\n    return card\n\n# Add metric cards\nmetrics_row.add(create_metric_card("Total Users", "12,345", "+12% from last month", "green"))\nmetrics_row.add(create_metric_card("Revenue", "$45,678", "+8% from last month", "green"))\nmetrics_row.add(create_metric_card("Orders", "1,234", "-3% from last month", "red"))\nmetrics_row.add(create_metric_card("Conversion", "3.2%", "+0.5% from last month", "green"))\n\n# Charts row\ncharts_row = Container(className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8")\n\n# Chart placeholders\nchart1 = Container(className="bg-white rounded-lg shadow p-6")\nchart1.add(Text("Sales Overview", className="text-lg font-semibold mb-4"))\nchart1.add(Container(className="h-64 bg-gray-100 rounded flex items-center justify-center"))\nchart1.children[-1].add(Text("Chart Placeholder", className="text-gray-500"))\n\nchart2 = Container(className="bg-white rounded-lg shadow p-6")\nchart2.add(Text("User Activity", className="text-lg font-semibold mb-4"))\nchart2.add(Container(className="h-64 bg-gray-100 rounded flex items-center justify-center"))\nchart2.children[-1].add(Text("Chart Placeholder", className="text-gray-500"))\n\ncharts_row.add(chart1)\ncharts_row.add(chart2)\n\n# Recent activity\nactivity_section = Container(className="bg-white rounded-lg shadow p-6")\nactivity_section.add(Text("Recent Activity", className="text-lg font-semibold mb-4"))\n\nactivity_list = Container(className="space-y-3")\nactivities = [\n    "User John Doe registered",\n    "New order #1234 received",\n    "Payment processed for order #1233",\n    "User Jane Smith updated profile"\n]\n\nfor activity in activities:\n    activity_item = Container(className="flex items-center space-x-3 p-3 bg-gray-50 rounded")\n    activity_item.add(Container(className="w-2 h-2 bg-blue-500 rounded-full"))\n    activity_item.add(Text(activity, className="text-gray-700"))\n    activity_list.add(activity_item)\n\nactivity_section.add(activity_list)\n\n# Assemble dashboard\ndashboard.add(dashboard_header)\ndashboard.add(metrics_row)\ndashboard.add(charts_row)\ndashboard.add(activity_section)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"form-layout",children:"Form Layout"}),"\n",(0,r.jsx)(n.p,{children:"Create well-structured forms:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def create_form():\n    """Create a user registration form"""\n    form_container = Container(className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-8")\n    \n    # Form header\n    form_container.add(Text("Create Account", className="text-2xl font-bold text-center mb-6"))\n    \n    # Form fields\n    fields_container = Container(className="space-y-4")\n    \n    # Name field\n    name_field = Container(className="")\n    name_field.add(Text("Full Name", className="block text-sm font-medium text-gray-700 mb-1"))\n    # Note: In a real app, you\'d use an Input component here\n    name_field.add(Container(className="w-full p-3 border border-gray-300 rounded-md bg-gray-50"))\n    name_field.children[-1].add(Text("Input placeholder", className="text-gray-400"))\n    \n    # Email field\n    email_field = Container(className="")\n    email_field.add(Text("Email Address", className="block text-sm font-medium text-gray-700 mb-1"))\n    email_field.add(Container(className="w-full p-3 border border-gray-300 rounded-md bg-gray-50"))\n    email_field.children[-1].add(Text("Input placeholder", className="text-gray-400"))\n    \n    # Password field\n    password_field = Container(className="")\n    password_field.add(Text("Password", className="block text-sm font-medium text-gray-700 mb-1"))\n    password_field.add(Container(className="w-full p-3 border border-gray-300 rounded-md bg-gray-50"))\n    password_field.children[-1].add(Text("Input placeholder", className="text-gray-400"))\n    \n    fields_container.add(name_field)\n    fields_container.add(email_field)\n    fields_container.add(password_field)\n    \n    # Form actions\n    actions_container = Container(className="flex space-x-4 mt-6")\n    actions_container.add(Button(\n        "Create Account", \n        className="flex-1 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 font-medium"\n    ))\n    actions_container.add(Button(\n        "Cancel", \n        className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 font-medium"\n    ))\n    \n    form_container.add(fields_container)\n    form_container.add(actions_container)\n    \n    return form_container\n\n# Use the form\nregistration_form = create_form()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"responsive-design",children:"Responsive Design"}),"\n",(0,r.jsx)(n.h3,{id:"breakpoint-classes",children:"Breakpoint Classes"}),"\n",(0,r.jsx)(n.p,{children:"Use Tailwind's responsive classes for different screen sizes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Responsive grid\nresponsive_grid = Container(className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4")\n\n# Responsive padding\nresponsive_container = Container(className="p-4 sm:p-6 lg:p-8")\n\n# Responsive text sizes\nresponsive_title = Text("Responsive Title", className="text-xl sm:text-2xl lg:text-3xl font-bold")\n\n# Hide/show on different screens\nmobile_only = Container(className="block sm:hidden")\ndesktop_only = Container(className="hidden lg:block")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mobile-first-layout",children:"Mobile-First Layout"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def create_mobile_first_layout():\n    """Create a layout that works well on mobile and scales up"""\n    \n    # Main container with mobile-first approach\n    main = Container(className="min-h-screen bg-gray-50")\n    \n    # Header - stacks on mobile, horizontal on desktop\n    header = Container(className="bg-white shadow-sm p-4")\n    header_content = Container(className="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0")\n    \n    # Logo/title\n    header_content.add(Text("Mobile App", className="text-xl font-bold"))\n    \n    # Navigation - vertical on mobile, horizontal on desktop\n    nav = Container(className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4")\n    nav.add(Button("Home", className="text-left sm:text-center px-3 py-2"))\n    nav.add(Button("About", className="text-left sm:text-center px-3 py-2"))\n    nav.add(Button("Contact", className="text-left sm:text-center px-3 py-2"))\n    \n    header_content.add(nav)\n    header.add(header_content)\n    \n    # Content area - full width on mobile, centered with max width on desktop\n    content = Container(className="p-4 sm:p-6 lg:p-8")\n    content_inner = Container(className="max-w-4xl mx-auto")\n    \n    # Cards - single column on mobile, multiple on larger screens\n    cards_grid = Container(className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6")\n    \n    for i in range(6):\n        card = Container(className="bg-white rounded-lg shadow p-4 sm:p-6")\n        card.add(Text(f"Card {i+1}", className="text-lg font-semibold mb-2"))\n        card.add(Text("Mobile-friendly card content.", className="text-gray-600 text-sm sm:text-base"))\n        cards_grid.add(card)\n    \n    content_inner.add(cards_grid)\n    content.add(content_inner)\n    \n    main.add(header)\n    main.add(content)\n    \n    return main\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-layout-techniques",children:"Advanced Layout Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"sticky-elements",children:"Sticky Elements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Sticky header\nsticky_header = Container(className="sticky top-0 bg-white shadow-sm z-10 p-4")\nsticky_header.add(Text("Sticky Header", className="font-bold"))\n\n# Sticky sidebar\nlayout_with_sticky = Container(className="flex")\nsticky_sidebar = Container(className="w-64 sticky top-0 h-screen overflow-y-auto bg-gray-100 p-4")\nmain_content = Container(className="flex-1 p-4")\n\n# Long content to demonstrate scrolling\nfor i in range(50):\n    main_content.add(Text(f"Content item {i+1}", className="mb-4"))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"overlay-and-modal-patterns",children:"Overlay and Modal Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def create_modal_overlay():\n    """Create a modal overlay pattern"""\n    \n    # Overlay background\n    overlay = Container(className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50")\n    \n    # Modal content\n    modal = Container(className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6")\n    modal.add(Text("Modal Title", className="text-xl font-bold mb-4"))\n    modal.add(Text("This is modal content.", className="text-gray-600 mb-6"))\n    \n    # Modal actions\n    actions = Container(className="flex justify-end space-x-3")\n    actions.add(Button("Cancel", className="px-4 py-2 text-gray-600 hover:text-gray-800"))\n    actions.add(Button("Confirm", className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"))\n    \n    modal.add(actions)\n    overlay.add(modal)\n    \n    return overlay\n'})}),"\n",(0,r.jsx)(n.h3,{id:"split-panes",children:"Split Panes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def create_split_pane_layout():\n    """Create a resizable split pane layout"""\n    \n    split_container = Container(className="flex h-screen")\n    \n    # Left pane\n    left_pane = Container(className="w-1/3 bg-gray-100 border-r border-gray-300 p-4 overflow-y-auto")\n    left_pane.add(Text("Left Pane", className="font-bold mb-4"))\n    for i in range(20):\n        left_pane.add(Text(f"Item {i+1}", className="mb-2 p-2 hover:bg-gray-200 rounded"))\n    \n    # Right pane\n    right_pane = Container(className="flex-1 p-4 overflow-y-auto")\n    right_pane.add(Text("Right Pane", className="font-bold mb-4"))\n    right_pane.add(Text("Main content area with detailed information.", className="text-gray-600"))\n    \n    split_container.add(left_pane)\n    split_container.add(right_pane)\n    \n    return split_container\n'})}),"\n",(0,r.jsx)(n.h2,{id:"layout-best-practices",children:"Layout Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"consistent-spacing",children:"Consistent Spacing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u2705 Good: Use consistent spacing scale\nSPACING = {\n    'xs': 'space-y-1',\n    'sm': 'space-y-2', \n    'md': 'space-y-4',\n    'lg': 'space-y-6',\n    'xl': 'space-y-8'\n}\n\ncontainer = Container(className=f\"p-6 {SPACING['md']}\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"semantic-layout-structure",children:"Semantic Layout Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \u2705 Good: Clear layout hierarchy\napp_shell = Container(className="min-h-screen flex flex-col")\nheader = Container(className="bg-white shadow-sm")\nmain = Container(className="flex-1 flex")\nsidebar = Container(className="w-64 bg-gray-50")\ncontent = Container(className="flex-1 p-6")\nfooter = Container(className="bg-gray-800 text-white p-4")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \u2705 Good: Avoid deeply nested containers when possible\nefficient_layout = Container(className="grid grid-cols-3 gap-4")\n\n# \u274c Avoid: Unnecessary nesting\ninefficient_layout = Container(className="flex")\nwrapper = Container(className="flex-1")\ninner_wrapper = Container(className="w-full")\ncontent = Container(className="p-4")\n# ... too many levels\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand OneForAll layouts:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./styling",children:"Style with Tailwind"})," - Advanced styling techniques"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./multiple-windows",children:"Multiple Windows"})," - Layout across multiple windows"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../api/components",children:"API Reference"})," - Complete component documentation"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Master these layout patterns to create professional, responsive desktop applications with OneForAll!"})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);
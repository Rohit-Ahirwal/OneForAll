"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[236],{1197:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>d});var i=t(6363);const a={},o=i.createContext(a);function s(n){const e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(o.Provider,{value:e},n.children)}},4908:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>w,frontMatter:()=>s,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"tutorial-basics/multiple-windows","title":"Multiple Windows","description":"OneForAll supports creating applications with multiple windows, allowing you to build complex desktop applications with separate interfaces, dialogs, and tool windows. Learn how to create, manage, and coordinate multiple windows effectively.","source":"@site/versioned_docs/version-0.1.0.0a3/tutorial-basics/multiple-windows.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/multiple-windows","permalink":"/OneForAll/docs/tutorial-basics/multiple-windows","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/versioned_docs/version-0.1.0.0a3/tutorial-basics/multiple-windows.md","tags":[],"version":"0.1.0.0a3","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Styling with Tailwind CSS","permalink":"/OneForAll/docs/tutorial-basics/styling"},"next":{"title":"App API Reference","permalink":"/OneForAll/docs/api/app"}}');var a=t(7259),o=t(1197);const s={sidebar_position:6},d="Multiple Windows",l={},r=[{value:"Creating Multiple Windows",id:"creating-multiple-windows",level:2},{value:"Basic Multi-Window Setup",id:"basic-multi-window-setup",level:3},{value:"Window Configuration Options",id:"window-configuration-options",level:3},{value:"Window Communication",id:"window-communication",level:2},{value:"Shared State Between Windows",id:"shared-state-between-windows",level:3},{value:"Window Events and Callbacks",id:"window-events-and-callbacks",level:3},{value:"Common Multi-Window Patterns",id:"common-multi-window-patterns",level:2},{value:"Master-Detail Pattern",id:"master-detail-pattern",level:3},{value:"Floating Tool Windows",id:"floating-tool-windows",level:3},{value:"Window Management Best Practices",id:"window-management-best-practices",level:2},{value:"Window Lifecycle Management",id:"window-lifecycle-management",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Advanced Multi-Window Features",id:"advanced-multi-window-features",level:2},{value:"Window Docking Simulation",id:"window-docking-simulation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"multiple-windows",children:"Multiple Windows"})}),"\n",(0,a.jsx)(e.p,{children:"OneForAll supports creating applications with multiple windows, allowing you to build complex desktop applications with separate interfaces, dialogs, and tool windows. Learn how to create, manage, and coordinate multiple windows effectively."}),"\n",(0,a.jsx)(e.admonition,{title:"Alpha Version",type:"info",children:(0,a.jsxs)(e.p,{children:["Multiple window support is fully functional in OneForAll ",(0,a.jsx)(e.strong,{children:"alpha"})," (v0.1.0a3). Window management APIs are stable and ready for use."]})}),"\n",(0,a.jsx)(e.h2,{id:"creating-multiple-windows",children:"Creating Multiple Windows"}),"\n",(0,a.jsx)(e.h3,{id:"basic-multi-window-setup",children:"Basic Multi-Window Setup"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\napp = App()\n\n# Create main window\nmain_window = app.create_window(\n    title="Main Application",\n    size=(800, 600),\n    position=(100, 100)\n)\n\n# Create secondary window\nsettings_window = app.create_window(\n    title="Settings",\n    size=(400, 300),\n    position=(200, 200)\n)\n\n# Add content to main window\nmain_content = Container(className="p-6")\nmain_content.add(Text("Main Application Window", className="text-2xl font-bold mb-4"))\nmain_content.add(Button("Open Settings", className="px-4 py-2 bg-blue-500 text-white rounded"))\n\nmain_window.add_child(main_content)\n\n# Add content to settings window\nsettings_content = Container(className="p-6")\nsettings_content.add(Text("Settings Window", className="text-xl font-bold mb-4"))\nsettings_content.add(Text("Configure your application here.", className="text-gray-600"))\n\nsettings_window.add_child(settings_content)\n\n# Run the application\napp.run()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"window-configuration-options",children:"Window Configuration Options"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# Create windows with different configurations\nmain_window = app.create_window(\n    title="Main Window",\n    size=(1000, 700),\n    position=(100, 100),\n    resizable=True,\n    minimizable=True,\n    maximizable=True,\n    on_top=False\n)\n\n# Modal dialog window\ndialog_window = app.create_window(\n    title="Dialog",\n    size=(300, 200),\n    position=(400, 300),\n    resizable=False,\n    minimizable=False,\n    maximizable=False,\n    on_top=True  # Always on top\n)\n\n# Tool window\ntool_window = app.create_window(\n    title="Tools",\n    size=(250, 500),\n    position=(50, 100),\n    resizable=True,\n    minimizable=True,\n    maximizable=False\n)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"window-communication",children:"Window Communication"}),"\n",(0,a.jsx)(e.h3,{id:"shared-state-between-windows",children:"Shared State Between Windows"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\nclass MultiWindowApp:\n    def __init__(self):\n        self.app = App()\n        \n        # Shared application state\n        self.shared_state = {\n            \'user_name\': \'John Doe\',\n            \'theme\': \'light\',\n            \'settings\': {\n                \'notifications\': True,\n                \'auto_save\': True\n            }\n        }\n        \n        self.setup_windows()\n    \n    def setup_windows(self):\n        # Main window\n        self.main_window = self.app.create_window(\n            title="Main Application",\n            size=(800, 600)\n        )\n        \n        # Settings window\n        self.settings_window = self.app.create_window(\n            title="Settings",\n            size=(400, 500)\n        )\n        \n        # Profile window\n        self.profile_window = self.app.create_window(\n            title="User Profile",\n            size=(350, 400)\n        )\n        \n        self.build_main_window()\n        self.build_settings_window()\n        self.build_profile_window()\n    \n    def build_main_window(self):\n        """Build the main application window"""\n        container = Container(className="p-6")\n        \n        # Header with user info\n        header = Container(className="flex justify-between items-center mb-6 pb-4 border-b")\n        header.add(Text(f"Welcome, {self.shared_state[\'user_name\']}", className="text-xl font-bold"))\n        \n        # Window controls\n        controls = Container(className="flex space-x-2")\n        controls.add(Button("Settings", className="px-3 py-1 bg-gray-200 rounded text-sm"))\n        controls.add(Button("Profile", className="px-3 py-1 bg-blue-500 text-white rounded text-sm"))\n        \n        header.add(controls)\n        \n        # Main content\n        content = Container(className="space-y-4")\n        content.add(Text("Main Application Content", className="text-lg font-semibold"))\n        content.add(Text(f"Current theme: {self.shared_state[\'theme\']}", className="text-gray-600"))\n        content.add(Text(f"Notifications: {\'On\' if self.shared_state[\'settings\'][\'notifications\'] else \'Off\'}", className="text-gray-600"))\n        \n        container.add(header)\n        container.add(content)\n        self.main_window.add_child(container)\n    \n    def build_settings_window(self):\n        """Build the settings window"""\n        container = Container(className="p-6")\n        \n        container.add(Text("Application Settings", className="text-xl font-bold mb-6"))\n        \n        # Theme setting\n        theme_section = Container(className="mb-6")\n        theme_section.add(Text("Theme", className="font-semibold mb-2"))\n        \n        theme_buttons = Container(className="flex space-x-2")\n        theme_buttons.add(Button("Light", className="px-3 py-1 bg-white border rounded text-sm"))\n        theme_buttons.add(Button("Dark", className="px-3 py-1 bg-gray-800 text-white rounded text-sm"))\n        \n        theme_section.add(theme_buttons)\n        \n        # Notification settings\n        notification_section = Container(className="mb-6")\n        notification_section.add(Text("Notifications", className="font-semibold mb-2"))\n        notification_section.add(Button("Toggle Notifications", className="px-3 py-1 bg-blue-500 text-white rounded text-sm"))\n        \n        # Auto-save settings\n        autosave_section = Container(className="mb-6")\n        autosave_section.add(Text("Auto Save", className="font-semibold mb-2"))\n        autosave_section.add(Button("Toggle Auto Save", className="px-3 py-1 bg-green-500 text-white rounded text-sm"))\n        \n        container.add(theme_section)\n        container.add(notification_section)\n        container.add(autosave_section)\n        \n        self.settings_window.add_child(container)\n    \n    def build_profile_window(self):\n        """Build the user profile window"""\n        container = Container(className="p-6")\n        \n        container.add(Text("User Profile", className="text-xl font-bold mb-6"))\n        \n        # Profile info\n        profile_info = Container(className="space-y-4")\n        profile_info.add(Text(f"Name: {self.shared_state[\'user_name\']}", className="text-gray-700"))\n        profile_info.add(Text("Email: john.doe@example.com", className="text-gray-700"))\n        profile_info.add(Text("Role: Administrator", className="text-gray-700"))\n        \n        # Profile actions\n        actions = Container(className="mt-6 space-y-2")\n        actions.add(Button("Edit Profile", className="w-full px-4 py-2 bg-blue-500 text-white rounded"))\n        actions.add(Button("Change Password", className="w-full px-4 py-2 bg-gray-200 rounded"))\n        actions.add(Button("Logout", className="w-full px-4 py-2 bg-red-500 text-white rounded"))\n        \n        container.add(profile_info)\n        container.add(actions)\n        \n        self.profile_window.add_child(container)\n    \n    def run(self):\n        self.app.run()\n\n# Usage\napp = MultiWindowApp()\napp.run()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"window-events-and-callbacks",children:"Window Events and Callbacks"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class WindowManager:\n    def __init__(self):\n        self.app = App()\n        self.windows = {}\n        self.setup_main_window()\n    \n    def setup_main_window(self):\n        """Setup the main window with controls for other windows"""\n        self.main_window = self.app.create_window(\n            title="Window Manager",\n            size=(600, 400)\n        )\n        \n        container = Container(className="p-6")\n        container.add(Text("Window Manager", className="text-2xl font-bold mb-6"))\n        \n        # Window controls\n        controls = Container(className="space-y-3")\n        \n        # Create window buttons\n        controls.add(Button(\n            "Open Dialog", \n            className="w-full px-4 py-2 bg-blue-500 text-white rounded",\n            onclick=self.open_dialog\n        ))\n        \n        controls.add(Button(\n            "Open Tool Window", \n            className="w-full px-4 py-2 bg-green-500 text-white rounded",\n            onclick=self.open_tool_window\n        ))\n        \n        controls.add(Button(\n            "Open About", \n            className="w-full px-4 py-2 bg-purple-500 text-white rounded",\n            onclick=self.open_about\n        ))\n        \n        # Window status\n        status = Container(className="mt-6 p-4 bg-gray-100 rounded")\n        status.add(Text("Active Windows:", className="font-semibold mb-2"))\n        \n        self.status_list = Container(className="space-y-1")\n        self.update_window_status()\n        status.add(self.status_list)\n        \n        container.add(controls)\n        container.add(status)\n        \n        self.main_window.add_child(container)\n    \n    def open_dialog(self):\n        """Open a modal dialog window"""\n        if \'dialog\' not in self.windows:\n            dialog = self.app.create_window(\n                title="Dialog",\n                size=(300, 200),\n                position=(350, 250),\n                resizable=False,\n                on_top=True\n            )\n            \n            content = Container(className="p-6 text-center")\n            content.add(Text("This is a dialog window", className="text-lg font-semibold mb-4"))\n            content.add(Button(\n                "Close", \n                className="px-4 py-2 bg-red-500 text-white rounded",\n                onclick=lambda: self.close_window(\'dialog\')\n            ))\n            \n            dialog.add_child(content)\n            self.windows[\'dialog\'] = dialog\n            self.update_window_status()\n    \n    def open_tool_window(self):\n        """Open a tool window"""\n        if \'tools\' not in self.windows:\n            tools = self.app.create_window(\n                title="Tools",\n                size=(200, 400),\n                position=(50, 100),\n                maximizable=False\n            )\n            \n            content = Container(className="p-4")\n            content.add(Text("Tool Palette", className="text-lg font-bold mb-4"))\n            \n            tools_list = Container(className="space-y-2")\n            tools_list.add(Button("Tool 1", className="w-full px-3 py-2 bg-gray-200 rounded text-sm"))\n            tools_list.add(Button("Tool 2", className="w-full px-3 py-2 bg-gray-200 rounded text-sm"))\n            tools_list.add(Button("Tool 3", className="w-full px-3 py-2 bg-gray-200 rounded text-sm"))\n            \n            content.add(tools_list)\n            tools.add_child(content)\n            \n            self.windows[\'tools\'] = tools\n            self.update_window_status()\n    \n    def open_about(self):\n        """Open an about window"""\n        if \'about\' not in self.windows:\n            about = self.app.create_window(\n                title="About",\n                size=(350, 250),\n                position=(300, 200),\n                resizable=False,\n                maximizable=False\n            )\n            \n            content = Container(className="p-6 text-center")\n            content.add(Text("OneForAll Application", className="text-xl font-bold mb-2"))\n            content.add(Text("Version 0.1.0a2 (Alpha)", className="text-gray-600 mb-4"))\n            content.add(Text("A Python GUI framework powered by pywebview", className="text-sm text-gray-500 mb-4"))\n            \n            content.add(Button(\n                "Close", \n                className="px-4 py-2 bg-blue-500 text-white rounded",\n                onclick=lambda: self.close_window(\'about\')\n            ))\n            \n            about.add_child(content)\n            self.windows[\'about\'] = about\n            self.update_window_status()\n    \n    def close_window(self, window_name):\n        """Close a specific window"""\n        if window_name in self.windows:\n            # In a real implementation, you would close the window here\n            del self.windows[window_name]\n            self.update_window_status()\n    \n    def update_window_status(self):\n        """Update the window status display"""\n        # Clear current status\n        self.status_list.children.clear()\n        \n        # Add main window\n        self.status_list.add(Text("\u2022 Main Window (active)", className="text-sm text-green-600"))\n        \n        # Add other windows\n        for window_name in self.windows:\n            self.status_list.add(Text(f"\u2022 {window_name.title()} Window", className="text-sm text-blue-600"))\n        \n        if not self.windows:\n            self.status_list.add(Text("No additional windows open", className="text-sm text-gray-500"))\n    \n    def run(self):\n        self.app.run()\n\n# Usage\nmanager = WindowManager()\nmanager.run()\n'})}),"\n",(0,a.jsx)(e.h2,{id:"common-multi-window-patterns",children:"Common Multi-Window Patterns"}),"\n",(0,a.jsx)(e.h3,{id:"master-detail-pattern",children:"Master-Detail Pattern"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class MasterDetailApp:\n    def __init__(self):\n        self.app = App()\n        self.selected_item = None\n        self.items = [\n            {"id": 1, "name": "Document 1", "content": "Content of document 1..."},\n            {"id": 2, "name": "Document 2", "content": "Content of document 2..."},\n            {"id": 3, "name": "Document 3", "content": "Content of document 3..."}\n        ]\n        \n        self.setup_windows()\n    \n    def setup_windows(self):\n        # Master window (list)\n        self.master_window = self.app.create_window(\n            title="Document List",\n            size=(300, 500),\n            position=(100, 100)\n        )\n        \n        # Detail window\n        self.detail_window = self.app.create_window(\n            title="Document Details",\n            size=(600, 500),\n            position=(450, 100)\n        )\n        \n        self.build_master_window()\n        self.build_detail_window()\n    \n    def build_master_window(self):\n        """Build the master list window"""\n        container = Container(className="p-4")\n        container.add(Text("Documents", className="text-xl font-bold mb-4"))\n        \n        # Document list\n        doc_list = Container(className="space-y-2")\n        \n        for item in self.items:\n            doc_item = Container(className="p-3 border rounded hover:bg-gray-50 cursor-pointer")\n            doc_item.add(Text(item["name"], className="font-medium"))\n            doc_item.add(Text(f"ID: {item[\'id\']}", className="text-sm text-gray-500"))\n            \n            # In a real implementation, you\'d add click handlers here\n            doc_list.add(doc_item)\n        \n        container.add(doc_list)\n        self.master_window.add_child(container)\n    \n    def build_detail_window(self):\n        """Build the detail view window"""\n        container = Container(className="p-6")\n        \n        if self.selected_item:\n            container.add(Text(self.selected_item["name"], className="text-2xl font-bold mb-4"))\n            container.add(Text(self.selected_item["content"], className="text-gray-700"))\n        else:\n            container.add(Text("No document selected", className="text-gray-500 text-center mt-20"))\n        \n        self.detail_window.add_child(container)\n    \n    def run(self):\n        self.app.run()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"floating-tool-windows",children:"Floating Tool Windows"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class IDEApp:\n    def __init__(self):\n        self.app = App()\n        self.setup_ide_windows()\n    \n    def setup_ide_windows(self):\n        # Main editor window\n        self.editor_window = self.app.create_window(\n            title="Code Editor",\n            size=(800, 600),\n            position=(200, 100)\n        )\n        \n        # File explorer\n        self.explorer_window = self.app.create_window(\n            title="File Explorer",\n            size=(250, 400),\n            position=(50, 100),\n            on_top=False\n        )\n        \n        # Properties panel\n        self.properties_window = self.app.create_window(\n            title="Properties",\n            size=(300, 300),\n            position=(1050, 100),\n            on_top=False\n        )\n        \n        # Output console\n        self.console_window = self.app.create_window(\n            title="Console",\n            size=(800, 200),\n            position=(200, 750),\n            on_top=False\n        )\n        \n        self.build_editor_window()\n        self.build_explorer_window()\n        self.build_properties_window()\n        self.build_console_window()\n    \n    def build_editor_window(self):\n        """Build the main editor window"""\n        container = Container(className="flex flex-col h-full")\n        \n        # Menu bar\n        menu_bar = Container(className="bg-gray-100 border-b p-2 flex space-x-4")\n        menu_bar.add(Button("File", className="px-3 py-1 hover:bg-gray-200 rounded"))\n        menu_bar.add(Button("Edit", className="px-3 py-1 hover:bg-gray-200 rounded"))\n        menu_bar.add(Button("View", className="px-3 py-1 hover:bg-gray-200 rounded"))\n        menu_bar.add(Button("Run", className="px-3 py-1 hover:bg-gray-200 rounded"))\n        \n        # Editor area\n        editor_area = Container(className="flex-1 p-4 bg-gray-900 text-green-400 font-mono")\n        editor_area.add(Text("# Welcome to OneForAll IDE", className="mb-2"))\n        editor_area.add(Text("from oneforall import App, Container, Text", className="mb-1"))\n        editor_area.add(Text("", className="mb-1"))\n        editor_area.add(Text("app = App()", className="mb-1"))\n        editor_area.add(Text("window = app.create_window(\'My App\', (800, 600))", className="mb-1"))\n        \n        # Status bar\n        status_bar = Container(className="bg-gray-200 border-t p-2 flex justify-between text-sm")\n        status_bar.add(Text("Ready", className="text-gray-600"))\n        status_bar.add(Text("Line 1, Column 1", className="text-gray-600"))\n        \n        container.add(menu_bar)\n        container.add(editor_area)\n        container.add(status_bar)\n        \n        self.editor_window.add_child(container)\n    \n    def build_explorer_window(self):\n        """Build the file explorer window"""\n        container = Container(className="p-3")\n        container.add(Text("Project Files", className="font-bold mb-3"))\n        \n        # File tree\n        file_tree = Container(className="space-y-1 text-sm")\n        file_tree.add(Text("\ud83d\udcc1 src/", className="font-medium"))\n        file_tree.add(Text("  \ud83d\udcc4 main.py", className="ml-4 text-blue-600 cursor-pointer"))\n        file_tree.add(Text("  \ud83d\udcc4 components.py", className="ml-4 text-blue-600 cursor-pointer"))\n        file_tree.add(Text("\ud83d\udcc1 assets/", className="font-medium"))\n        file_tree.add(Text("  \ud83d\uddbc\ufe0f icon.png", className="ml-4 text-gray-600"))\n        file_tree.add(Text("\ud83d\udcc4 README.md", className="text-blue-600 cursor-pointer"))\n        \n        container.add(file_tree)\n        self.explorer_window.add_child(container)\n    \n    def build_properties_window(self):\n        """Build the properties panel"""\n        container = Container(className="p-3")\n        container.add(Text("Properties", className="font-bold mb-3"))\n        \n        # Property list\n        props = Container(className="space-y-2 text-sm")\n        props.add(Container(className="flex justify-between"))\n        props.children[-1].add(Text("Name:", className="font-medium"))\n        props.children[-1].add(Text("main.py", className="text-gray-600"))\n        \n        props.add(Container(className="flex justify-between"))\n        props.children[-1].add(Text("Size:", className="font-medium"))\n        props.children[-1].add(Text("1.2 KB", className="text-gray-600"))\n        \n        props.add(Container(className="flex justify-between"))\n        props.children[-1].add(Text("Type:", className="font-medium"))\n        props.children[-1].add(Text("Python", className="text-gray-600"))\n        \n        container.add(props)\n        self.properties_window.add_child(container)\n    \n    def build_console_window(self):\n        """Build the console window"""\n        container = Container(className="p-3 bg-black text-white font-mono text-sm")\n        container.add(Text("Console Output", className="text-green-400 font-bold mb-2"))\n        container.add(Text(">>> Starting OneForAll application...", className="mb-1"))\n        container.add(Text(">>> Application initialized successfully", className="mb-1"))\n        container.add(Text(">>> Ready for input", className="text-green-400"))\n        \n        self.console_window.add_child(container)\n    \n    def run(self):\n        self.app.run()\n'})}),"\n",(0,a.jsx)(e.h2,{id:"window-management-best-practices",children:"Window Management Best Practices"}),"\n",(0,a.jsx)(e.h3,{id:"window-lifecycle-management",children:"Window Lifecycle Management"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class WindowLifecycleManager:\n    def __init__(self):\n        self.app = App()\n        self.active_windows = {}\n        self.window_configs = {}\n    \n    def create_managed_window(self, window_id, title, size, position=None, **kwargs):\n        """Create a window with lifecycle management"""\n        \n        # Store window configuration\n        self.window_configs[window_id] = {\n            \'title\': title,\n            \'size\': size,\n            \'position\': position or (100, 100),\n            \'kwargs\': kwargs\n        }\n        \n        # Create the window\n        window = self.app.create_window(\n            title=title,\n            size=size,\n            position=position or (100, 100),\n            **kwargs\n        )\n        \n        self.active_windows[window_id] = window\n        return window\n    \n    def close_window(self, window_id):\n        """Close a managed window"""\n        if window_id in self.active_windows:\n            # In a real implementation, you would close the window here\n            del self.active_windows[window_id]\n    \n    def is_window_open(self, window_id):\n        """Check if a window is currently open"""\n        return window_id in self.active_windows\n    \n    def get_window(self, window_id):\n        """Get a window by ID"""\n        return self.active_windows.get(window_id)\n    \n    def restore_window_layout(self, layout_config):\n        """Restore windows from a saved layout"""\n        for window_id, config in layout_config.items():\n            if not self.is_window_open(window_id):\n                self.create_managed_window(\n                    window_id,\n                    config[\'title\'],\n                    config[\'size\'],\n                    config[\'position\'],\n                    **config.get(\'kwargs\', {})\n                )\n    \n    def save_window_layout(self):\n        """Save current window layout"""\n        layout = {}\n        for window_id, window in self.active_windows.items():\n            if window_id in self.window_configs:\n                layout[window_id] = self.window_configs[window_id].copy()\n        return layout\n'})}),"\n",(0,a.jsx)(e.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class EfficientMultiWindowApp:\n    def __init__(self):\n        self.app = App()\n        self.window_cache = {}\n        self.lazy_windows = {}\n    \n    def get_or_create_window(self, window_id, factory_func):\n        """Get existing window or create new one lazily"""\n        \n        if window_id not in self.window_cache:\n            # Create window only when needed\n            self.window_cache[window_id] = factory_func()\n        \n        return self.window_cache[window_id]\n    \n    def create_settings_window(self):\n        """Factory function for settings window"""\n        window = self.app.create_window(\n            title="Settings",\n            size=(400, 500)\n        )\n        \n        # Build settings content\n        container = Container(className="p-6")\n        container.add(Text("Settings", className="text-xl font-bold"))\n        window.add_child(container)\n        \n        return window\n    \n    def show_settings(self):\n        """Show settings window (create if needed)"""\n        settings_window = self.get_or_create_window(\n            \'settings\',\n            self.create_settings_window\n        )\n        # In a real implementation, you would show/focus the window here\n    \n    def cleanup_unused_windows(self):\n        """Clean up windows that are no longer needed"""\n        # Remove windows that haven\'t been accessed recently\n        # This is a simplified example\n        pass\n'})}),"\n",(0,a.jsx)(e.h2,{id:"advanced-multi-window-features",children:"Advanced Multi-Window Features"}),"\n",(0,a.jsx)(e.h3,{id:"window-docking-simulation",children:"Window Docking Simulation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class DockableWindowSystem:\n    def __init__(self):\n        self.app = App()\n        self.docked_windows = {\n            \'left\': None,\n            \'right\': None,\n            \'bottom\': None\n        }\n        self.main_window = None\n        self.setup_dockable_system()\n    \n    def setup_dockable_system(self):\n        """Setup a dockable window system"""\n        \n        # Main window\n        self.main_window = self.app.create_window(\n            title="Main Application",\n            size=(1000, 700),\n            position=(100, 100)\n        )\n        \n        # Create docked panels\n        self.create_left_panel()\n        self.create_right_panel()\n        self.create_bottom_panel()\n        \n        self.build_main_content()\n    \n    def create_left_panel(self):\n        """Create left docked panel"""\n        left_panel = self.app.create_window(\n            title="Explorer",\n            size=(250, 500),\n            position=(100, 150),\n            resizable=True,\n            maximizable=False\n        )\n        \n        content = Container(className="p-3")\n        content.add(Text("File Explorer", className="font-bold mb-3"))\n        content.add(Text("\ud83d\udcc1 Project Files", className="text-sm"))\n        \n        left_panel.add_child(content)\n        self.docked_windows[\'left\'] = left_panel\n    \n    def create_right_panel(self):\n        """Create right docked panel"""\n        right_panel = self.app.create_window(\n            title="Properties",\n            size=(250, 500),\n            position=(850, 150),\n            resizable=True,\n            maximizable=False\n        )\n        \n        content = Container(className="p-3")\n        content.add(Text("Properties", className="font-bold mb-3"))\n        content.add(Text("No selection", className="text-sm text-gray-500"))\n        \n        right_panel.add_child(content)\n        self.docked_windows[\'right\'] = right_panel\n    \n    def create_bottom_panel(self):\n        """Create bottom docked panel"""\n        bottom_panel = self.app.create_window(\n            title="Console",\n            size=(700, 150),\n            position=(350, 650),\n            resizable=True,\n            maximizable=False\n        )\n        \n        content = Container(className="p-3 bg-black text-white font-mono text-sm")\n        content.add(Text("Console ready...", className="text-green-400"))\n        \n        bottom_panel.add_child(content)\n        self.docked_windows[\'bottom\'] = bottom_panel\n    \n    def build_main_content(self):\n        """Build main window content"""\n        container = Container(className="p-6")\n        \n        # Header\n        header = Container(className="flex justify-between items-center mb-6")\n        header.add(Text("Dockable Window System", className="text-2xl font-bold"))\n        \n        # Panel controls\n        controls = Container(className="flex space-x-2")\n        controls.add(Button("Toggle Left", className="px-3 py-1 bg-blue-500 text-white rounded text-sm"))\n        controls.add(Button("Toggle Right", className="px-3 py-1 bg-green-500 text-white rounded text-sm"))\n        controls.add(Button("Toggle Bottom", className="px-3 py-1 bg-purple-500 text-white rounded text-sm"))\n        \n        header.add(controls)\n        \n        # Main content area\n        content_area = Container(className="bg-gray-50 p-6 rounded-lg min-h-96")\n        content_area.add(Text("Main Content Area", className="text-lg font-semibold mb-4"))\n        content_area.add(Text("This is the main workspace. Panels can be docked around it.", className="text-gray-600"))\n        \n        container.add(header)\n        container.add(content_area)\n        \n        self.main_window.add_child(container)\n    \n    def run(self):\n        self.app.run()\n'})}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(e.p,{children:"Now that you understand multiple windows in OneForAll:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"../api/window",children:"API Reference"})," - Complete window API documentation"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"../advanced/custom-components",children:"Advanced Patterns"})," - Advanced application patterns"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"../deployment/building",children:"Deployment"})," - Building multi-window applications"]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:"Master multiple windows to create sophisticated desktop applications with OneForAll!"})]})}function w(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);
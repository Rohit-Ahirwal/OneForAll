"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[448],{1197:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>t});var o=i(6363);const d={},l=o.createContext(d);function s(n){const e=o.useContext(l);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:s(n.components),o.createElement(l.Provider,{value:e},n.children)}},9270:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>t,default:()=>w,frontMatter:()=>s,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"api/window","title":"Window API Reference","description":"The Window class represents an individual application window in OneForAll. It manages the window\'s content, properties, and lifecycle.","source":"@site/docs/api/window.md","sourceDirName":"api","slug":"/api/window","permalink":"/OneForAll/docs/next/api/window","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/api/window.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"App API Reference","permalink":"/OneForAll/docs/next/api/app"},"next":{"title":"Components API Reference","permalink":"/OneForAll/docs/next/api/components"}}');var d=i(7259),l=i(1197);const s={sidebar_position:2},t="Window API Reference",a={},r=[{value:"Class: Window",id:"class-window",level:2},{value:"Properties",id:"properties",level:3},{value:"title",id:"title",level:4},{value:"size",id:"size",level:4},{value:"position",id:"position",level:4},{value:"resizable",id:"resizable",level:4},{value:"minimizable",id:"minimizable",level:4},{value:"maximizable",id:"maximizable",level:4},{value:"on_top",id:"on_top",level:4},{value:"Methods",id:"methods",level:3},{value:"add_child()",id:"add_child",level:4},{value:"remove_child()",id:"remove_child",level:4},{value:"render()",id:"render",level:4},{value:"show()",id:"show",level:4},{value:"hide()",id:"hide",level:4},{value:"close()",id:"close",level:4},{value:"focus()",id:"focus",level:4},{value:"minimize()",id:"minimize",level:4},{value:"maximize()",id:"maximize",level:4},{value:"restore()",id:"restore",level:4},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Window Setup",id:"basic-window-setup",level:3},{value:"Window Configuration",id:"window-configuration",level:3},{value:"Dynamic Window Properties",id:"dynamic-window-properties",level:3},{value:"Multi-Window Management",id:"multi-window-management",level:3},{value:"Window Lifecycle",id:"window-lifecycle",level:2},{value:"Creation and Initialization",id:"creation-and-initialization",level:3},{value:"Window States",id:"window-states",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Window Configuration",id:"window-configuration-1",level:3},{value:"Content Management",id:"content-management",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Related APIs",id:"related-apis",level:2},{value:"Examples",id:"examples",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"window-api-reference",children:"Window API Reference"})}),"\n",(0,d.jsxs)(e.p,{children:["The ",(0,d.jsx)(e.code,{children:"Window"})," class represents an individual application window in OneForAll. It manages the window's content, properties, and lifecycle."]}),"\n",(0,d.jsx)(e.admonition,{title:"Alpha Version",type:"info",children:(0,d.jsxs)(e.p,{children:["The Window API is stable in OneForAll ",(0,d.jsx)(e.strong,{children:"alpha"})," (v0.1.0a3) with full functionality for desktop application development."]})}),"\n",(0,d.jsx)(e.h2,{id:"class-window",children:"Class: Window"}),"\n",(0,d.jsxs)(e.p,{children:["Windows are created through the ",(0,d.jsx)(e.code,{children:"App.create_window()"})," method and cannot be instantiated directly."]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import App\n\napp = App()\nwindow = app.create_window("My Window", (800, 600))\n'})}),"\n",(0,d.jsx)(e.h3,{id:"properties",children:"Properties"}),"\n",(0,d.jsx)(e.h4,{id:"title",children:"title"}),"\n",(0,d.jsx)(e.p,{children:"The window's title displayed in the title bar."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'window.title = "New Window Title"\nprint(window.title)  # Output: "New Window Title"\n'})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"str"})]}),"\n",(0,d.jsx)(e.h4,{id:"size",children:"size"}),"\n",(0,d.jsx)(e.p,{children:"The window's dimensions as a tuple of (width, height) in pixels."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.size = (1000, 700)\nprint(window.size)  # Output: (1000, 700)\n"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"tuple[int, int]"})]}),"\n",(0,d.jsx)(e.h4,{id:"position",children:"position"}),"\n",(0,d.jsx)(e.p,{children:"The window's position as a tuple of (x, y) coordinates."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.position = (100, 50)\nprint(window.position)  # Output: (100, 50)\n"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"tuple[int, int]"})]}),"\n",(0,d.jsx)(e.h4,{id:"resizable",children:"resizable"}),"\n",(0,d.jsx)(e.p,{children:"Whether the window can be resized by the user."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.resizable = False  # Disable resizing\nprint(window.resizable)  # Output: False\n"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"bool"})]}),"\n",(0,d.jsx)(e.h4,{id:"minimizable",children:"minimizable"}),"\n",(0,d.jsx)(e.p,{children:"Whether the window can be minimized."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.minimizable = False  # Disable minimize button\nprint(window.minimizable)  # Output: False\n"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"bool"})]}),"\n",(0,d.jsx)(e.h4,{id:"maximizable",children:"maximizable"}),"\n",(0,d.jsx)(e.p,{children:"Whether the window can be maximized."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.maximizable = False  # Disable maximize button\nprint(window.maximizable)  # Output: False\n"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"bool"})]}),"\n",(0,d.jsx)(e.h4,{id:"on_top",children:"on_top"}),"\n",(0,d.jsx)(e.p,{children:"Whether the window stays on top of other windows."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.on_top = True  # Keep window on top\nprint(window.on_top)  # Output: True\n"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Type:"})," ",(0,d.jsx)(e.code,{children:"bool"})]}),"\n",(0,d.jsx)(e.h3,{id:"methods",children:"Methods"}),"\n",(0,d.jsx)(e.h4,{id:"add_child",children:"add_child()"}),"\n",(0,d.jsx)(e.p,{children:"Adds a component to the window as the root content."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import Container, Text\n\ncontainer = Container(className="p-6")\ncontainer.add(Text("Hello World"))\n\nwindow.add_child(container)\n'})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"component"})," (Component): The root component to add to the window"]}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Note:"})," Each window can have only one root component. Adding a new child replaces the previous one."]}),"\n",(0,d.jsx)(e.h4,{id:"remove_child",children:"remove_child()"}),"\n",(0,d.jsx)(e.p,{children:"Removes the current root component from the window."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.remove_child()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"render",children:"render()"}),"\n",(0,d.jsx)(e.p,{children:"Renders the window's content to HTML. This method is called automatically by the framework."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"html_content = window.render()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"str"}),": The rendered HTML content"]}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"show",children:"show()"}),"\n",(0,d.jsx)(e.p,{children:"Shows the window if it's hidden."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.show()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"hide",children:"hide()"}),"\n",(0,d.jsx)(e.p,{children:"Hides the window without closing it."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.hide()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"close",children:"close()"}),"\n",(0,d.jsx)(e.p,{children:"Closes the window and removes it from the application."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.close()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"Note:"})," Once closed, the window cannot be reopened."]}),"\n",(0,d.jsx)(e.h4,{id:"focus",children:"focus()"}),"\n",(0,d.jsx)(e.p,{children:"Brings the window to the front and gives it focus."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.focus()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"minimize",children:"minimize()"}),"\n",(0,d.jsx)(e.p,{children:"Minimizes the window (if minimizable)."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.minimize()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"maximize",children:"maximize()"}),"\n",(0,d.jsx)(e.p,{children:"Maximizes the window (if maximizable)."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.maximize()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h4,{id:"restore",children:"restore()"}),"\n",(0,d.jsx)(e.p,{children:"Restores the window from minimized or maximized state."}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"window.restore()\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,d.jsx)(e.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,d.jsx)(e.h3,{id:"basic-window-setup",children:"Basic Window Setup"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\napp = App()\n\n# Create a basic window\nwindow = app.create_window(\n    title="Basic Window",\n    size=(600, 400),\n    position=(200, 150)\n)\n\n# Create content\ncontainer = Container(className="p-6")\ncontainer.add(Text("Welcome to OneForAll", className="text-2xl font-bold mb-4"))\ncontainer.add(Text("This is a basic window example.", className="text-gray-600 mb-4"))\ncontainer.add(Button("Click Me", className="px-4 py-2 bg-blue-500 text-white rounded"))\n\n# Add content to window\nwindow.add_child(container)\n\napp.run()\n'})}),"\n",(0,d.jsx)(e.h3,{id:"window-configuration",children:"Window Configuration"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text\n\napp = App()\n\n# Create a configured window\nwindow = app.create_window(\n    title="Configured Window",\n    size=(500, 300),\n    position=(300, 200),\n    resizable=False,      # Fixed size\n    minimizable=True,     # Can be minimized\n    maximizable=False,    # Cannot be maximized\n    on_top=True          # Always on top\n)\n\n# Build content\ncontent = Container(className="p-6 text-center")\ncontent.add(Text("Fixed Size Window", className="text-xl font-bold mb-2"))\ncontent.add(Text("This window cannot be resized or maximized.", className="text-gray-600"))\n\nwindow.add_child(content)\n\napp.run()\n'})}),"\n",(0,d.jsx)(e.h3,{id:"dynamic-window-properties",children:"Dynamic Window Properties"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\nclass DynamicWindow:\n    def __init__(self):\n        self.app = App()\n        self.window = self.app.create_window("Dynamic Window", (600, 400))\n        self.setup_ui()\n    \n    def setup_ui(self):\n        container = Container(className="p-6")\n        \n        # Title\n        container.add(Text("Dynamic Window Properties", className="text-xl font-bold mb-4"))\n        \n        # Current properties display\n        self.properties_display = Container(className="mb-4 p-4 bg-gray-100 rounded")\n        self.update_properties_display()\n        container.add(self.properties_display)\n        \n        # Control buttons\n        controls = Container(className="space-y-2")\n        \n        controls.add(Button(\n            "Toggle Resizable", \n            className="w-full px-4 py-2 bg-blue-500 text-white rounded",\n            onclick=self.toggle_resizable\n        ))\n        \n        controls.add(Button(\n            "Toggle On Top", \n            className="w-full px-4 py-2 bg-green-500 text-white rounded",\n            onclick=self.toggle_on_top\n        ))\n        \n        controls.add(Button(\n            "Change Title", \n            className="w-full px-4 py-2 bg-purple-500 text-white rounded",\n            onclick=self.change_title\n        ))\n        \n        controls.add(Button(\n            "Resize Window", \n            className="w-full px-4 py-2 bg-orange-500 text-white rounded",\n            onclick=self.resize_window\n        ))\n        \n        container.add(controls)\n        self.window.add_child(container)\n    \n    def update_properties_display(self):\n        """Update the properties display"""\n        self.properties_display.children.clear()\n        \n        props = [\n            f"Title: {self.window.title}",\n            f"Size: {self.window.size[0]}x{self.window.size[1]}",\n            f"Position: ({self.window.position[0]}, {self.window.position[1]})",\n            f"Resizable: {self.window.resizable}",\n            f"On Top: {self.window.on_top}"\n        ]\n        \n        for prop in props:\n            self.properties_display.add(Text(prop, className="text-sm text-gray-700"))\n    \n    def toggle_resizable(self):\n        """Toggle window resizable property"""\n        self.window.resizable = not self.window.resizable\n        self.update_properties_display()\n    \n    def toggle_on_top(self):\n        """Toggle window on top property"""\n        self.window.on_top = not self.window.on_top\n        self.update_properties_display()\n    \n    def change_title(self):\n        """Change window title"""\n        import random\n        titles = ["Dynamic Window", "Updated Title", "New Window Name", "OneForAll App"]\n        self.window.title = random.choice(titles)\n        self.update_properties_display()\n    \n    def resize_window(self):\n        """Resize the window"""\n        import random\n        sizes = [(600, 400), (800, 500), (500, 350), (700, 450)]\n        self.window.size = random.choice(sizes)\n        self.update_properties_display()\n    \n    def run(self):\n        self.app.run()\n\n# Usage\napp = DynamicWindow()\napp.run()\n'})}),"\n",(0,d.jsx)(e.h3,{id:"multi-window-management",children:"Multi-Window Management"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\nclass MultiWindowManager:\n    def __init__(self):\n        self.app = App()\n        self.windows = {}\n        self.window_counter = 0\n        self.setup_main_window()\n    \n    def setup_main_window(self):\n        """Setup the main control window"""\n        self.main_window = self.app.create_window(\n            title="Window Manager",\n            size=(400, 500),\n            position=(100, 100)\n        )\n        \n        container = Container(className="p-6")\n        container.add(Text("Window Manager", className="text-xl font-bold mb-4"))\n        \n        # Window creation controls\n        creation_controls = Container(className="mb-6 space-y-2")\n        creation_controls.add(Button(\n            "Create Normal Window",\n            className="w-full px-4 py-2 bg-blue-500 text-white rounded",\n            onclick=self.create_normal_window\n        ))\n        \n        creation_controls.add(Button(\n            "Create Dialog Window",\n            className="w-full px-4 py-2 bg-green-500 text-white rounded",\n            onclick=self.create_dialog_window\n        ))\n        \n        creation_controls.add(Button(\n            "Create Tool Window",\n            className="w-full px-4 py-2 bg-purple-500 text-white rounded",\n            onclick=self.create_tool_window\n        ))\n        \n        container.add(creation_controls)\n        \n        # Window list\n        container.add(Text("Active Windows:", className="font-semibold mb-2"))\n        self.window_list = Container(className="space-y-1")\n        self.update_window_list()\n        container.add(self.window_list)\n        \n        self.main_window.add_child(container)\n    \n    def create_normal_window(self):\n        """Create a normal window"""\n        self.window_counter += 1\n        window_id = f"normal_{self.window_counter}"\n        \n        window = self.app.create_window(\n            title=f"Normal Window {self.window_counter}",\n            size=(500, 350),\n            position=(200 + self.window_counter * 30, 150 + self.window_counter * 30)\n        )\n        \n        content = Container(className="p-6")\n        content.add(Text(f"Normal Window {self.window_counter}", className="text-lg font-bold mb-2"))\n        content.add(Text("This is a normal resizable window.", className="text-gray-600 mb-4"))\n        content.add(Button(\n            "Close This Window",\n            className="px-4 py-2 bg-red-500 text-white rounded",\n            onclick=lambda: self.close_window(window_id)\n        ))\n        \n        window.add_child(content)\n        self.windows[window_id] = window\n        self.update_window_list()\n    \n    def create_dialog_window(self):\n        """Create a dialog window"""\n        self.window_counter += 1\n        window_id = f"dialog_{self.window_counter}"\n        \n        window = self.app.create_window(\n            title=f"Dialog {self.window_counter}",\n            size=(300, 200),\n            position=(350, 250),\n            resizable=False,\n            maximizable=False,\n            on_top=True\n        )\n        \n        content = Container(className="p-6 text-center")\n        content.add(Text(f"Dialog {self.window_counter}", className="text-lg font-bold mb-2"))\n        content.add(Text("This is a modal dialog.", className="text-gray-600 mb-4"))\n        \n        buttons = Container(className="flex space-x-2 justify-center")\n        buttons.add(Button("OK", className="px-4 py-2 bg-blue-500 text-white rounded"))\n        buttons.add(Button(\n            "Cancel",\n            className="px-4 py-2 bg-gray-300 rounded",\n            onclick=lambda: self.close_window(window_id)\n        ))\n        \n        content.add(buttons)\n        window.add_child(content)\n        self.windows[window_id] = window\n        self.update_window_list()\n    \n    def create_tool_window(self):\n        """Create a tool window"""\n        self.window_counter += 1\n        window_id = f"tool_{self.window_counter}"\n        \n        window = self.app.create_window(\n            title=f"Tools {self.window_counter}",\n            size=(200, 400),\n            position=(50, 150),\n            maximizable=False\n        )\n        \n        content = Container(className="p-4")\n        content.add(Text(f"Tool Palette {self.window_counter}", className="text-sm font-bold mb-3"))\n        \n        tools = Container(className="space-y-1")\n        for i in range(5):\n            tools.add(Button(\n                f"Tool {i+1}",\n                className="w-full px-2 py-1 bg-gray-200 rounded text-xs"\n            ))\n        \n        content.add(tools)\n        window.add_child(content)\n        self.windows[window_id] = window\n        self.update_window_list()\n    \n    def close_window(self, window_id):\n        """Close a specific window"""\n        if window_id in self.windows:\n            self.windows[window_id].close()\n            del self.windows[window_id]\n            self.update_window_list()\n    \n    def update_window_list(self):\n        """Update the window list display"""\n        self.window_list.children.clear()\n        \n        if not self.windows:\n            self.window_list.add(Text("No additional windows", className="text-sm text-gray-500"))\n        else:\n            for window_id, window in self.windows.items():\n                window_info = Container(className="flex justify-between items-center p-2 bg-gray-100 rounded")\n                window_info.add(Text(window.title, className="text-sm"))\n                window_info.add(Button(\n                    "Close",\n                    className="px-2 py-1 bg-red-500 text-white rounded text-xs",\n                    onclick=lambda wid=window_id: self.close_window(wid)\n                ))\n                self.window_list.add(window_info)\n    \n    def run(self):\n        self.app.run()\n\n# Usage\nmanager = MultiWindowManager()\nmanager.run()\n'})}),"\n",(0,d.jsx)(e.h2,{id:"window-lifecycle",children:"Window Lifecycle"}),"\n",(0,d.jsx)(e.h3,{id:"creation-and-initialization",children:"Creation and Initialization"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text\n\n# 1. Create app\napp = App()\n\n# 2. Create window\nwindow = app.create_window("My App", (600, 400))\n\n# 3. Build content\ncontent = Container(className="p-6")\ncontent.add(Text("Window Content"))\n\n# 4. Add content to window\nwindow.add_child(content)\n\n# 5. Run app (shows all windows)\napp.run()\n'})}),"\n",(0,d.jsx)(e.h3,{id:"window-states",children:"Window States"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:"# Show/Hide\nwindow.show()    # Make window visible\nwindow.hide()    # Hide window (but keep in memory)\n\n# Focus Management\nwindow.focus()   # Bring window to front\n\n# Size States\nwindow.minimize()  # Minimize window\nwindow.maximize()  # Maximize window (if maximizable)\nwindow.restore()   # Restore from minimized/maximized\n\n# Final State\nwindow.close()     # Close and destroy window\n"})}),"\n",(0,d.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,d.jsx)(e.h3,{id:"window-configuration-1",children:"Window Configuration"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# \u2705 Good: Configure windows appropriately for their purpose\nmain_window = app.create_window(\n    title="Main Application",\n    size=(1000, 700),\n    resizable=True,\n    minimizable=True,\n    maximizable=True\n)\n\ndialog_window = app.create_window(\n    title="Settings",\n    size=(400, 300),\n    resizable=False,\n    maximizable=False,\n    on_top=True\n)\n\ntool_window = app.create_window(\n    title="Tools",\n    size=(200, 500),\n    maximizable=False\n)\n'})}),"\n",(0,d.jsx)(e.h3,{id:"content-management",children:"Content Management"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'# \u2705 Good: Use a single root container\nroot_container = Container(className="flex flex-col h-full")\n\n# Add sections to root container\nheader = Container(className="bg-gray-100 p-4")\ncontent = Container(className="flex-1 p-6")\nfooter = Container(className="bg-gray-200 p-2")\n\nroot_container.add(header)\nroot_container.add(content)\nroot_container.add(footer)\n\nwindow.add_child(root_container)\n\n# \u274c Avoid: Multiple root components (only the last one will be used)\nwindow.add_child(header)   # This will be replaced\nwindow.add_child(content)  # This will be replaced\nwindow.add_child(footer)   # Only this will be shown\n'})}),"\n",(0,d.jsx)(e.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-python",children:'class WindowManager:\n    def __init__(self):\n        self.app = App()\n        self.active_windows = {}\n    \n    def create_window(self, window_id, title, size):\n        """Create and track a window"""\n        if window_id in self.active_windows:\n            # Window already exists, focus it instead\n            self.active_windows[window_id].focus()\n            return self.active_windows[window_id]\n        \n        window = self.app.create_window(title, size)\n        self.active_windows[window_id] = window\n        return window\n    \n    def close_window(self, window_id):\n        """Close and cleanup a window"""\n        if window_id in self.active_windows:\n            self.active_windows[window_id].close()\n            del self.active_windows[window_id]\n    \n    def cleanup_all(self):\n        """Close all managed windows"""\n        for window_id in list(self.active_windows.keys()):\n            self.close_window(window_id)\n'})}),"\n",(0,d.jsx)(e.h2,{id:"related-apis",children:"Related APIs"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.a,{href:"./app",children:"App API"})," - Application management and window creation"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.a,{href:"./components",children:"Components API"})," - UI components for window content"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.a,{href:"./cli",children:"CLI API"})," - Command-line tools for development"]}),"\n"]}),"\n",(0,d.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsxs)(e.p,{children:["See the ",(0,d.jsx)(e.a,{href:"../tutorial-basics/multiple-windows",children:"Multiple Windows Tutorial"})," for comprehensive examples and patterns."]}),"\n",(0,d.jsx)(e.hr,{}),"\n",(0,d.jsx)(e.p,{children:"The Window class provides complete control over individual application windows, enabling you to create sophisticated multi-window desktop applications with OneForAll."})]})}function w(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(c,{...n})}):c(n)}}}]);
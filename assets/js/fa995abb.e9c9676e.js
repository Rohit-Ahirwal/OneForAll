"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[892],{1197:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(6363);const s={},o=a.createContext(s);function i(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:t},e.children)}},1822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"tutorial-basics/state-management","title":"State Management","description":"State management is at the heart of OneForAll applications. In this tutorial, you\'ll learn how to effectively manage application state, create reactive UIs, and handle complex state patterns.","source":"@site/docs/tutorial-basics/state-management.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/state-management","permalink":"/OneForAll/docs/tutorial-basics/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/tutorial-basics/state-management.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Your First App","permalink":"/OneForAll/docs/tutorial-basics/your-first-app"},"next":{"title":"Creating Layouts","permalink":"/OneForAll/docs/tutorial-basics/creating-layouts"}}');var s=n(7259),o=n(1197);const i={sidebar_position:2},d="State Management",l={},r=[{value:"Understanding State",id:"understanding-state",level:2},{value:"Basic State Operations",id:"basic-state-operations",level:3},{value:"Reactive Components",id:"reactive-components",level:2},{value:"State Effects",id:"state-effects",level:2},{value:"Complex State Example: Todo List",id:"complex-state-example-todo-list",level:2},{value:"State Best Practices",id:"state-best-practices",level:2},{value:"1. Initialize State Early",id:"1-initialize-state-early",level:3},{value:"2. Use Descriptive State Keys",id:"2-use-descriptive-state-keys",level:3},{value:"3. Avoid Direct State Mutation",id:"3-avoid-direct-state-mutation",level:3},{value:"4. Use Effects for Side Effects",id:"4-use-effects-for-side-effects",level:3},{value:"Advanced State Patterns",id:"advanced-state-patterns",level:2},{value:"Computed State",id:"computed-state",level:3},{value:"State Validation",id:"state-validation",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"Debugging State",id:"debugging-state",level:2},{value:"State Logging",id:"state-logging",level:3},{value:"State Inspector",id:"state-inspector",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"state-management",children:"State Management"})}),"\n",(0,s.jsx)(t.p,{children:"State management is at the heart of OneForAll applications. In this tutorial, you'll learn how to effectively manage application state, create reactive UIs, and handle complex state patterns."}),"\n",(0,s.jsx)(t.h2,{id:"understanding-state",children:"Understanding State"}),"\n",(0,s.jsx)(t.p,{children:"State in OneForAll represents the data that can change over time in your application. When state changes, OneForAll automatically updates only the components that depend on that state."}),"\n",(0,s.jsx)(t.h3,{id:"basic-state-operations",children:"Basic State Operations"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App\n\napp = App()\n\n# Create state with default value\napp.use_state("user_name", "Guest")\napp.use_state("counter", 0)\napp.use_state("is_logged_in", False)\n\n# Get current state value\ncurrent_name = app.use_state("user_name")\ncurrent_count = app.use_state("counter")\n\n# Update state (triggers reactive updates)\napp.set_state("user_name", "John Doe")\napp.set_state("counter", 42)\napp.set_state("is_logged_in", True)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"reactive-components",children:"Reactive Components"}),"\n",(0,s.jsx)(t.p,{children:"Components automatically re-render when their dependent state changes:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Window, Text, Button, Container\n\napp = App()\n\n# Initialize state\napp.use_state("message", "Hello")\napp.use_state("count", 0)\n\nwindow = Window(title="Reactive Demo", size=(400, 300))\ncontainer = Container(className="p-4 space-y-4")\n\n# This text will automatically update when \'message\' state changes\nmessage_text = Text(app.use_state("message"), className="text-xl")\ncontainer.add(message_text)\n\n# This text will automatically update when \'count\' state changes\ncount_text = Text(f"Count: {app.use_state(\'count\')}", className="text-lg")\ncontainer.add(count_text)\n\n# Buttons to update state\ndef update_message():\n    app.set_state("message", "State updated!")\n\ndef increment_count():\n    current = app.use_state("count")\n    app.set_state("count", current + 1)\n\ncontainer.add(Button("Update Message", on_click=update_message))\ncontainer.add(Button("Increment", on_click=increment_count))\n\nwindow.add_child(container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(t.h2,{id:"state-effects",children:"State Effects"}),"\n",(0,s.jsx)(t.p,{children:"Use effects to perform side effects when state changes:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Log when counter changes\ndef log_counter():\n    count = app.use_state("count")\n    print(f"Counter is now: {count}")\n\napp.use_effect("count", log_counter)\n\n# Watch multiple state variables\ndef log_user_info():\n    name = app.use_state("user_name")\n    logged_in = app.use_state("is_logged_in")\n    print(f"User: {name}, Logged in: {logged_in}")\n\napp.use_effect(["user_name", "is_logged_in"], log_user_info)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"complex-state-example-todo-list",children:"Complex State Example: Todo List"}),"\n",(0,s.jsx)(t.p,{children:"Let's build a todo list to demonstrate complex state management:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Window, Text, Button, Container\n\napp = App()\n\n# Initialize todo state\napp.use_state("todos", [])\napp.use_state("new_todo_text", "")\napp.use_state("filter", "all")  # all, active, completed\n\nwindow = Window(title="Todo App", size=(500, 600))\nmain_container = Container(className="p-4 space-y-4")\n\n# Header\nmain_container.add(Text("Todo List", className="text-2xl font-bold text-center"))\n\n# Add todo section (simplified - in real app you\'d have an input component)\nadd_section = Container(className="flex space-x-2")\n\ndef add_todo():\n    # In a real app, you\'d get this from an input field\n    todo_text = "New Todo Item"  # Placeholder\n    if todo_text.strip():\n        todos = app.use_state("todos")\n        new_todo = {\n            "id": len(todos) + 1,\n            "text": todo_text,\n            "completed": False\n        }\n        app.set_state("todos", todos + [new_todo])\n\nadd_section.add(Button("Add Todo", on_click=add_todo, className="bg-blue-500 text-white px-4 py-2 rounded"))\nmain_container.add(add_section)\n\n# Filter buttons\nfilter_section = Container(className="flex space-x-2 justify-center")\n\ndef set_filter(filter_type):\n    def handler():\n        app.set_state("filter", filter_type)\n    return handler\n\nfilter_section.add(Button("All", on_click=set_filter("all"), className="bg-gray-300 px-3 py-1 rounded"))\nfilter_section.add(Button("Active", on_click=set_filter("active"), className="bg-gray-300 px-3 py-1 rounded"))\nfilter_section.add(Button("Completed", on_click=set_filter("completed"), className="bg-gray-300 px-3 py-1 rounded"))\n\nmain_container.add(filter_section)\n\n# Todo list container\ntodos_container = Container(className="space-y-2")\n\n# Function to update todo list display\ndef update_todo_display():\n    todos = app.use_state("todos")\n    current_filter = app.use_state("filter")\n    \n    # Clear existing todos\n    todos_container.clear_children()\n    \n    # Filter todos based on current filter\n    filtered_todos = todos\n    if current_filter == "active":\n        filtered_todos = [todo for todo in todos if not todo["completed"]]\n    elif current_filter == "completed":\n        filtered_todos = [todo for todo in todos if todo["completed"]]\n    \n    # Create todo items\n    for todo in filtered_todos:\n        todo_item = Container(className="flex items-center justify-between p-2 border rounded")\n        \n        # Todo text with conditional styling\n        text_class = "line-through text-gray-500" if todo["completed"] else "text-black"\n        todo_item.add(Text(todo["text"], className=text_class))\n        \n        # Action buttons\n        button_container = Container(className="flex space-x-1")\n        \n        # Toggle completion\n        def toggle_todo(todo_id):\n            def handler():\n                todos = app.use_state("todos")\n                updated_todos = []\n                for t in todos:\n                    if t["id"] == todo_id:\n                        t = t.copy()\n                        t["completed"] = not t["completed"]\n                    updated_todos.append(t)\n                app.set_state("todos", updated_todos)\n            return handler\n        \n        toggle_text = "\u2713" if todo["completed"] else "\u25cb"\n        toggle_btn = Button(\n            toggle_text,\n            on_click=toggle_todo(todo["id"]),\n            className="bg-green-500 text-white px-2 py-1 rounded text-sm"\n        )\n        button_container.add(toggle_btn)\n        \n        # Delete todo\n        def delete_todo(todo_id):\n            def handler():\n                todos = app.use_state("todos")\n                updated_todos = [t for t in todos if t["id"] != todo_id]\n                app.set_state("todos", updated_todos)\n            return handler\n        \n        delete_btn = Button(\n            "\u2717",\n            on_click=delete_todo(todo["id"]),\n            className="bg-red-500 text-white px-2 py-1 rounded text-sm"\n        )\n        button_container.add(delete_btn)\n        \n        todo_item.add(button_container)\n        todos_container.add(todo_item)\n    \n    # Show empty state\n    if not filtered_todos:\n        empty_text = "No todos found"\n        if current_filter == "active":\n            empty_text = "No active todos"\n        elif current_filter == "completed":\n            empty_text = "No completed todos"\n        \n        todos_container.add(Text(empty_text, className="text-gray-500 text-center py-4"))\n\n# Set up effects to update display when todos or filter changes\napp.use_effect(["todos", "filter"], update_todo_display)\n\n# Initialize display\nupdate_todo_display()\n\nmain_container.add(todos_container)\n\n# Stats section\nstats_container = Container(className="text-center text-sm text-gray-600")\n\ndef update_stats():\n    todos = app.use_state("todos")\n    total = len(todos)\n    completed = len([t for t in todos if t["completed"]])\n    active = total - completed\n    \n    stats_container.clear_children()\n    stats_container.add(Text(f"Total: {total} | Active: {active} | Completed: {completed}"))\n\napp.use_effect("todos", update_stats)\nupdate_stats()\n\nmain_container.add(stats_container)\n\nwindow.add_child(main_container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(t.h2,{id:"state-best-practices",children:"State Best Practices"}),"\n",(0,s.jsx)(t.h3,{id:"1-initialize-state-early",children:"1. Initialize State Early"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Initialize all state at the beginning\napp.use_state("user_profile", {"name": "", "email": ""})\napp.use_state("settings", {"theme": "light", "notifications": True})\napp.use_state("current_page", "home")\n\n# Create your UI components after state initialization\n'})}),"\n",(0,s.jsx)(t.h3,{id:"2-use-descriptive-state-keys",children:"2. Use Descriptive State Keys"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Clear, descriptive keys\napp.use_state("shopping_cart_items", [])\napp.use_state("user_authentication_status", False)\napp.use_state("current_selected_product_id", None)\n\n# \u274c Bad - Vague keys\napp.use_state("items", [])\napp.use_state("status", False)\napp.use_state("selected", None)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"3-avoid-direct-state-mutation",children:"3. Avoid Direct State Mutation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Create new objects/arrays\ncurrent_items = app.use_state("cart_items")\nnew_items = current_items + [new_item]\napp.set_state("cart_items", new_items)\n\n# \u2705 Good - For objects, create copies\nuser_profile = app.use_state("user_profile")\nupdated_profile = user_profile.copy()\nupdated_profile["name"] = "New Name"\napp.set_state("user_profile", updated_profile)\n\n# \u274c Bad - Don\'t mutate state directly\ncurrent_items = app.use_state("cart_items")\ncurrent_items.append(new_item)  # This won\'t trigger updates!\n'})}),"\n",(0,s.jsx)(t.h3,{id:"4-use-effects-for-side-effects",children:"4. Use Effects for Side Effects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Use effects for logging, API calls, etc.\ndef save_user_preferences():\n    preferences = app.use_state("user_preferences")\n    # Save to file or API\n    with open("preferences.json", "w") as f:\n        json.dump(preferences, f)\n\napp.use_effect("user_preferences", save_user_preferences)\n\n# \u2705 Good - Use effects for computed state\ndef update_total_price():\n    cart_items = app.use_state("cart_items")\n    total = sum(item["price"] * item["quantity"] for item in cart_items)\n    app.set_state("cart_total", total)\n\napp.use_effect("cart_items", update_total_price)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"advanced-state-patterns",children:"Advanced State Patterns"}),"\n",(0,s.jsx)(t.h3,{id:"computed-state",children:"Computed State"}),"\n",(0,s.jsx)(t.p,{children:"Create state that automatically updates based on other state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Base state\napp.use_state("first_name", "")\napp.use_state("last_name", "")\napp.use_state("full_name", "")\n\n# Computed state effect\ndef compute_full_name():\n    first = app.use_state("first_name")\n    last = app.use_state("last_name")\n    full = f"{first} {last}".strip()\n    app.set_state("full_name", full)\n\napp.use_effect(["first_name", "last_name"], compute_full_name)\n\n# Initialize computed state\ncompute_full_name()\n'})}),"\n",(0,s.jsx)(t.h3,{id:"state-validation",children:"State Validation"}),"\n",(0,s.jsx)(t.p,{children:"Add validation when updating state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def set_validated_age(age):\n    if isinstance(age, int) and 0 <= age <= 150:\n        app.set_state("user_age", age)\n        return True\n    else:\n        print(f"Invalid age: {age}")\n        return False\n\ndef set_validated_email(email):\n    if "@" in email and "." in email:\n        app.set_state("user_email", email)\n        return True\n    else:\n        print(f"Invalid email: {email}")\n        return False\n\n# Usage\nset_validated_age(25)  # \u2705 Valid\nset_validated_age(-5)  # \u274c Invalid, won\'t update state\n'})}),"\n",(0,s.jsx)(t.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,s.jsx)(t.p,{children:"Save and load state from files:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import json\nimport os\n\ndef save_app_state():\n    state_to_save = {\n        "user_preferences": app.use_state("user_preferences"),\n        "recent_files": app.use_state("recent_files"),\n        "window_settings": app.use_state("window_settings")\n    }\n    \n    with open("app_state.json", "w") as f:\n        json.dump(state_to_save, f)\n\ndef load_app_state():\n    if os.path.exists("app_state.json"):\n        with open("app_state.json", "r") as f:\n            saved_state = json.load(f)\n        \n        for key, value in saved_state.items():\n            app.set_state(key, value)\n\n# Load state on app start\nload_app_state()\n\n# Save state when important data changes\napp.use_effect(["user_preferences", "recent_files"], save_app_state)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"debugging-state",children:"Debugging State"}),"\n",(0,s.jsx)(t.h3,{id:"state-logging",children:"State Logging"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def log_all_state_changes():\n    # This would log all state changes (simplified)\n    print("State changed!")\n\n# Log specific state changes\ndef log_user_changes():\n    user_name = app.use_state("user_name")\n    user_email = app.use_state("user_email")\n    print(f"User info: {user_name} ({user_email})")\n\napp.use_effect(["user_name", "user_email"], log_user_changes)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"state-inspector",children:"State Inspector"}),"\n",(0,s.jsx)(t.p,{children:"Create a debug component to inspect current state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def create_state_inspector():\n    inspector_container = Container(className="bg-gray-100 p-4 rounded border-2 border-gray-300")\n    inspector_container.add(Text("State Inspector", className="font-bold text-lg"))\n    \n    # Add state displays\n    inspector_container.add(Text(f"Counter: {app.use_state(\'counter\')}", className="font-mono"))\n    inspector_container.add(Text(f"User: {app.use_state(\'user_name\')}", className="font-mono"))\n    inspector_container.add(Text(f"Todos: {len(app.use_state(\'todos\'))}", className="font-mono"))\n    \n    return inspector_container\n\n# Add to your main container during development\nif __name__ == "__main__":\n    # Add state inspector in development mode\n    main_container.add(create_state_inspector())\n'})}),"\n",(0,s.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(t.p,{children:"You now understand how to:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\u2705 Create and manage state with ",(0,s.jsx)(t.code,{children:"use_state()"})," and ",(0,s.jsx)(t.code,{children:"set_state()"})]}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Build reactive components that update automatically"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Use effects to handle side effects and computed state"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Implement complex state patterns like todo lists"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Follow best practices for state management"}),"\n",(0,s.jsx)(t.li,{children:"\u2705 Debug and inspect state changes"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./creating-layouts",children:"Creating Layouts"})," - Build complex UI layouts"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./styling",children:"Styling Guide"})," - Master Tailwind CSS styling"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./multiple-windows",children:"Multiple Windows"})," - Manage multiple windows"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"../api/state-management",children:"API Reference: State Management"})," - Detailed API documentation"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
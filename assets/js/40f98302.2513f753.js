"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[861],{21:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"api/state-management","title":"State Management","description":"OneForAll provides a powerful reactive state management system that automatically tracks dependencies and updates only the components that need to be refreshed when state changes.","source":"@site/docs/api/state-management.md","sourceDirName":"api","slug":"/api/state-management","permalink":"/docs/api/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/api/state-management.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/docs/api/components"},"next":{"title":"CLI Commands","permalink":"/docs/api/cli"}}');var s=n(7259),o=n(1197);const i={sidebar_position:4},d="State Management",l={},r=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"State Variables",id:"state-variables",level:3},{value:"Dependency Tracking",id:"dependency-tracking",level:3},{value:"Reactive Updates",id:"reactive-updates",level:3},{value:"State API",id:"state-api",level:2},{value:"<code>use_state(key, default=None)</code>",id:"use_statekey-defaultnone",level:3},{value:"<code>set_state(key, value)</code>",id:"set_statekey-value",level:3},{value:"<code>use_effect(key, callback)</code>",id:"use_effectkey-callback",level:3},{value:"State Patterns",id:"state-patterns",level:2},{value:"Simple Counter",id:"simple-counter",level:3},{value:"Todo List",id:"todo-list",level:3},{value:"User Profile Management",id:"user-profile-management",level:3},{value:"Advanced State Patterns",id:"advanced-state-patterns",level:2},{value:"Computed State",id:"computed-state",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"State Validation",id:"state-validation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Descriptive State Keys",id:"1-use-descriptive-state-keys",level:3},{value:"2. Initialize State Early",id:"2-initialize-state-early",level:3},{value:"3. Use Effects for Side Effects",id:"3-use-effects-for-side-effects",level:3},{value:"4. Avoid Direct State Mutation",id:"4-avoid-direct-state-mutation",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"state-management",children:"State Management"})}),"\n",(0,s.jsx)(t.p,{children:"OneForAll provides a powerful reactive state management system that automatically tracks dependencies and updates only the components that need to be refreshed when state changes."}),"\n",(0,s.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(t.h3,{id:"state-variables",children:"State Variables"}),"\n",(0,s.jsx)(t.p,{children:"State variables are key-value pairs that hold your application's data. When a state variable changes, all components that depend on it are automatically updated."}),"\n",(0,s.jsx)(t.h3,{id:"dependency-tracking",children:"Dependency Tracking"}),"\n",(0,s.jsxs)(t.p,{children:["OneForAll automatically tracks which components depend on which state variables. When you use ",(0,s.jsx)(t.code,{children:"app.use_state(key)"})," in a component, that component becomes dependent on that state key."]}),"\n",(0,s.jsx)(t.h3,{id:"reactive-updates",children:"Reactive Updates"}),"\n",(0,s.jsxs)(t.p,{children:["When you call ",(0,s.jsx)(t.code,{children:"app.set_state(key, value)"}),", OneForAll:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Updates the state value"}),"\n",(0,s.jsx)(t.li,{children:"Finds all components that depend on that state key"}),"\n",(0,s.jsx)(t.li,{children:"Re-renders only those components"}),"\n",(0,s.jsx)(t.li,{children:"Updates the UI efficiently"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"state-api",children:"State API"}),"\n",(0,s.jsx)(t.h3,{id:"use_statekey-defaultnone",children:(0,s.jsx)(t.code,{children:"use_state(key, default=None)"})}),"\n",(0,s.jsx)(t.p,{children:"Creates or retrieves a state variable."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"key"})," (str): Unique identifier for the state variable"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"default"})," (any, optional): Default value if state doesn't exist"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Current value of the state variable"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Initialize state with default value\ncount = app.use_state("count", 0)\nuser_name = app.use_state("user_name", "Anonymous")\nitems = app.use_state("todo_items", [])\n\n# Retrieve existing state\ncurrent_count = app.use_state("count")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"set_statekey-value",children:(0,s.jsx)(t.code,{children:"set_state(key, value)"})}),"\n",(0,s.jsx)(t.p,{children:"Updates a state variable and triggers reactive updates."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"key"})," (str): State key to update"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"value"})," (any): New value for the state"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Update simple values\napp.set_state("count", 42)\napp.set_state("user_name", "John Doe")\n\n# Update complex data structures\napp.set_state("user_profile", {\n    "name": "Jane Smith",\n    "email": "jane@example.com",\n    "age": 30\n})\n\napp.set_state("todo_items", [\n    {"id": 1, "text": "Learn OneForAll", "completed": False},\n    {"id": 2, "text": "Build an app", "completed": True}\n])\n'})}),"\n",(0,s.jsx)(t.h3,{id:"use_effectkey-callback",children:(0,s.jsx)(t.code,{children:"use_effect(key, callback)"})}),"\n",(0,s.jsx)(t.p,{children:"Registers a callback function that runs when specified state changes."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"key"})," (str or list): State key(s) to watch"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"callback"})," (function): Function to call when state changes"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Watch single state key\ndef on_count_change():\n    count = app.use_state("count")\n    print(f"Count changed to: {count}")\n\napp.use_effect("count", on_count_change)\n\n# Watch multiple state keys\ndef on_user_data_change():\n    name = app.use_state("user_name")\n    email = app.use_state("user_email")\n    print(f"User data changed: {name} ({email})")\n\napp.use_effect(["user_name", "user_email"], on_user_data_change)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"state-patterns",children:"State Patterns"}),"\n",(0,s.jsx)(t.h3,{id:"simple-counter",children:"Simple Counter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Window, Text, Button, Container\n\napp = App()\n\n# Initialize counter state\napp.use_state("counter", 0)\n\ndef increment():\n    current = app.use_state("counter")\n    app.set_state("counter", current + 1)\n\ndef decrement():\n    current = app.use_state("counter")\n    app.set_state("counter", current - 1)\n\ndef reset():\n    app.set_state("counter", 0)\n\n# Create UI\nwindow = Window(title="Counter App")\ncontainer = Container(className="p-4 space-y-4 text-center")\n\n# Counter display (automatically updates when state changes)\ncounter_display = Text(\n    f"Count: {app.use_state(\'counter\')}", \n    className="text-2xl font-bold"\n)\ncontainer.add(counter_display)\n\n# Buttons\nbutton_container = Container(className="flex space-x-2 justify-center")\nbutton_container.add(Button("\u2212", on_click=decrement, className="bg-red-500 text-white px-4 py-2 rounded"))\nbutton_container.add(Button("Reset", on_click=reset, className="bg-gray-500 text-white px-4 py-2 rounded"))\nbutton_container.add(Button("+", on_click=increment, className="bg-green-500 text-white px-4 py-2 rounded"))\n\ncontainer.add(button_container)\nwindow.add_child(container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(t.h3,{id:"todo-list",children:"Todo List"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Window, Text, Button, Container\n\napp = App()\n\n# Initialize todo state\napp.use_state("todos", [])\napp.use_state("new_todo", "")\n\ndef add_todo():\n    new_todo_text = app.use_state("new_todo")\n    if new_todo_text.strip():\n        current_todos = app.use_state("todos")\n        new_todo = {\n            "id": len(current_todos) + 1,\n            "text": new_todo_text,\n            "completed": False\n        }\n        app.set_state("todos", current_todos + [new_todo])\n        app.set_state("new_todo", "")\n\ndef toggle_todo(todo_id):\n    todos = app.use_state("todos")\n    updated_todos = []\n    for todo in todos:\n        if todo["id"] == todo_id:\n            todo["completed"] = not todo["completed"]\n        updated_todos.append(todo)\n    app.set_state("todos", updated_todos)\n\ndef delete_todo(todo_id):\n    todos = app.use_state("todos")\n    updated_todos = [todo for todo in todos if todo["id"] != todo_id]\n    app.set_state("todos", updated_todos)\n\n# Create UI\nwindow = Window(title="Todo App", size=(500, 600))\nmain_container = Container(className="p-4 space-y-4")\n\n# Header\nmain_container.add(Text("Todo List", className="text-2xl font-bold text-center"))\n\n# Add todo section\nadd_section = Container(className="flex space-x-2")\n# Note: Input component would need to be implemented\nadd_section.add(Button("Add Todo", on_click=add_todo, className="bg-blue-500 text-white px-4 py-2 rounded"))\nmain_container.add(add_section)\n\n# Todo list (this would be dynamically generated based on state)\ntodos_container = Container(className="space-y-2")\n\n# Effect to update todo list when todos change\ndef update_todo_list():\n    todos = app.use_state("todos")\n    todos_container.clear_children()\n    \n    for todo in todos:\n        todo_item = Container(className="flex items-center justify-between p-2 border rounded")\n        \n        # Todo text\n        text_class = "line-through text-gray-500" if todo["completed"] else ""\n        todo_item.add(Text(todo["text"], className=text_class))\n        \n        # Buttons\n        button_container = Container(className="flex space-x-1")\n        \n        toggle_btn = Button(\n            "\u2713" if todo["completed"] else "\u25cb",\n            on_click=lambda tid=todo["id"]: toggle_todo(tid),\n            className="bg-green-500 text-white px-2 py-1 rounded text-sm"\n        )\n        button_container.add(toggle_btn)\n        \n        delete_btn = Button(\n            "\u2717",\n            on_click=lambda tid=todo["id"]: delete_todo(tid),\n            className="bg-red-500 text-white px-2 py-1 rounded text-sm"\n        )\n        button_container.add(delete_btn)\n        \n        todo_item.add(button_container)\n        todos_container.add(todo_item)\n\napp.use_effect("todos", update_todo_list)\n\nmain_container.add(todos_container)\nwindow.add_child(main_container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(t.h3,{id:"user-profile-management",children:"User Profile Management"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Window, Text, Button, Container\n\napp = App()\n\n# Initialize user profile state\napp.use_state("user_profile", {\n    "name": "",\n    "email": "",\n    "age": 0,\n    "bio": ""\n})\n\napp.use_state("edit_mode", False)\n\ndef toggle_edit_mode():\n    current_mode = app.use_state("edit_mode")\n    app.set_state("edit_mode", not current_mode)\n\ndef update_profile_field(field, value):\n    profile = app.use_state("user_profile")\n    updated_profile = profile.copy()\n    updated_profile[field] = value\n    app.set_state("user_profile", updated_profile)\n\ndef save_profile():\n    # In a real app, you\'d save to a database here\n    print("Profile saved!")\n    app.set_state("edit_mode", False)\n\n# Create UI\nwindow = Window(title="User Profile", size=(400, 500))\ncontainer = Container(className="p-4 space-y-4")\n\n# Header\ncontainer.add(Text("User Profile", className="text-2xl font-bold text-center"))\n\n# Profile display/edit section\nprofile_container = Container(className="space-y-3")\n\n# Effect to update profile display when state changes\ndef update_profile_display():\n    profile = app.use_state("user_profile")\n    edit_mode = app.use_state("edit_mode")\n    \n    profile_container.clear_children()\n    \n    if edit_mode:\n        # Edit mode - show form inputs (simplified)\n        profile_container.add(Text("Name:", className="font-semibold"))\n        # Note: Input components would need to be implemented\n        profile_container.add(Text(f"Current: {profile[\'name\']}", className="text-sm text-gray-600"))\n        \n        profile_container.add(Text("Email:", className="font-semibold"))\n        profile_container.add(Text(f"Current: {profile[\'email\']}", className="text-sm text-gray-600"))\n        \n        # Save button\n        profile_container.add(Button(\n            "Save Changes",\n            on_click=save_profile,\n            className="bg-green-500 text-white px-4 py-2 rounded"\n        ))\n    else:\n        # View mode - show profile data\n        profile_container.add(Text(f"Name: {profile[\'name\'] or \'Not set\'}", className="text-lg"))\n        profile_container.add(Text(f"Email: {profile[\'email\'] or \'Not set\'}", className="text-lg"))\n        profile_container.add(Text(f"Age: {profile[\'age\'] or \'Not set\'}", className="text-lg"))\n        profile_container.add(Text(f"Bio: {profile[\'bio\'] or \'Not set\'}", className="text-lg"))\n\napp.use_effect(["user_profile", "edit_mode"], update_profile_display)\n\ncontainer.add(profile_container)\n\n# Toggle edit button\nedit_button = Button(\n    "Edit Profile",\n    on_click=toggle_edit_mode,\n    className="bg-blue-500 text-white px-4 py-2 rounded"\n)\ncontainer.add(edit_button)\n\nwindow.add_child(container)\napp.append(window)\napp.run()\n'})}),"\n",(0,s.jsx)(t.h2,{id:"advanced-state-patterns",children:"Advanced State Patterns"}),"\n",(0,s.jsx)(t.h3,{id:"computed-state",children:"Computed State"}),"\n",(0,s.jsx)(t.p,{children:"You can create computed values that automatically update when their dependencies change:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Base state\napp.use_state("first_name", "John")\napp.use_state("last_name", "Doe")\n\n# Computed full name\ndef update_full_name():\n    first = app.use_state("first_name")\n    last = app.use_state("last_name")\n    full_name = f"{first} {last}".strip()\n    app.set_state("full_name", full_name)\n\napp.use_effect(["first_name", "last_name"], update_full_name)\n\n# Initialize computed state\nupdate_full_name()\n\n# Now full_name will automatically update when first_name or last_name changes\n'})}),"\n",(0,s.jsx)(t.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,s.jsx)(t.p,{children:"You can persist state to local storage or files:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import json\nimport os\n\ndef save_state_to_file():\n    state_data = {\n        "user_preferences": app.use_state("user_preferences"),\n        "recent_files": app.use_state("recent_files"),\n        "window_position": app.use_state("window_position")\n    }\n    \n    with open("app_state.json", "w") as f:\n        json.dump(state_data, f)\n\ndef load_state_from_file():\n    if os.path.exists("app_state.json"):\n        with open("app_state.json", "r") as f:\n            state_data = json.load(f)\n            \n        for key, value in state_data.items():\n            app.set_state(key, value)\n\n# Load state on app start\nload_state_from_file()\n\n# Save state when important data changes\napp.use_effect(["user_preferences", "recent_files"], save_state_to_file)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"state-validation",children:"State Validation"}),"\n",(0,s.jsx)(t.p,{children:"You can add validation when setting state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def set_validated_state(key, value, validator=None):\n    if validator and not validator(value):\n        print(f"Invalid value for {key}: {value}")\n        return False\n    \n    app.set_state(key, value)\n    return True\n\n# Validators\ndef validate_email(email):\n    return "@" in email and "." in email\n\ndef validate_age(age):\n    return isinstance(age, int) and 0 <= age <= 150\n\n# Usage\nset_validated_state("user_email", "user@example.com", validate_email)\nset_validated_state("user_age", 25, validate_age)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(t.h3,{id:"1-use-descriptive-state-keys",children:"1. Use Descriptive State Keys"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good\napp.use_state("user_profile_name", "")\napp.use_state("shopping_cart_items", [])\napp.use_state("is_loading_data", False)\n\n# \u274c Bad\napp.use_state("name", "")\napp.use_state("items", [])\napp.use_state("loading", False)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"2-initialize-state-early",children:"2. Initialize State Early"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Initialize all state at app startup\napp.use_state("counter", 0)\napp.use_state("user_name", "Guest")\napp.use_state("settings", {"theme": "light"})\n\n# Create UI components that use the state\n'})}),"\n",(0,s.jsx)(t.h3,{id:"3-use-effects-for-side-effects",children:"3. Use Effects for Side Effects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Use effects for logging, API calls, etc.\ndef log_counter_changes():\n    count = app.use_state("counter")\n    print(f"Counter changed to: {count}")\n\napp.use_effect("counter", log_counter_changes)\n\n# \u2705 Good - Use effects for derived state\ndef update_counter_display():\n    count = app.use_state("counter")\n    display_text = f"Count: {count} ({\'even\' if count % 2 == 0 else \'odd\'})"\n    app.set_state("counter_display", display_text)\n\napp.use_effect("counter", update_counter_display)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"4-avoid-direct-state-mutation",children:"4. Avoid Direct State Mutation"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# \u2705 Good - Create new objects/arrays\ncurrent_items = app.use_state("items")\nnew_items = current_items + [new_item]\napp.set_state("items", new_items)\n\n# \u274c Bad - Don\'t mutate state directly\ncurrent_items = app.use_state("items")\ncurrent_items.append(new_item)  # This won\'t trigger updates\n'})}),"\n",(0,s.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./app",children:"App"})," - Main application class with state methods"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"./components",children:"Components"})," - How components interact with state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"../tutorial-basics/state-management",children:"Tutorial: State Management"})," - Step-by-step state tutorial"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1197:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(6363);const s={},o=a.createContext(s);function i(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);
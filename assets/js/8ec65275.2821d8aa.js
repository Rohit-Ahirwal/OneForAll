"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[528],{1197:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>s});var a=t(6363);const o={},i=a.createContext(o);function d(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:d(n.components),a.createElement(i.Provider,{value:e},n.children)}},5283:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>w,frontMatter:()=>d,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorial-basics/multiple-windows","title":"Multiple Windows","description":"OneForAll supports creating applications with multiple windows, allowing you to build complex desktop applications with separate windows for different purposes. This tutorial covers everything you need to know about working with multiple windows.","source":"@site/docs/tutorial-basics/multiple-windows.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/multiple-windows","permalink":"/docs/tutorial-basics/multiple-windows","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/tutorial-basics/multiple-windows.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Styling with Tailwind CSS","permalink":"/docs/tutorial-basics/styling"},"next":{"title":"App","permalink":"/docs/api/app"}}');var o=t(7259),i=t(1197);const d={sidebar_position:5},s="Multiple Windows",r={},l=[{value:"Basic Multiple Windows",id:"basic-multiple-windows",level:2},{value:"Creating Multiple Windows",id:"creating-multiple-windows",level:3},{value:"Window Management",id:"window-management",level:3},{value:"Window Communication",id:"window-communication",level:2},{value:"Shared State Between Windows",id:"shared-state-between-windows",level:3},{value:"Event-Based Communication",id:"event-based-communication",level:3},{value:"Window Positioning and Sizing",id:"window-positioning-and-sizing",level:2},{value:"Programmatic Window Control",id:"programmatic-window-control",level:3},{value:"Modal and Dialog Windows",id:"modal-and-dialog-windows",level:2},{value:"Creating Modal-like Windows",id:"creating-modal-like-windows",level:3},{value:"Window Lifecycle Management",id:"window-lifecycle-management",level:2},{value:"Advanced Window Management",id:"advanced-window-management",level:3},{value:"Best Practices for Multiple Windows",id:"best-practices-for-multiple-windows",level:2},{value:"1. Window State Management",id:"1-window-state-management",level:3},{value:"2. Consistent Window Styling",id:"2-consistent-window-styling",level:3},{value:"3. Proper Window Cleanup",id:"3-proper-window-cleanup",level:3},{value:"4. Window Communication Patterns",id:"4-window-communication-patterns",level:3},{value:"Complete Multiple Windows Example",id:"complete-multiple-windows-example",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"multiple-windows",children:"Multiple Windows"})}),"\n",(0,o.jsx)(e.p,{children:"OneForAll supports creating applications with multiple windows, allowing you to build complex desktop applications with separate windows for different purposes. This tutorial covers everything you need to know about working with multiple windows."}),"\n",(0,o.jsx)(e.h2,{id:"basic-multiple-windows",children:"Basic Multiple Windows"}),"\n",(0,o.jsx)(e.h3,{id:"creating-multiple-windows",children:"Creating Multiple Windows"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# Create main window\nmain_window = Window(title="Main Window", size=(600, 400))\nmain_container = Container(className="p-6")\nmain_container.add(Text("This is the main window", className="text-2xl font-bold mb-4"))\nmain_container.add(Text("You can create multiple windows in OneForAll", className="text-gray-600"))\nmain_window.add_child(main_container)\n\n# Create secondary window\nsecondary_window = Window(title="Secondary Window", size=(400, 300))\nsecondary_container = Container(className="p-6 bg-blue-50")\nsecondary_container.add(Text("Secondary Window", className="text-xl font-bold mb-4 text-blue-800"))\nsecondary_container.add(Text("This is a separate window", className="text-blue-600"))\nsecondary_window.add_child(secondary_container)\n\n# Add both windows to the app\napp.append(main_window)\napp.append(secondary_window)\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h3,{id:"window-management",children:"Window Management"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# Initialize state for window management\napp.use_state("windows_created", 0)\napp.use_state("secondary_visible", True)\n\n# Main window\nmain_window = Window(title="Window Manager", size=(500, 400))\nmain_container = Container(className="p-6 space-y-4")\n\n# Window counter\ncounter_text = Text(\n    f"Windows created: {app.use_state(\'windows_created\')}", \n    className="text-lg font-medium"\n)\nmain_container.add(counter_text)\n\n# Create new window button\ndef create_new_window():\n    count = app.use_state("windows_created") + 1\n    app.set_state("windows_created", count)\n    \n    # Create new window\n    new_window = Window(title=f"Window {count}", size=(300, 200))\n    new_container = Container(className="p-4 bg-green-50")\n    new_container.add(Text(f"Window #{count}", className="text-lg font-bold text-green-800"))\n    new_container.add(Text("This is a dynamically created window", className="text-green-600"))\n    new_window.add_child(new_container)\n    \n    # Add to app\n    app.append(new_window)\n\ncreate_button = Button(\n    "Create New Window", \n    on_click=create_new_window,\n    className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded"\n)\nmain_container.add(create_button)\n\nmain_window.add_child(main_container)\napp.append(main_window)\n\n# Secondary window (can be toggled)\nsecondary_window = Window(title="Toggleable Window", size=(350, 250))\nsecondary_container = Container(className="p-4 bg-purple-50")\nsecondary_container.add(Text("Toggleable Window", className="text-lg font-bold text-purple-800"))\nsecondary_container.add(Text("This window can be shown/hidden", className="text-purple-600"))\n\n# Toggle button in secondary window\ndef hide_secondary():\n    app.set_state("secondary_visible", False)\n    secondary_window.hide()\n\nhide_button = Button(\n    "Hide This Window", \n    on_click=hide_secondary,\n    className="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded mt-4"\n)\nsecondary_container.add(hide_button)\nsecondary_window.add_child(secondary_container)\n\n# Show/hide toggle in main window\ndef toggle_secondary():\n    visible = app.use_state("secondary_visible")\n    if visible:\n        secondary_window.hide()\n        app.set_state("secondary_visible", False)\n    else:\n        secondary_window.show()\n        app.set_state("secondary_visible", True)\n\ntoggle_button = Button(\n    f"{\'Hide\' if app.use_state(\'secondary_visible\') else \'Show\'} Secondary Window",\n    on_click=toggle_secondary,\n    className="bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded"\n)\nmain_container.add(toggle_button)\n\napp.append(secondary_window)\napp.run()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"window-communication",children:"Window Communication"}),"\n",(0,o.jsx)(e.h3,{id:"shared-state-between-windows",children:"Shared State Between Windows"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# Shared state\napp.use_state("shared_counter", 0)\napp.use_state("shared_message", "Hello from shared state!")\n\n# Window 1 - Counter Controller\nwindow1 = Window(title="Counter Controller", size=(400, 300))\ncontainer1 = Container(className="p-6 space-y-4")\n\ncontainer1.add(Text("Counter Controller", className="text-xl font-bold mb-4"))\ncontainer1.add(Text(f"Current count: {app.use_state(\'shared_counter\')}", className="text-lg"))\n\ndef increment_counter():\n    current = app.use_state("shared_counter")\n    app.set_state("shared_counter", current + 1)\n\ndef decrement_counter():\n    current = app.use_state("shared_counter")\n    app.set_state("shared_counter", current - 1)\n\ndef reset_counter():\n    app.set_state("shared_counter", 0)\n\nbutton_container = Container(className="flex space-x-2")\nbutton_container.add(Button(\n    "+", \n    on_click=increment_counter,\n    className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded"\n))\nbutton_container.add(Button(\n    "-", \n    on_click=decrement_counter,\n    className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"\n))\nbutton_container.add(Button(\n    "Reset", \n    on_click=reset_counter,\n    className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded"\n))\n\ncontainer1.add(button_container)\nwindow1.add_child(container1)\n\n# Window 2 - Counter Display\nwindow2 = Window(title="Counter Display", size=(400, 300))\ncontainer2 = Container(className="p-6 space-y-4 bg-blue-50")\n\ncontainer2.add(Text("Counter Display", className="text-xl font-bold mb-4 text-blue-800"))\n\n# Large counter display\ncounter_display = Container(className="bg-white p-8 rounded-lg shadow-md text-center")\ncounter_display.add(Text(\n    str(app.use_state("shared_counter")), \n    className="text-6xl font-bold text-blue-600"\n))\ncontainer2.add(counter_display)\n\n# Status message\nstatus_text = "Even" if app.use_state("shared_counter") % 2 == 0 else "Odd"\ncontainer2.add(Text(f"Status: {status_text}", className="text-lg text-blue-700"))\n\nwindow2.add_child(container2)\n\n# Window 3 - Message Editor\nwindow3 = Window(title="Message Editor", size=(450, 250))\ncontainer3 = Container(className="p-6 space-y-4 bg-green-50")\n\ncontainer3.add(Text("Message Editor", className="text-xl font-bold mb-4 text-green-800"))\ncontainer3.add(Text(f"Current message: {app.use_state(\'shared_message\')}", className="text-green-700"))\n\ndef update_message(new_message):\n    def handler():\n        app.set_state("shared_message", new_message)\n    return handler\n\nmessage_buttons = Container(className="space-y-2")\nmessages = [\n    "Hello from shared state!",\n    "Counter updated!",\n    "Multiple windows are awesome!",\n    "OneForAll rocks!"\n]\n\nfor message in messages:\n    message_buttons.add(Button(\n        message,\n        on_click=update_message(message),\n        className="w-full text-left bg-white hover:bg-green-100 text-green-800 font-medium py-2 px-4 rounded border border-green-200"\n    ))\n\ncontainer3.add(message_buttons)\nwindow3.add_child(container3)\n\n# Add all windows\napp.append(window1)\napp.append(window2)\napp.append(window3)\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h3,{id:"event-based-communication",children:"Event-Based Communication"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# Event state\napp.use_state("last_event", "No events yet")\napp.use_state("event_count", 0)\napp.use_state("event_history", [])\n\ndef broadcast_event(event_name, source_window):\n    def handler():\n        # Update event state\n        app.set_state("last_event", f"{event_name} from {source_window}")\n        app.set_state("event_count", app.use_state("event_count") + 1)\n        \n        # Add to history\n        history = app.use_state("event_history").copy()\n        history.append(f"{event_name} from {source_window}")\n        if len(history) > 5:  # Keep only last 5 events\n            history = history[-5:]\n        app.set_state("event_history", history)\n    \n    return handler\n\n# Event Broadcaster Window\nbroadcaster_window = Window(title="Event Broadcaster", size=(400, 350))\nbroadcaster_container = Container(className="p-6 space-y-4")\n\nbroadcaster_container.add(Text("Event Broadcaster", className="text-xl font-bold mb-4"))\nbroadcaster_container.add(Text("Click buttons to broadcast events:", className="text-gray-600 mb-4"))\n\nevents = [\n    ("User Login", "bg-blue-500 hover:bg-blue-600"),\n    ("Data Updated", "bg-green-500 hover:bg-green-600"),\n    ("Error Occurred", "bg-red-500 hover:bg-red-600"),\n    ("Task Completed", "bg-purple-500 hover:bg-purple-600"),\n]\n\nfor event_name, button_class in events:\n    broadcaster_container.add(Button(\n        event_name,\n        on_click=broadcast_event(event_name, "Broadcaster"),\n        className=f"{button_class} text-white font-medium py-2 px-4 rounded w-full"\n    ))\n\nbroadcaster_window.add_child(broadcaster_container)\n\n# Event Monitor Window\nmonitor_window = Window(title="Event Monitor", size=(450, 400))\nmonitor_container = Container(className="p-6 space-y-4 bg-gray-50")\n\nmonitor_container.add(Text("Event Monitor", className="text-xl font-bold mb-4"))\n\n# Current event display\ncurrent_event_card = Container(className="bg-white p-4 rounded-lg shadow-md")\ncurrent_event_card.add(Text("Last Event:", className="text-sm text-gray-600"))\ncurrent_event_card.add(Text(app.use_state("last_event"), className="text-lg font-medium"))\nmonitor_container.add(current_event_card)\n\n# Event count\ncount_card = Container(className="bg-blue-100 p-4 rounded-lg")\ncount_card.add(Text("Total Events:", className="text-sm text-blue-600"))\ncount_card.add(Text(str(app.use_state("event_count")), className="text-2xl font-bold text-blue-800"))\nmonitor_container.add(count_card)\n\n# Event history\nhistory_card = Container(className="bg-white p-4 rounded-lg shadow-md")\nhistory_card.add(Text("Recent Events:", className="text-sm text-gray-600 mb-2"))\n\nhistory_list = Container(className="space-y-1")\nfor event in app.use_state("event_history"):\n    history_list.add(Text(f"\u2022 {event}", className="text-sm text-gray-700"))\n\nif not app.use_state("event_history"):\n    history_list.add(Text("No events yet", className="text-sm text-gray-400 italic"))\n\nhistory_card.add(history_list)\nmonitor_container.add(history_card)\n\nmonitor_window.add_child(monitor_container)\n\n# Control Panel Window\ncontrol_window = Window(title="Control Panel", size=(350, 300))\ncontrol_container = Container(className="p-6 space-y-4 bg-yellow-50")\n\ncontrol_container.add(Text("Control Panel", className="text-xl font-bold mb-4 text-yellow-800"))\n\ndef clear_events():\n    app.set_state("last_event", "Events cleared")\n    app.set_state("event_count", 0)\n    app.set_state("event_history", [])\n\ndef send_system_event():\n    broadcast_event("System Check", "Control Panel")()\n\ncontrol_buttons = Container(className="space-y-2")\ncontrol_buttons.add(Button(\n    "Clear All Events",\n    on_click=clear_events,\n    className="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded w-full"\n))\ncontrol_buttons.add(Button(\n    "Send System Event",\n    on_click=send_system_event,\n    className="bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-2 px-4 rounded w-full"\n))\n\ncontrol_container.add(control_buttons)\n\n# System status\nstatus_card = Container(className="bg-white p-4 rounded-lg shadow-md")\nstatus_card.add(Text("System Status:", className="text-sm text-gray-600"))\nstatus_text = "Active" if app.use_state("event_count") > 0 else "Idle"\nstatus_color = "text-green-600" if app.use_state("event_count") > 0 else "text-gray-600"\nstatus_card.add(Text(status_text, className=f"text-lg font-medium {status_color}"))\ncontrol_container.add(status_card)\n\ncontrol_window.add_child(control_container)\n\n# Add all windows\napp.append(broadcaster_window)\napp.append(monitor_window)\napp.append(control_window)\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"window-positioning-and-sizing",children:"Window Positioning and Sizing"}),"\n",(0,o.jsx)(e.h3,{id:"programmatic-window-control",children:"Programmatic Window Control"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# State for window properties\napp.use_state("target_window_size", (400, 300))\napp.use_state("target_window_position", (100, 100))\n\n# Main control window\ncontrol_window = Window(title="Window Controller", size=(500, 600))\ncontrol_container = Container(className="p-6 space-y-6")\n\ncontrol_container.add(Text("Window Controller", className="text-2xl font-bold mb-4"))\n\n# Target window (the one we\'ll control)\ntarget_window = Window(title="Controlled Window", size=(400, 300))\ntarget_container = Container(className="p-6 bg-gradient-to-br from-purple-100 to-pink-100")\ntarget_container.add(Text("Controlled Window", className="text-xl font-bold text-purple-800 mb-2"))\ntarget_container.add(Text("This window is controlled by the controller", className="text-purple-600"))\n\n# Window state display\nstate_display = Container(className="bg-white p-4 rounded-lg shadow-md")\nstate_display.add(Text("Current Window State:", className="text-lg font-bold mb-2"))\nstate_display.add(Text(f"Size: {target_window.size}", className="text-gray-700"))\nstate_display.add(Text(f"Position: {target_window.position}", className="text-gray-700"))\ntarget_container.add(state_display)\n\ntarget_window.add_child(target_container)\n\n# Size controls\nsize_section = Container(className="bg-gray-50 p-4 rounded-lg")\nsize_section.add(Text("Size Controls", className="text-lg font-bold mb-3"))\n\nsize_buttons = Container(className="grid grid-cols-2 gap-2")\nsizes = [\n    ("Small", (300, 200)),\n    ("Medium", (500, 400)),\n    ("Large", (700, 500)),\n    ("Wide", (800, 300)),\n]\n\nfor label, size in sizes:\n    def resize_window(new_size):\n        def handler():\n            target_window.size = new_size\n            app.set_state("target_window_size", new_size)\n        return handler\n    \n    size_buttons.add(Button(\n        f"{label} {size[0]}x{size[1]}",\n        on_click=resize_window(size),\n        className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-3 rounded text-sm"\n    ))\n\nsize_section.add(size_buttons)\ncontrol_container.add(size_section)\n\n# Position controls\nposition_section = Container(className="bg-gray-50 p-4 rounded-lg")\nposition_section.add(Text("Position Controls", className="text-lg font-bold mb-3"))\n\nposition_buttons = Container(className="grid grid-cols-3 gap-2")\npositions = [\n    ("Top Left", (50, 50)),\n    ("Top Center", (400, 50)),\n    ("Top Right", (750, 50)),\n    ("Center Left", (50, 300)),\n    ("Center", (400, 300)),\n    ("Center Right", (750, 300)),\n    ("Bottom Left", (50, 550)),\n    ("Bottom Center", (400, 550)),\n    ("Bottom Right", (750, 550)),\n]\n\nfor label, position in positions:\n    def move_window(new_position):\n        def handler():\n            target_window.position = new_position\n            app.set_state("target_window_position", new_position)\n        return handler\n    \n    position_buttons.add(Button(\n        label,\n        on_click=move_window(position),\n        className="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-2 rounded text-xs"\n    ))\n\nposition_section.add(position_buttons)\ncontrol_container.add(position_section)\n\n# Window state controls\nstate_section = Container(className="bg-gray-50 p-4 rounded-lg")\nstate_section.add(Text("Window State Controls", className="text-lg font-bold mb-3"))\n\nstate_buttons = Container(className="grid grid-cols-2 gap-2")\n\ndef minimize_window():\n    target_window.minimize()\n\ndef maximize_window():\n    target_window.maximize()\n\ndef restore_window():\n    target_window.restore()\n\ndef hide_window():\n    target_window.hide()\n\ndef show_window():\n    target_window.show()\n\ndef close_window():\n    target_window.close()\n\nstate_actions = [\n    ("Minimize", minimize_window, "bg-yellow-500 hover:bg-yellow-600"),\n    ("Maximize", maximize_window, "bg-blue-500 hover:bg-blue-600"),\n    ("Restore", restore_window, "bg-green-500 hover:bg-green-600"),\n    ("Hide", hide_window, "bg-orange-500 hover:bg-orange-600"),\n    ("Show", show_window, "bg-purple-500 hover:bg-purple-600"),\n    ("Close", close_window, "bg-red-500 hover:bg-red-600"),\n]\n\nfor label, action, button_class in state_actions:\n    state_buttons.add(Button(\n        label,\n        on_click=action,\n        className=f"{button_class} text-white font-medium py-2 px-4 rounded"\n    ))\n\nstate_section.add(state_buttons)\ncontrol_container.add(state_section)\n\ncontrol_window.add_child(control_container)\n\n# Add windows to app\napp.append(control_window)\napp.append(target_window)\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"modal-and-dialog-windows",children:"Modal and Dialog Windows"}),"\n",(0,o.jsx)(e.h3,{id:"creating-modal-like-windows",children:"Creating Modal-like Windows"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# State for modal management\napp.use_state("modal_visible", False)\napp.use_state("modal_type", "info")\napp.use_state("modal_message", "")\n\n# Main application window\nmain_window = Window(title="Modal Demo", size=(600, 400))\nmain_container = Container(className="p-6 space-y-4")\n\nmain_container.add(Text("Modal Dialog Demo", className="text-2xl font-bold mb-4"))\nmain_container.add(Text("Click buttons to show different types of modal dialogs:", className="text-gray-600 mb-4"))\n\n# Modal trigger buttons\nmodal_buttons = Container(className="space-y-2")\n\ndef show_modal(modal_type, message):\n    def handler():\n        app.set_state("modal_type", modal_type)\n        app.set_state("modal_message", message)\n        app.set_state("modal_visible", True)\n        modal_window.show()\n    return handler\n\nmodal_types = [\n    ("Info", "info", "This is an information dialog", "bg-blue-500 hover:bg-blue-600"),\n    ("Warning", "warning", "This is a warning dialog", "bg-yellow-500 hover:bg-yellow-600"),\n    ("Error", "error", "This is an error dialog", "bg-red-500 hover:bg-red-600"),\n    ("Success", "success", "Operation completed successfully!", "bg-green-500 hover:bg-green-600"),\n]\n\nfor label, modal_type, message, button_class in modal_types:\n    modal_buttons.add(Button(\n        f"Show {label} Modal",\n        on_click=show_modal(modal_type, message),\n        className=f"{button_class} text-white font-medium py-2 px-4 rounded w-full"\n    ))\n\nmain_container.add(modal_buttons)\nmain_window.add_child(main_container)\n\n# Modal window\nmodal_window = Window(title="Dialog", size=(400, 250))\n\ndef create_modal_content():\n    modal_type = app.use_state("modal_type")\n    message = app.use_state("modal_message")\n    \n    # Color schemes for different modal types\n    color_schemes = {\n        "info": {"bg": "bg-blue-50", "text": "text-blue-800", "icon": "\u2139\ufe0f", "button": "bg-blue-500 hover:bg-blue-600"},\n        "warning": {"bg": "bg-yellow-50", "text": "text-yellow-800", "icon": "\u26a0\ufe0f", "button": "bg-yellow-500 hover:bg-yellow-600"},\n        "error": {"bg": "bg-red-50", "text": "text-red-800", "icon": "\u274c", "button": "bg-red-500 hover:bg-red-600"},\n        "success": {"bg": "bg-green-50", "text": "text-green-800", "icon": "\u2705", "button": "bg-green-500 hover:bg-green-600"},\n    }\n    \n    scheme = color_schemes.get(modal_type, color_schemes["info"])\n    \n    modal_container = Container(className=f"p-6 {scheme[\'bg\']} h-full flex flex-col justify-between")\n    \n    # Header with icon and title\n    header = Container(className="text-center mb-4")\n    header.add(Text(scheme["icon"], className="text-4xl mb-2"))\n    header.add(Text(modal_type.title(), className=f"text-xl font-bold {scheme[\'text\']}"))\n    modal_container.add(header)\n    \n    # Message\n    message_container = Container(className="flex-1 flex items-center justify-center")\n    message_container.add(Text(message, className=f"text-center {scheme[\'text\']}"))\n    modal_container.add(message_container)\n    \n    # Buttons\n    button_container = Container(className="flex justify-center space-x-3")\n    \n    def close_modal():\n        app.set_state("modal_visible", False)\n        modal_window.hide()\n    \n    button_container.add(Button(\n        "OK",\n        on_click=close_modal,\n        className=f"{scheme[\'button\']} text-white font-medium py-2 px-6 rounded"\n    ))\n    \n    if modal_type in ["warning", "error"]:\n        button_container.add(Button(\n            "Cancel",\n            on_click=close_modal,\n            className="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-6 rounded"\n        ))\n    \n    modal_container.add(button_container)\n    \n    return modal_container\n\n# Initially hide modal\nmodal_window.add_child(create_modal_content())\n\n# Add windows to app\napp.append(main_window)\napp.append(modal_window)\n\n# Initially hide modal window\nmodal_window.hide()\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"window-lifecycle-management",children:"Window Lifecycle Management"}),"\n",(0,o.jsx)(e.h3,{id:"advanced-window-management",children:"Advanced Window Management"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# Window registry state\napp.use_state("window_registry", {})\napp.use_state("next_window_id", 1)\n\nclass WindowManager:\n    def __init__(self, app):\n        self.app = app\n    \n    def create_window(self, window_type, title, size=(400, 300)):\n        window_id = self.app.use_state("next_window_id")\n        self.app.set_state("next_window_id", window_id + 1)\n        \n        # Create window based on type\n        if window_type == "text_editor":\n            window = self.create_text_editor_window(title, size, window_id)\n        elif window_type == "calculator":\n            window = self.create_calculator_window(title, size, window_id)\n        elif window_type == "settings":\n            window = self.create_settings_window(title, size, window_id)\n        else:\n            window = self.create_generic_window(title, size, window_id)\n        \n        # Register window\n        registry = self.app.use_state("window_registry").copy()\n        registry[window_id] = {\n            "window": window,\n            "type": window_type,\n            "title": title,\n            "created_at": "now",  # In real app, use datetime\n            "visible": True\n        }\n        self.app.set_state("window_registry", registry)\n        \n        # Add to app\n        self.app.append(window)\n        \n        return window_id\n    \n    def create_text_editor_window(self, title, size, window_id):\n        window = Window(title=title, size=size)\n        container = Container(className="p-4 space-y-4 bg-gray-50 h-full")\n        \n        # Header\n        header = Container(className="flex justify-between items-center bg-white p-3 rounded shadow-sm")\n        header.add(Text(f"Text Editor #{window_id}", className="font-bold"))\n        header.add(Button(\n            "Close",\n            on_click=lambda: self.close_window(window_id),\n            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"\n        ))\n        container.add(header)\n        \n        # Content area\n        content = Container(className="flex-1 bg-white p-4 rounded shadow-sm")\n        content.add(Text("Text Editor Content", className="text-lg font-medium mb-2"))\n        content.add(Text("This is a text editor window. You can add text editing functionality here.", className="text-gray-600"))\n        container.add(content)\n        \n        window.add_child(container)\n        return window\n    \n    def create_calculator_window(self, title, size, window_id):\n        window = Window(title=title, size=size)\n        container = Container(className="p-4 space-y-4 bg-blue-50 h-full")\n        \n        # Header\n        header = Container(className="flex justify-between items-center bg-white p-3 rounded shadow-sm")\n        header.add(Text(f"Calculator #{window_id}", className="font-bold"))\n        header.add(Button(\n            "Close",\n            on_click=lambda: self.close_window(window_id),\n            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"\n        ))\n        container.add(header)\n        \n        # Calculator display\n        display = Container(className="bg-black text-white p-4 rounded text-right")\n        display.add(Text("0", className="text-2xl font-mono"))\n        container.add(display)\n        \n        # Calculator buttons\n        buttons = Container(className="grid grid-cols-4 gap-2")\n        button_labels = [\n            "7", "8", "9", "/",\n            "4", "5", "6", "*",\n            "1", "2", "3", "-",\n            "0", ".", "=", "+"\n        ]\n        \n        for label in button_labels:\n            buttons.add(Button(\n                label,\n                className="bg-white hover:bg-gray-100 border border-gray-300 py-2 px-4 rounded font-mono"\n            ))\n        \n        container.add(buttons)\n        window.add_child(container)\n        return window\n    \n    def create_settings_window(self, title, size, window_id):\n        window = Window(title=title, size=size)\n        container = Container(className="p-4 space-y-4 bg-green-50 h-full")\n        \n        # Header\n        header = Container(className="flex justify-between items-center bg-white p-3 rounded shadow-sm")\n        header.add(Text(f"Settings #{window_id}", className="font-bold"))\n        header.add(Button(\n            "Close",\n            on_click=lambda: self.close_window(window_id),\n            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"\n        ))\n        container.add(header)\n        \n        # Settings content\n        settings_content = Container(className="bg-white p-4 rounded shadow-sm space-y-3")\n        settings_content.add(Text("Application Settings", className="text-lg font-bold mb-3"))\n        \n        settings = [\n            "Enable notifications",\n            "Auto-save documents",\n            "Dark mode",\n            "Show line numbers"\n        ]\n        \n        for setting in settings:\n            setting_row = Container(className="flex justify-between items-center py-2 border-b border-gray-200")\n            setting_row.add(Text(setting, className="text-gray-700"))\n            setting_row.add(Button("Toggle", className="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm"))\n            settings_content.add(setting_row)\n        \n        container.add(settings_content)\n        window.add_child(container)\n        return window\n    \n    def create_generic_window(self, title, size, window_id):\n        window = Window(title=title, size=size)\n        container = Container(className="p-4 space-y-4 bg-gray-50 h-full")\n        \n        header = Container(className="flex justify-between items-center bg-white p-3 rounded shadow-sm")\n        header.add(Text(f"Window #{window_id}", className="font-bold"))\n        header.add(Button(\n            "Close",\n            on_click=lambda: self.close_window(window_id),\n            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"\n        ))\n        container.add(header)\n        \n        content = Container(className="flex-1 bg-white p-4 rounded shadow-sm")\n        content.add(Text("Generic Window", className="text-lg font-medium"))\n        content.add(Text("This is a generic window.", className="text-gray-600"))\n        container.add(content)\n        \n        window.add_child(container)\n        return window\n    \n    def close_window(self, window_id):\n        registry = self.app.use_state("window_registry").copy()\n        if window_id in registry:\n            window_info = registry[window_id]\n            window_info["window"].close()\n            del registry[window_id]\n            self.app.set_state("window_registry", registry)\n    \n    def get_window_list(self):\n        return list(self.app.use_state("window_registry").values())\n\n# Create window manager\nwindow_manager = WindowManager(app)\n\n# Main control window\nmain_window = Window(title="Window Manager", size=(600, 500))\nmain_container = Container(className="p-6 space-y-6")\n\nmain_container.add(Text("Advanced Window Manager", className="text-2xl font-bold"))\n\n# Window creation section\ncreation_section = Container(className="bg-gray-50 p-4 rounded-lg")\ncreation_section.add(Text("Create New Window", className="text-lg font-bold mb-3"))\n\nwindow_types = [\n    ("Text Editor", "text_editor", "bg-blue-500 hover:bg-blue-600"),\n    ("Calculator", "calculator", "bg-green-500 hover:bg-green-600"),\n    ("Settings", "settings", "bg-purple-500 hover:bg-purple-600"),\n    ("Generic", "generic", "bg-gray-500 hover:bg-gray-600"),\n]\n\ncreation_buttons = Container(className="grid grid-cols-2 gap-2")\nfor label, window_type, button_class in window_types:\n    def create_window_handler(wtype, label):\n        def handler():\n            window_manager.create_window(wtype, f"{label} Window", (450, 350))\n        return handler\n    \n    creation_buttons.add(Button(\n        f"Create {label}",\n        on_click=create_window_handler(window_type, label),\n        className=f"{button_class} text-white font-medium py-2 px-4 rounded"\n    ))\n\ncreation_section.add(creation_buttons)\nmain_container.add(creation_section)\n\n# Window list section\nlist_section = Container(className="bg-gray-50 p-4 rounded-lg")\nlist_section.add(Text("Active Windows", className="text-lg font-bold mb-3"))\n\n# Window count\nwindow_count = len(app.use_state("window_registry"))\nlist_section.add(Text(f"Total windows: {window_count}", className="text-gray-600 mb-3"))\n\n# Window list\nwindow_list = Container(className="space-y-2")\nfor window_id, window_info in app.use_state("window_registry").items():\n    window_item = Container(className="bg-white p-3 rounded shadow-sm flex justify-between items-center")\n    \n    info_section = Container()\n    info_section.add(Text(window_info["title"], className="font-medium"))\n    info_section.add(Text(f"Type: {window_info[\'type\']} | ID: {window_id}", className="text-sm text-gray-600"))\n    window_item.add(info_section)\n    \n    button_section = Container(className="flex space-x-2")\n    button_section.add(Button(\n        "Close",\n        on_click=lambda wid=window_id: window_manager.close_window(wid),\n        className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"\n    ))\n    window_item.add(button_section)\n    \n    window_list.add(window_item)\n\nif window_count == 0:\n    window_list.add(Text("No active windows", className="text-gray-500 italic text-center py-4"))\n\nlist_section.add(window_list)\nmain_container.add(list_section)\n\nmain_window.add_child(main_container)\napp.append(main_window)\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices-for-multiple-windows",children:"Best Practices for Multiple Windows"}),"\n",(0,o.jsx)(e.h3,{id:"1-window-state-management",children:"1. Window State Management"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# \u2705 Good - Centralized window state\napp.use_state("window_states", {\n    "main": {"visible": True, "position": (100, 100)},\n    "settings": {"visible": False, "position": (200, 200)}\n})\n\n# \u274c Bad - Scattered window state\napp.use_state("main_window_visible", True)\napp.use_state("settings_window_visible", False)\napp.use_state("main_window_x", 100)\napp.use_state("main_window_y", 100)\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-consistent-window-styling",children:"2. Consistent Window Styling"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# \u2705 Good - Consistent window styling\nWINDOW_STYLES = {\n    "header": "bg-white p-4 border-b border-gray-200",\n    "content": "p-6 bg-gray-50",\n    "footer": "bg-white p-4 border-t border-gray-200"\n}\n\ndef create_styled_window(title, content):\n    window = Window(title=title, size=(500, 400))\n    container = Container(className="h-full flex flex-col")\n    \n    # Header\n    header = Container(className=WINDOW_STYLES["header"])\n    header.add(Text(title, className="text-lg font-bold"))\n    container.add(header)\n    \n    # Content\n    content_area = Container(className=WINDOW_STYLES["content"])\n    content_area.add(content)\n    container.add(content_area)\n    \n    window.add_child(container)\n    return window\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-proper-window-cleanup",children:"3. Proper Window Cleanup"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# \u2705 Good - Proper cleanup\ndef close_window_properly(window_id):\n    # Clean up state\n    registry = app.use_state("window_registry").copy()\n    if window_id in registry:\n        # Save any necessary data\n        window_data = registry[window_id]\n        save_window_data(window_data)\n        \n        # Close window\n        window_data["window"].close()\n        \n        # Remove from registry\n        del registry[window_id]\n        app.set_state("window_registry", registry)\n\n# \u274c Bad - Just closing without cleanup\ndef close_window_bad(window):\n    window.close()  # Leaves orphaned state\n'})}),"\n",(0,o.jsx)(e.h3,{id:"4-window-communication-patterns",children:"4. Window Communication Patterns"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# \u2705 Good - Event-driven communication\ndef broadcast_to_windows(event_type, data):\n    app.set_state("global_event", {\n        "type": event_type,\n        "data": data,\n        "timestamp": time.time()\n    })\n\n# \u274c Bad - Direct window manipulation\ndef update_other_window(window, data):\n    # Directly manipulating another window\'s content\n    window.children[0].children[1].text = data  # Fragile and hard to maintain\n'})}),"\n",(0,o.jsx)(e.h2,{id:"complete-multiple-windows-example",children:"Complete Multiple Windows Example"}),"\n",(0,o.jsx)(e.p,{children:"Here's a complete example demonstrating multiple windows working together:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Window, Container, Text, Button\n\napp = App()\n\n# Shared application state\napp.use_state("documents", [])\napp.use_state("active_document", None)\napp.use_state("app_settings", {"theme": "light", "auto_save": True})\n\n# Document Manager Window\nmanager_window = Window(title="Document Manager", size=(400, 500))\nmanager_container = Container(className="p-4 space-y-4 h-full")\n\nmanager_container.add(Text("Document Manager", className="text-xl font-bold"))\n\n# Document list\ndoc_list = Container(className="bg-white p-4 rounded shadow-sm flex-1")\ndoc_list.add(Text("Documents:", className="font-medium mb-2"))\n\ndocuments = app.use_state("documents")\nif documents:\n    for i, doc in enumerate(documents):\n        doc_item = Container(className="flex justify-between items-center py-2 border-b border-gray-200")\n        doc_item.add(Text(doc["name"], className="font-medium"))\n        \n        def open_doc(doc_data):\n            def handler():\n                app.set_state("active_document", doc_data)\n                # Create editor window for this document\n                create_editor_window(doc_data)\n            return handler\n        \n        doc_item.add(Button("Open", on_click=open_doc(doc), className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm"))\n        doc_list.add(doc_item)\nelse:\n    doc_list.add(Text("No documents", className="text-gray-500 italic"))\n\nmanager_container.add(doc_list)\n\n# Create new document\ndef create_new_document():\n    docs = app.use_state("documents").copy()\n    new_doc = {\n        "id": len(docs) + 1,\n        "name": f"Document {len(docs) + 1}",\n        "content": "New document content..."\n    }\n    docs.append(new_doc)\n    app.set_state("documents", docs)\n\nmanager_container.add(Button(\n    "New Document",\n    on_click=create_new_document,\n    className="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded w-full"\n))\n\nmanager_window.add_child(manager_container)\n\ndef create_editor_window(document):\n    editor_window = Window(title=f"Editor - {document[\'name\']}", size=(600, 400))\n    editor_container = Container(className="p-4 space-y-4 h-full")\n    \n    # Editor header\n    header = Container(className="flex justify-between items-center bg-gray-100 p-3 rounded")\n    header.add(Text(document["name"], className="font-bold"))\n    header.add(Button("Save", className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm"))\n    editor_container.add(header)\n    \n    # Editor content\n    content = Container(className="flex-1 bg-white p-4 rounded shadow-sm")\n    content.add(Text("Content:", className="font-medium mb-2"))\n    content.add(Text(document["content"], className="text-gray-700"))\n    editor_container.add(content)\n    \n    editor_window.add_child(editor_container)\n    app.append(editor_window)\n\n# Settings Window\nsettings_window = Window(title="Settings", size=(400, 300))\nsettings_container = Container(className="p-4 space-y-4")\n\nsettings_container.add(Text("Application Settings", className="text-xl font-bold"))\n\n# Settings form\nsettings_form = Container(className="bg-gray-50 p-4 rounded space-y-3")\n\ncurrent_settings = app.use_state("app_settings")\nsettings_form.add(Text(f"Theme: {current_settings[\'theme\']}", className="font-medium"))\nsettings_form.add(Text(f"Auto-save: {\'Enabled\' if current_settings[\'auto_save\'] else \'Disabled\'}", className="font-medium"))\n\ndef toggle_theme():\n    settings = app.use_state("app_settings").copy()\n    settings["theme"] = "dark" if settings["theme"] == "light" else "light"\n    app.set_state("app_settings", settings)\n\ndef toggle_auto_save():\n    settings = app.use_state("app_settings").copy()\n    settings["auto_save"] = not settings["auto_save"]\n    app.set_state("app_settings", settings)\n\nsettings_buttons = Container(className="space-y-2")\nsettings_buttons.add(Button("Toggle Theme", on_click=toggle_theme, className="bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded w-full"))\nsettings_buttons.add(Button("Toggle Auto-save", on_click=toggle_auto_save, className="bg-orange-500 hover:bg-orange-600 text-white font-medium py-2 px-4 rounded w-full"))\n\nsettings_form.add(settings_buttons)\nsettings_container.add(settings_form)\nsettings_window.add_child(settings_container)\n\n# Add windows to app\napp.append(manager_window)\napp.append(settings_window)\n\n# Create some sample documents\napp.set_state("documents", [\n    {"id": 1, "name": "Welcome.txt", "content": "Welcome to the document editor!"},\n    {"id": 2, "name": "Notes.txt", "content": "These are my notes..."},\n])\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(e.p,{children:"You now know how to:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u2705 Create and manage multiple windows"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 Share state between windows"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 Control window positioning and sizing"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 Create modal-like dialogs"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 Implement proper window lifecycle management"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 Follow best practices for multi-window applications"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"../api/app",children:"API Reference"})," - Explore the complete API"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"../examples",children:"Advanced Examples"})," - See complex application examples"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"../deployment",children:"Deployment"})," - Learn how to build and distribute your app"]}),"\n"]})]})}function w(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}}}]);
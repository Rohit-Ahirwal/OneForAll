"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[861],{21:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/state-management","title":"State Management API Reference","description":"OneForAll provides a reactive state management system that automatically updates the UI when state changes occur. The state system is built into the App class and provides a simple yet powerful way to manage application data.","source":"@site/docs/api/state-management.md","sourceDirName":"api","slug":"/api/state-management","permalink":"/OneForAll/docs/next/api/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/api/state-management.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Components API Reference","permalink":"/OneForAll/docs/next/api/components"},"next":{"title":"CLI API Reference","permalink":"/OneForAll/docs/next/api/cli"}}');var a=n(7259),o=n(1197);const i={sidebar_position:4},l="State Management API Reference",r={},d=[{value:"State Object",id:"state-object",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"State Methods",id:"state-methods",level:2},{value:"set()",id:"set",level:3},{value:"get()",id:"get",level:3},{value:"update()",id:"update",level:3},{value:"delete()",id:"delete",level:3},{value:"observe()",id:"observe",level:3},{value:"unobserve()",id:"unobserve",level:3},{value:"State Patterns",id:"state-patterns",level:2},{value:"Counter Pattern",id:"counter-pattern",level:3},{value:"Todo List Pattern",id:"todo-list-pattern",level:3},{value:"User Profile Pattern",id:"user-profile-pattern",level:3},{value:"Advanced State Patterns",id:"advanced-state-patterns",level:2},{value:"Computed State",id:"computed-state",level:3},{value:"State Validation",id:"state-validation",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"State Organization",id:"state-organization",level:3},{value:"State Updates",id:"state-updates",level:3},{value:"Observer Management",id:"observer-management",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Related APIs",id:"related-apis",level:2},{value:"Examples",id:"examples",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"state-management-api-reference",children:"State Management API Reference"})}),"\n",(0,a.jsxs)(t.p,{children:["OneForAll provides a reactive state management system that automatically updates the UI when state changes occur. The state system is built into the ",(0,a.jsx)(t.code,{children:"App"})," class and provides a simple yet powerful way to manage application data."]}),"\n",(0,a.jsx)(t.admonition,{title:"Alpha Version",type:"info",children:(0,a.jsxs)(t.p,{children:["The State Management API is stable in OneForAll ",(0,a.jsx)(t.strong,{children:"alpha"})," (v0.1.0a3) with full reactive functionality for desktop applications."]})}),"\n",(0,a.jsx)(t.h2,{id:"state-object",children:"State Object"}),"\n",(0,a.jsxs)(t.p,{children:["The state object is automatically created when you instantiate an ",(0,a.jsx)(t.code,{children:"App"})," and is accessible via ",(0,a.jsx)(t.code,{children:"app.state"}),". It provides methods for getting, setting, and observing state changes."]}),"\n",(0,a.jsx)(t.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from oneforall import App\n\napp = App()\n\n# Set state\napp.state.set("user.name", "John Doe")\napp.state.set("user.email", "john@example.com")\napp.state.set("counter", 0)\n\n# Get state\nname = app.state.get("user.name")  # "John Doe"\ncounter = app.state.get("counter")  # 0\n\n# Get with default value\ntheme = app.state.get("settings.theme", "light")  # "light" (default)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"state-methods",children:"State Methods"}),"\n",(0,a.jsx)(t.h3,{id:"set",children:"set()"}),"\n",(0,a.jsx)(t.p,{children:"Sets a value in the state at the specified path."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"app.state.set(path, value)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"})," (",(0,a.jsx)(t.code,{children:"str"}),"): Dot-notation path to the state property"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"value"})," (",(0,a.jsx)(t.code,{children:"any"}),"): The value to set"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Simple values\napp.state.set("username", "alice")\napp.state.set("isLoggedIn", True)\napp.state.set("score", 100)\n\n# Nested objects\napp.state.set("user.profile.name", "Alice Smith")\napp.state.set("user.profile.age", 30)\n\n# Arrays/Lists\napp.state.set("todos", [\n    {"id": 1, "text": "Learn OneForAll", "completed": False},\n    {"id": 2, "text": "Build an app", "completed": True}\n])\n\n# Complex objects\napp.state.set("settings", {\n    "theme": "dark",\n    "notifications": True,\n    "language": "en"\n})\n'})}),"\n",(0,a.jsx)(t.h3,{id:"get",children:"get()"}),"\n",(0,a.jsx)(t.p,{children:"Gets a value from the state at the specified path."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"value = app.state.get(path, default=None)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"})," (",(0,a.jsx)(t.code,{children:"str"}),"): Dot-notation path to the state property"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"default"})," (",(0,a.jsx)(t.code,{children:"any"}),"): Default value if path doesn't exist"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The value at the specified path, or the default value"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Get simple values\nusername = app.state.get("username")  # "alice"\nis_logged_in = app.state.get("isLoggedIn")  # True\n\n# Get nested values\nuser_name = app.state.get("user.profile.name")  # "Alice Smith"\nuser_age = app.state.get("user.profile.age")  # 30\n\n# Get with defaults\ntheme = app.state.get("settings.theme", "light")\nmax_items = app.state.get("config.maxItems", 10)\n\n# Get arrays\ntodos = app.state.get("todos", [])\nfirst_todo = app.state.get("todos.0.text")  # "Learn OneForAll"\n'})}),"\n",(0,a.jsx)(t.h3,{id:"update",children:"update()"}),"\n",(0,a.jsx)(t.p,{children:"Updates an existing object in the state by merging new values."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"app.state.update(path, updates)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"})," (",(0,a.jsx)(t.code,{children:"str"}),"): Dot-notation path to the object to update"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"updates"})," (",(0,a.jsx)(t.code,{children:"dict"}),"): Dictionary of updates to merge"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Initial state\napp.state.set("user", {\n    "name": "John",\n    "email": "john@example.com",\n    "age": 25\n})\n\n# Update specific fields\napp.state.update("user", {\n    "age": 26,\n    "city": "New York"\n})\n\n# Result: {"name": "John", "email": "john@example.com", "age": 26, "city": "New York"}\n\n# Update nested objects\napp.state.set("settings", {\n    "ui": {"theme": "light", "fontSize": 14},\n    "notifications": {"email": True, "push": False}\n})\n\napp.state.update("settings.ui", {"theme": "dark"})\n# Result: settings.ui = {"theme": "dark", "fontSize": 14}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"delete",children:"delete()"}),"\n",(0,a.jsx)(t.p,{children:"Removes a property from the state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"app.state.delete(path)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"})," (",(0,a.jsx)(t.code,{children:"str"}),"): Dot-notation path to the property to delete"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Delete simple property\napp.state.delete("temporaryData")\n\n# Delete nested property\napp.state.delete("user.profile.tempField")\n\n# Delete array item\napp.state.delete("todos.0")  # Removes first todo item\n'})}),"\n",(0,a.jsx)(t.h3,{id:"observe",children:"observe()"}),"\n",(0,a.jsx)(t.p,{children:"Observes changes to a specific path in the state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"app.state.observe(path, callback)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"})," (",(0,a.jsx)(t.code,{children:"str"}),"): Dot-notation path to observe"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"callback"})," (",(0,a.jsx)(t.code,{children:"callable"}),"): Function called when the path changes"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def on_user_change(new_value, old_value):\n    print(f"User changed from {old_value} to {new_value}")\n\ndef on_counter_change(new_value, old_value):\n    print(f"Counter: {old_value} \u2192 {new_value}")\n\n# Observe specific paths\napp.state.observe("user.name", on_user_change)\napp.state.observe("counter", on_counter_change)\n\n# Observe nested objects\ndef on_settings_change(new_settings, old_settings):\n    print("Settings updated:", new_settings)\n\napp.state.observe("settings", on_settings_change)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"unobserve",children:"unobserve()"}),"\n",(0,a.jsx)(t.p,{children:"Removes an observer from a specific path."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"app.state.unobserve(path, callback)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"path"})," (",(0,a.jsx)(t.code,{children:"str"}),"): Dot-notation path to stop observing"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"callback"})," (",(0,a.jsx)(t.code,{children:"callable"}),"): The callback function to remove"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Remove specific observer\napp.state.unobserve("user.name", on_user_change)\n\n# Remove all observers for a path\napp.state.unobserve("counter")\n'})}),"\n",(0,a.jsx)(t.h2,{id:"state-patterns",children:"State Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"counter-pattern",children:"Counter Pattern"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\nclass CounterApp:\n    def __init__(self):\n        self.app = App()\n        self.window = self.app.create_window("Counter", (300, 200))\n        \n        # Initialize state\n        self.app.state.set("counter", 0)\n        \n        # Setup UI\n        self.setup_ui()\n        \n        # Observe state changes\n        self.app.state.observe("counter", self.on_counter_change)\n    \n    def setup_ui(self):\n        container = Container(className="p-6 text-center")\n        \n        # Counter display\n        self.counter_display = Text(\n            str(self.app.state.get("counter")),\n            className="text-4xl font-bold mb-4"\n        )\n        \n        # Buttons\n        buttons = Container(className="flex space-x-4 justify-center")\n        \n        decrement_btn = Button(\n            "-",\n            className="px-4 py-2 bg-red-500 text-white rounded",\n            onclick=self.decrement\n        )\n        \n        increment_btn = Button(\n            "+",\n            className="px-4 py-2 bg-green-500 text-white rounded",\n            onclick=self.increment\n        )\n        \n        reset_btn = Button(\n            "Reset",\n            className="px-4 py-2 bg-gray-500 text-white rounded",\n            onclick=self.reset\n        )\n        \n        buttons.add(decrement_btn)\n        buttons.add(increment_btn)\n        buttons.add(reset_btn)\n        \n        container.add(self.counter_display)\n        container.add(buttons)\n        \n        self.window.add_child(container)\n    \n    def increment(self):\n        current = self.app.state.get("counter")\n        self.app.state.set("counter", current + 1)\n    \n    def decrement(self):\n        current = self.app.state.get("counter")\n        self.app.state.set("counter", current - 1)\n    \n    def reset(self):\n        self.app.state.set("counter", 0)\n    \n    def on_counter_change(self, new_value, old_value):\n        """Update UI when counter changes"""\n        self.counter_display.content = str(new_value)\n    \n    def run(self):\n        self.app.run()\n\n# Usage\ncounter_app = CounterApp()\ncounter_app.run()\n'})}),"\n",(0,a.jsx)(t.h3,{id:"todo-list-pattern",children:"Todo List Pattern"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\nimport uuid\n\nclass TodoApp:\n    def __init__(self):\n        self.app = App()\n        self.window = self.app.create_window("Todo List", (500, 600))\n        \n        # Initialize state\n        self.app.state.set("todos", {})\n        self.app.state.set("newTodoText", "")\n        \n        # Setup UI\n        self.setup_ui()\n        \n        # Observe state changes\n        self.app.state.observe("todos", self.on_todos_change)\n    \n    def setup_ui(self):\n        container = Container(className="p-6")\n        \n        # Title\n        container.add(Text("My Todos", className="text-2xl font-bold mb-6"))\n        \n        # Add todo form\n        form = Container(className="mb-6")\n        \n        # Input field (simulated)\n        input_container = Container(className="flex space-x-2")\n        \n        # New todo input (simulated with text display)\n        self.new_todo_input = Container(\n            className="flex-1 px-3 py-2 border border-gray-300 rounded"\n        )\n        self.new_todo_input.add(Text("Enter new todo...", className="text-gray-400"))\n        \n        add_button = Button(\n            "Add",\n            className="px-4 py-2 bg-blue-500 text-white rounded",\n            onclick=self.add_todo\n        )\n        \n        input_container.add(self.new_todo_input)\n        input_container.add(add_button)\n        form.add(input_container)\n        \n        # Todo list\n        self.todo_list = Container(className="space-y-2")\n        self.render_todos()\n        \n        # Stats\n        self.stats = Container(className="mt-6 p-4 bg-gray-100 rounded")\n        self.update_stats()\n        \n        container.add(form)\n        container.add(self.todo_list)\n        container.add(self.stats)\n        \n        self.window.add_child(container)\n    \n    def add_todo(self):\n        """Add a new todo item"""\n        todo_id = str(uuid.uuid4())\n        new_todo = {\n            "id": todo_id,\n            "text": f"New Todo {len(self.app.state.get(\'todos\', {})) + 1}",\n            "completed": False,\n            "created_at": "now"  # In real app, use datetime\n        }\n        \n        todos = self.app.state.get("todos", {})\n        todos[todo_id] = new_todo\n        self.app.state.set("todos", todos)\n    \n    def toggle_todo(self, todo_id):\n        """Toggle todo completion status"""\n        current_status = self.app.state.get(f"todos.{todo_id}.completed", False)\n        self.app.state.set(f"todos.{todo_id}.completed", not current_status)\n    \n    def delete_todo(self, todo_id):\n        """Delete a todo item"""\n        todos = self.app.state.get("todos", {})\n        if todo_id in todos:\n            del todos[todo_id]\n            self.app.state.set("todos", todos)\n    \n    def render_todos(self):\n        """Render the todo list"""\n        self.todo_list.children.clear()\n        \n        todos = self.app.state.get("todos", {})\n        \n        if not todos:\n            self.todo_list.add(Text("No todos yet. Add one above!", className="text-gray-500 italic"))\n            return\n        \n        for todo_id, todo in todos.items():\n            todo_item = self.create_todo_item(todo_id, todo)\n            self.todo_list.add(todo_item)\n    \n    def create_todo_item(self, todo_id, todo):\n        """Create a todo item component"""\n        item = Container(\n            className="flex items-center justify-between p-3 border rounded hover:bg-gray-50"\n        )\n        \n        # Left side - checkbox and text\n        left_side = Container(className="flex items-center space-x-3")\n        \n        # Checkbox\n        checkbox = Button(\n            "\u2713" if todo["completed"] else "\u25cb",\n            className=f"w-6 h-6 rounded border text-sm {\n                \'bg-green-500 text-white\' if todo[\'completed\'] \n                else \'bg-white border-gray-300\'\n            }",\n            onclick=lambda: self.toggle_todo(todo_id)\n        )\n        \n        # Todo text\n        text_class = "text-gray-500 line-through" if todo["completed"] else "text-gray-900"\n        todo_text = Text(todo["text"], className=text_class)\n        \n        left_side.add(checkbox)\n        left_side.add(todo_text)\n        \n        # Right side - delete button\n        delete_btn = Button(\n            "Delete",\n            className="px-3 py-1 bg-red-500 text-white rounded text-sm",\n            onclick=lambda: self.delete_todo(todo_id)\n        )\n        \n        item.add(left_side)\n        item.add(delete_btn)\n        \n        return item\n    \n    def update_stats(self):\n        """Update todo statistics"""\n        self.stats.children.clear()\n        \n        todos = self.app.state.get("todos", {})\n        total = len(todos)\n        completed = sum(1 for todo in todos.values() if todo["completed"])\n        remaining = total - completed\n        \n        stats_text = f"Total: {total} | Completed: {completed} | Remaining: {remaining}"\n        self.stats.add(Text(stats_text, className="text-sm text-gray-600"))\n    \n    def on_todos_change(self, new_todos, old_todos):\n        """Handle todos state change"""\n        self.render_todos()\n        self.update_stats()\n    \n    def run(self):\n        self.app.run()\n\n# Usage\ntodo_app = TodoApp()\ntodo_app.run()\n'})}),"\n",(0,a.jsx)(t.h3,{id:"user-profile-pattern",children:"User Profile Pattern"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button, Image\n\nclass UserProfileApp:\n    def __init__(self):\n        self.app = App()\n        self.window = self.app.create_window("User Profile", (600, 500))\n        \n        # Initialize state\n        self.app.state.set("user", {\n            "name": "John Doe",\n            "email": "john@example.com",\n            "avatar": "assets/default-avatar.png",\n            "bio": "Software developer passionate about Python.",\n            "settings": {\n                "theme": "light",\n                "notifications": True,\n                "language": "en"\n            }\n        })\n        \n        self.app.state.set("editMode", False)\n        \n        # Setup UI\n        self.setup_ui()\n        \n        # Observe state changes\n        self.app.state.observe("user", self.on_user_change)\n        self.app.state.observe("editMode", self.on_edit_mode_change)\n    \n    def setup_ui(self):\n        container = Container(className="p-6")\n        \n        # Header\n        header = Container(className="flex items-center justify-between mb-6")\n        header.add(Text("User Profile", className="text-2xl font-bold"))\n        \n        self.edit_button = Button(\n            "Edit",\n            className="px-4 py-2 bg-blue-500 text-white rounded",\n            onclick=self.toggle_edit_mode\n        )\n        header.add(self.edit_button)\n        \n        # Profile content\n        self.profile_content = Container(className="space-y-6")\n        self.render_profile()\n        \n        container.add(header)\n        container.add(self.profile_content)\n        \n        self.window.add_child(container)\n    \n    def render_profile(self):\n        """Render the profile content"""\n        self.profile_content.children.clear()\n        \n        user = self.app.state.get("user", {})\n        edit_mode = self.app.state.get("editMode", False)\n        \n        # Avatar and basic info\n        profile_header = Container(className="flex items-center space-x-4 mb-6")\n        \n        avatar = Image(\n            src=user.get("avatar", "assets/default-avatar.png"),\n            alt="User Avatar",\n            className="w-20 h-20 rounded-full"\n        )\n        \n        info = Container(className="flex-1")\n        \n        if edit_mode:\n            # Edit mode - show inputs (simulated)\n            name_input = Container(className="mb-2 p-2 border rounded")\n            name_input.add(Text(user.get("name", ""), className="font-semibold"))\n            \n            email_input = Container(className="mb-2 p-2 border rounded")\n            email_input.add(Text(user.get("email", ""), className="text-gray-600"))\n            \n            info.add(name_input)\n            info.add(email_input)\n        else:\n            # View mode\n            info.add(Text(user.get("name", ""), className="text-xl font-semibold"))\n            info.add(Text(user.get("email", ""), className="text-gray-600"))\n        \n        profile_header.add(avatar)\n        profile_header.add(info)\n        \n        # Bio section\n        bio_section = Container(className="mb-6")\n        bio_section.add(Text("Bio", className="text-lg font-semibold mb-2"))\n        \n        if edit_mode:\n            bio_input = Container(className="p-3 border rounded min-h-20")\n            bio_input.add(Text(user.get("bio", ""), className="text-gray-700"))\n            bio_section.add(bio_input)\n        else:\n            bio_section.add(Text(user.get("bio", ""), className="text-gray-700"))\n        \n        # Settings section\n        settings_section = Container(className="mb-6")\n        settings_section.add(Text("Settings", className="text-lg font-semibold mb-4"))\n        \n        settings = user.get("settings", {})\n        settings_grid = Container(className="grid grid-cols-2 gap-4")\n        \n        # Theme setting\n        theme_setting = Container(className="flex items-center justify-between p-3 bg-gray-50 rounded")\n        theme_setting.add(Text("Theme", className="font-medium"))\n        \n        if edit_mode:\n            theme_toggle = Button(\n                settings.get("theme", "light").title(),\n                className="px-3 py-1 bg-blue-500 text-white rounded text-sm",\n                onclick=self.toggle_theme\n            )\n            theme_setting.add(theme_toggle)\n        else:\n            theme_setting.add(Text(settings.get("theme", "light").title(), className="text-gray-600"))\n        \n        # Notifications setting\n        notif_setting = Container(className="flex items-center justify-between p-3 bg-gray-50 rounded")\n        notif_setting.add(Text("Notifications", className="font-medium"))\n        \n        if edit_mode:\n            notif_toggle = Button(\n                "On" if settings.get("notifications", True) else "Off",\n                className=f"px-3 py-1 text-white rounded text-sm {\n                    \'bg-green-500\' if settings.get(\'notifications\', True) else \'bg-red-500\'\n                }",\n                onclick=self.toggle_notifications\n            )\n            notif_setting.add(notif_toggle)\n        else:\n            notif_setting.add(Text(\n                "Enabled" if settings.get("notifications", True) else "Disabled",\n                className="text-gray-600"\n            ))\n        \n        settings_grid.add(theme_setting)\n        settings_grid.add(notif_setting)\n        settings_section.add(settings_grid)\n        \n        # Add all sections\n        self.profile_content.add(profile_header)\n        self.profile_content.add(bio_section)\n        self.profile_content.add(settings_section)\n        \n        # Save/Cancel buttons in edit mode\n        if edit_mode:\n            actions = Container(className="flex space-x-2 justify-end")\n            \n            save_btn = Button(\n                "Save Changes",\n                className="px-4 py-2 bg-green-500 text-white rounded",\n                onclick=self.save_changes\n            )\n            \n            cancel_btn = Button(\n                "Cancel",\n                className="px-4 py-2 bg-gray-500 text-white rounded",\n                onclick=self.cancel_edit\n            )\n            \n            actions.add(cancel_btn)\n            actions.add(save_btn)\n            self.profile_content.add(actions)\n    \n    def toggle_edit_mode(self):\n        """Toggle edit mode"""\n        current_mode = self.app.state.get("editMode", False)\n        self.app.state.set("editMode", not current_mode)\n    \n    def toggle_theme(self):\n        """Toggle theme setting"""\n        current_theme = self.app.state.get("user.settings.theme", "light")\n        new_theme = "dark" if current_theme == "light" else "light"\n        self.app.state.set("user.settings.theme", new_theme)\n    \n    def toggle_notifications(self):\n        """Toggle notifications setting"""\n        current_notif = self.app.state.get("user.settings.notifications", True)\n        self.app.state.set("user.settings.notifications", not current_notif)\n    \n    def save_changes(self):\n        """Save profile changes"""\n        # In a real app, you would validate and save the changes\n        self.app.state.set("editMode", False)\n    \n    def cancel_edit(self):\n        """Cancel editing"""\n        # In a real app, you would revert any unsaved changes\n        self.app.state.set("editMode", False)\n    \n    def on_user_change(self, new_user, old_user):\n        """Handle user data changes"""\n        self.render_profile()\n    \n    def on_edit_mode_change(self, new_mode, old_mode):\n        """Handle edit mode changes"""\n        self.edit_button.text = "Cancel" if new_mode else "Edit"\n        self.render_profile()\n    \n    def run(self):\n        self.app.run()\n\n# Usage\nprofile_app = UserProfileApp()\nprofile_app.run()\n'})}),"\n",(0,a.jsx)(t.h2,{id:"advanced-state-patterns",children:"Advanced State Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"computed-state",children:"Computed State"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'class ComputedStateExample:\n    def __init__(self):\n        self.app = App()\n        \n        # Base state\n        self.app.state.set("items", [\n            {"name": "Item 1", "price": 10.99, "quantity": 2},\n            {"name": "Item 2", "price": 5.50, "quantity": 1},\n            {"name": "Item 3", "price": 15.00, "quantity": 3}\n        ])\n        \n        # Observe base state and compute derived values\n        self.app.state.observe("items", self.compute_totals)\n        \n        # Initial computation\n        self.compute_totals(self.app.state.get("items"), [])\n    \n    def compute_totals(self, new_items, old_items):\n        """Compute derived state from base state"""\n        total_items = len(new_items)\n        total_quantity = sum(item["quantity"] for item in new_items)\n        total_price = sum(item["price"] * item["quantity"] for item in new_items)\n        \n        # Set computed state\n        self.app.state.set("computed.totalItems", total_items)\n        self.app.state.set("computed.totalQuantity", total_quantity)\n        self.app.state.set("computed.totalPrice", total_price)\n        self.app.state.set("computed.averagePrice", total_price / total_quantity if total_quantity > 0 else 0)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"state-validation",children:"State Validation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'class ValidatedState:\n    def __init__(self):\n        self.app = App()\n        self.validators = {}\n        self.setup_validators()\n    \n    def setup_validators(self):\n        """Setup state validators"""\n        self.validators = {\n            "user.email": self.validate_email,\n            "user.age": self.validate_age,\n            "user.name": self.validate_name\n        }\n        \n        # Observe all user changes\n        self.app.state.observe("user", self.validate_user_state)\n    \n    def validate_email(self, email):\n        """Validate email format"""\n        import re\n        pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\'\n        return re.match(pattern, email) is not None\n    \n    def validate_age(self, age):\n        """Validate age range"""\n        return isinstance(age, int) and 0 <= age <= 150\n    \n    def validate_name(self, name):\n        """Validate name"""\n        return isinstance(name, str) and len(name.strip()) > 0\n    \n    def validate_user_state(self, new_user, old_user):\n        """Validate user state changes"""\n        errors = {}\n        \n        for field, validator in self.validators.items():\n            value = self.app.state.get(field)\n            if value is not None and not validator(value):\n                errors[field] = f"Invalid {field.split(\'.\')[-1]}"\n        \n        # Set validation errors\n        self.app.state.set("validation.errors", errors)\n        self.app.state.set("validation.isValid", len(errors) == 0)\n    \n    def set_user_field(self, field, value):\n        """Set user field with validation"""\n        self.app.state.set(f"user.{field}", value)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import json\nimport os\n\nclass PersistentState:\n    def __init__(self, storage_file="app_state.json"):\n        self.app = App()\n        self.storage_file = storage_file\n        \n        # Load saved state\n        self.load_state()\n        \n        # Observe state changes for auto-save\n        self.app.state.observe("", self.auto_save)  # Observe all changes\n    \n    def load_state(self):\n        """Load state from storage"""\n        if os.path.exists(self.storage_file):\n            try:\n                with open(self.storage_file, \'r\') as f:\n                    saved_state = json.load(f)\n                    \n                # Restore state\n                for key, value in saved_state.items():\n                    self.app.state.set(key, value)\n                    \n            except Exception as e:\n                print(f"Error loading state: {e}")\n    \n    def save_state(self):\n        """Save current state to storage"""\n        try:\n            # Get all state data (this would need to be implemented in the actual state system)\n            state_data = self.get_serializable_state()\n            \n            with open(self.storage_file, \'w\') as f:\n                json.dump(state_data, f, indent=2)\n                \n        except Exception as e:\n            print(f"Error saving state: {e}")\n    \n    def auto_save(self, new_value, old_value):\n        """Auto-save state on changes"""\n        # Debounce saves to avoid excessive I/O\n        if hasattr(self, \'_save_timer\'):\n            self._save_timer.cancel()\n        \n        import threading\n        self._save_timer = threading.Timer(1.0, self.save_state)  # Save after 1 second of inactivity\n        self._save_timer.start()\n    \n    def get_serializable_state(self):\n        """Get state data that can be serialized to JSON"""\n        # This would need to be implemented based on the actual state system\n        # For now, return a placeholder\n        return {\n            "user": self.app.state.get("user", {}),\n            "settings": self.app.state.get("settings", {}),\n            "data": self.app.state.get("data", {})\n        }\n'})}),"\n",(0,a.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(t.h3,{id:"state-organization",children:"State Organization"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# \u2705 Good: Organize state hierarchically\napp.state.set("user", {\n    "profile": {\n        "name": "John Doe",\n        "email": "john@example.com"\n    },\n    "preferences": {\n        "theme": "dark",\n        "language": "en"\n    },\n    "session": {\n        "isLoggedIn": True,\n        "lastActivity": "2024-01-15T10:30:00Z"\n    }\n})\n\n# \u2705 Good: Use consistent naming conventions\napp.state.set("ui.sidebar.isOpen", True)\napp.state.set("ui.modal.currentModal", "settings")\napp.state.set("data.todos.items", [])\napp.state.set("data.todos.filter", "all")\n'})}),"\n",(0,a.jsx)(t.h3,{id:"state-updates",children:"State Updates"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# \u2705 Good: Use specific paths for updates\napp.state.set("user.profile.name", "Jane Doe")\n\n# \u2705 Good: Use update() for partial object updates\napp.state.update("user.preferences", {"theme": "light"})\n\n# \u274c Avoid: Overwriting entire objects unnecessarily\n# This replaces the entire user object\napp.state.set("user", {"profile": {"name": "Jane Doe"}})  # Loses other user data\n'})}),"\n",(0,a.jsx)(t.h3,{id:"observer-management",children:"Observer Management"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'class ComponentWithObservers:\n    def __init__(self, app):\n        self.app = app\n        self.observers = []\n        self.setup_observers()\n    \n    def setup_observers(self):\n        """Setup state observers"""\n        # Keep track of observers for cleanup\n        observer1 = lambda new, old: self.on_user_change(new, old)\n        observer2 = lambda new, old: self.on_settings_change(new, old)\n        \n        self.app.state.observe("user", observer1)\n        self.app.state.observe("settings", observer2)\n        \n        # Store references for cleanup\n        self.observers.extend([\n            ("user", observer1),\n            ("settings", observer2)\n        ])\n    \n    def cleanup(self):\n        """Clean up observers when component is destroyed"""\n        for path, observer in self.observers:\n            self.app.state.unobserve(path, observer)\n        self.observers.clear()\n'})}),"\n",(0,a.jsx)(t.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# \u2705 Good: Batch related updates\ndef update_user_profile(user_data):\n    # Batch updates to avoid multiple re-renders\n    app.state.update("user.profile", {\n        "name": user_data["name"],\n        "email": user_data["email"],\n        "bio": user_data["bio"]\n    })\n\n# \u2705 Good: Use specific observers\napp.state.observe("todos.filter", update_todo_display)  # Only observe filter changes\napp.state.observe("todos.items", update_todo_list)     # Only observe items changes\n\n# \u274c Avoid: Observing root paths unnecessarily\napp.state.observe("", handle_any_change)  # This fires for ALL state changes\n'})}),"\n",(0,a.jsx)(t.h2,{id:"related-apis",children:"Related APIs"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"./app",children:"App API"})," - Application and state initialization"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"./components",children:"Components API"})," - UI components that react to state changes"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"./window",children:"Window API"})," - Window management"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(t.p,{children:["See the ",(0,a.jsx)(t.a,{href:"../tutorial-basics/state-management",children:"State Management Tutorial"})," for comprehensive examples and usage patterns."]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.p,{children:"The State Management API provides a powerful reactive system for managing application data and automatically updating the UI when state changes occur."})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},1197:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(6363);const a={},o=s.createContext(a);function i(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);
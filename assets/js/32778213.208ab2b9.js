"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[360],{1170:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/app","title":"App API Reference","description":"The App class is the main entry point for OneForAll applications. It manages the application lifecycle, windows, and global state.","source":"@site/docs/api/app.md","sourceDirName":"api","slug":"/api/app","permalink":"/OneForAll/docs/next/api/app","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/docs/api/app.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Multiple Windows","permalink":"/OneForAll/docs/next/tutorial-basics/multiple-windows"},"next":{"title":"Window API Reference","permalink":"/OneForAll/docs/next/api/window"}}');var a=i(7259),s=i(1197);const l={sidebar_position:1},o="App API Reference",r={},d=[{value:"Class: App",id:"class-app",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:3},{value:"create_window()",id:"create_window",level:4},{value:"run()",id:"run",level:4},{value:"Properties",id:"properties",level:3},{value:"windows",id:"windows",level:4},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Single Window Application",id:"single-window-application",level:3},{value:"Multi-Window Application",id:"multi-window-application",level:3},{value:"Application with Shared State",id:"application-with-shared-state",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Application Lifecycle",id:"application-lifecycle",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Related APIs",id:"related-apis",level:2},{value:"Examples",id:"examples",level:2}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"app-api-reference",children:"App API Reference"})}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"App"})," class is the main entry point for OneForAll applications. It manages the application lifecycle, windows, and global state."]}),"\n",(0,a.jsx)(e.admonition,{title:"Alpha Version",type:"info",children:(0,a.jsxs)(e.p,{children:["The App API is stable in OneForAll ",(0,a.jsx)(e.strong,{children:"alpha"})," (v0.1.0a3) but may receive additional features in future releases."]})}),"\n",(0,a.jsx)(e.h2,{id:"class-app",children:"Class: App"}),"\n",(0,a.jsx)(e.h3,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"from oneforall import App\n\napp = App()\n"})}),"\n",(0,a.jsx)(e.p,{children:"Creates a new OneForAll application instance."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"App"})," instance"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(e.h4,{id:"create_window",children:"create_window()"}),"\n",(0,a.jsx)(e.p,{children:"Creates a new application window."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'window = app.create_window(\n    title="My Application",\n    size=(800, 600),\n    position=(100, 100),\n    resizable=True,\n    minimizable=True,\n    maximizable=True,\n    on_top=False\n)\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"title"})," (str): Window title displayed in the title bar"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"size"})," (tuple): Window dimensions as (width, height) in pixels"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"position"})," (tuple, optional): Window position as (x, y) coordinates. Defaults to system placement"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"resizable"})," (bool, optional): Whether the window can be resized. Defaults to ",(0,a.jsx)(e.code,{children:"True"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"minimizable"})," (bool, optional): Whether the window can be minimized. Defaults to ",(0,a.jsx)(e.code,{children:"True"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"maximizable"})," (bool, optional): Whether the window can be maximized. Defaults to ",(0,a.jsx)(e.code,{children:"True"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"on_top"})," (bool, optional): Whether the window stays on top of other windows. Defaults to ",(0,a.jsx)(e.code,{children:"False"})]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"Window"})," instance"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# Basic window\nmain_window = app.create_window("Main App", (1000, 700))\n\n# Dialog window\ndialog = app.create_window(\n    title="Settings",\n    size=(400, 300),\n    resizable=False,\n    on_top=True\n)\n\n# Tool window\ntools = app.create_window(\n    title="Tools",\n    size=(200, 500),\n    position=(50, 100),\n    maximizable=False\n)\n'})}),"\n",(0,a.jsx)(e.h4,{id:"run",children:"run()"}),"\n",(0,a.jsx)(e.p,{children:"Starts the application event loop and displays all created windows."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"app.run()\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"None"}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Note:"})," This method blocks until the application is closed."]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text\n\napp = App()\nwindow = app.create_window("Hello World", (400, 300))\n\ncontainer = Container()\ncontainer.add(Text("Hello, OneForAll!"))\nwindow.add_child(container)\n\napp.run()  # Blocks until app is closed\n'})}),"\n",(0,a.jsx)(e.h3,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(e.h4,{id:"windows",children:"windows"}),"\n",(0,a.jsx)(e.p,{children:"Read-only list of all windows created by this application."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"windows = app.windows\n"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Type:"})," ",(0,a.jsx)(e.code,{children:"list[Window]"})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'app = App()\nwindow1 = app.create_window("Window 1", (400, 300))\nwindow2 = app.create_window("Window 2", (500, 400))\n\nprint(f"Total windows: {len(app.windows)}")  # Output: Total windows: 2\n\nfor i, window in enumerate(app.windows):\n    print(f"Window {i+1}: {window.title}")\n'})}),"\n",(0,a.jsx)(e.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,a.jsx)(e.h3,{id:"single-window-application",children:"Single Window Application"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\ndef create_single_window_app():\n    app = App()\n    \n    # Create main window\n    window = app.create_window(\n        title="Single Window App",\n        size=(600, 400),\n        position=(200, 150)\n    )\n    \n    # Build UI\n    container = Container(className="p-6")\n    container.add(Text("Welcome to OneForAll", className="text-2xl font-bold mb-4"))\n    container.add(Button("Click Me", className="px-4 py-2 bg-blue-500 text-white rounded"))\n    \n    window.add_child(container)\n    \n    return app\n\n# Usage\napp = create_single_window_app()\napp.run()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"multi-window-application",children:"Multi-Window Application"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\ndef create_multi_window_app():\n    app = App()\n    \n    # Main application window\n    main_window = app.create_window(\n        title="Main Application",\n        size=(800, 600),\n        position=(100, 100)\n    )\n    \n    # Settings window\n    settings_window = app.create_window(\n        title="Settings",\n        size=(400, 500),\n        position=(950, 100),\n        resizable=False\n    )\n    \n    # Tool palette\n    tools_window = app.create_window(\n        title="Tools",\n        size=(200, 400),\n        position=(50, 100),\n        maximizable=False\n    )\n    \n    # Build main window\n    main_container = Container(className="p-6")\n    main_container.add(Text("Main Application", className="text-2xl font-bold mb-4"))\n    main_container.add(Text("This is the main workspace.", className="text-gray-600 mb-4"))\n    \n    window_controls = Container(className="flex space-x-2")\n    window_controls.add(Button("Open Settings", className="px-3 py-2 bg-blue-500 text-white rounded"))\n    window_controls.add(Button("Show Tools", className="px-3 py-2 bg-green-500 text-white rounded"))\n    \n    main_container.add(window_controls)\n    main_window.add_child(main_container)\n    \n    # Build settings window\n    settings_container = Container(className="p-6")\n    settings_container.add(Text("Application Settings", className="text-xl font-bold mb-4"))\n    settings_container.add(Text("Configure your application here.", className="text-gray-600"))\n    settings_window.add_child(settings_container)\n    \n    # Build tools window\n    tools_container = Container(className="p-4")\n    tools_container.add(Text("Tool Palette", className="text-lg font-bold mb-3"))\n    \n    tools_list = Container(className="space-y-2")\n    tools_list.add(Button("Tool 1", className="w-full px-3 py-2 bg-gray-200 rounded text-sm"))\n    tools_list.add(Button("Tool 2", className="w-full px-3 py-2 bg-gray-200 rounded text-sm"))\n    tools_list.add(Button("Tool 3", className="w-full px-3 py-2 bg-gray-200 rounded text-sm"))\n    \n    tools_container.add(tools_list)\n    tools_window.add_child(tools_container)\n    \n    return app\n\n# Usage\napp = create_multi_window_app()\napp.run()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"application-with-shared-state",children:"Application with Shared State"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text, Button\n\nclass SharedStateApp:\n    def __init__(self):\n        self.app = App()\n        \n        # Shared application state\n        self.state = {\n            \'user_name\': \'John Doe\',\n            \'theme\': \'light\',\n            \'notifications_enabled\': True\n        }\n        \n        self.setup_windows()\n    \n    def setup_windows(self):\n        # Main window\n        self.main_window = self.app.create_window(\n            title="Shared State App",\n            size=(600, 400)\n        )\n        \n        # Settings window\n        self.settings_window = self.app.create_window(\n            title="Settings",\n            size=(400, 300)\n        )\n        \n        self.build_main_window()\n        self.build_settings_window()\n    \n    def build_main_window(self):\n        container = Container(className="p-6")\n        \n        # Display current state\n        container.add(Text(f"Welcome, {self.state[\'user_name\']}", className="text-xl font-bold mb-4"))\n        container.add(Text(f"Theme: {self.state[\'theme\']}", className="text-gray-600 mb-2"))\n        container.add(Text(f"Notifications: {\'On\' if self.state[\'notifications_enabled\'] else \'Off\'}", className="text-gray-600 mb-4"))\n        \n        # Controls\n        container.add(Button("Open Settings", className="px-4 py-2 bg-blue-500 text-white rounded"))\n        \n        self.main_window.add_child(container)\n    \n    def build_settings_window(self):\n        container = Container(className="p-6")\n        \n        container.add(Text("Settings", className="text-xl font-bold mb-4"))\n        \n        # Settings controls (in a real app, these would update the shared state)\n        settings_list = Container(className="space-y-3")\n        settings_list.add(Button("Toggle Theme", className="w-full px-4 py-2 bg-gray-200 rounded"))\n        settings_list.add(Button("Toggle Notifications", className="w-full px-4 py-2 bg-gray-200 rounded"))\n        settings_list.add(Button("Change User Name", className="w-full px-4 py-2 bg-blue-500 text-white rounded"))\n        \n        container.add(settings_list)\n        self.settings_window.add_child(container)\n    \n    def run(self):\n        self.app.run()\n\n# Usage\napp = SharedStateApp()\napp.run()\n'})}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(e.h3,{id:"application-lifecycle",children:"Application Lifecycle"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class ManagedApp:\n    def __init__(self):\n        self.app = App()\n        self.is_initialized = False\n        self.windows = {}\n    \n    def initialize(self):\n        """Initialize the application"""\n        if self.is_initialized:\n            return\n        \n        # Create main window\n        self.windows[\'main\'] = self.app.create_window(\n            title="Managed Application",\n            size=(800, 600)\n        )\n        \n        # Setup UI\n        self.setup_ui()\n        \n        self.is_initialized = True\n    \n    def setup_ui(self):\n        """Setup the user interface"""\n        container = Container(className="p-6")\n        container.add(Text("Managed Application", className="text-2xl font-bold"))\n        \n        self.windows[\'main\'].add_child(container)\n    \n    def run(self):\n        """Run the application"""\n        if not self.is_initialized:\n            self.initialize()\n        \n        self.app.run()\n    \n    def cleanup(self):\n        """Cleanup resources (called before app closes)"""\n        # Perform cleanup operations\n        pass\n\n# Usage\napp = ManagedApp()\ntry:\n    app.run()\nfinally:\n    app.cleanup()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from oneforall import App, Container, Text\n\ndef create_robust_app():\n    try:\n        app = App()\n        \n        # Create window with error handling\n        try:\n            window = app.create_window("Robust App", (600, 400))\n        except Exception as e:\n            print(f"Failed to create window: {e}")\n            return None\n        \n        # Build UI with error handling\n        try:\n            container = Container(className="p-6")\n            container.add(Text("Application loaded successfully", className="text-green-600"))\n            window.add_child(container)\n        except Exception as e:\n            print(f"Failed to build UI: {e}")\n            return None\n        \n        return app\n        \n    except Exception as e:\n        print(f"Failed to create application: {e}")\n        return None\n\n# Usage\napp = create_robust_app()\nif app:\n    try:\n        app.run()\n    except KeyboardInterrupt:\n        print("Application interrupted by user")\n    except Exception as e:\n        print(f"Application error: {e}")\nelse:\n    print("Failed to start application")\n'})}),"\n",(0,a.jsx)(e.h2,{id:"related-apis",children:"Related APIs"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"./window",children:"Window API"})," - Window management and configuration"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"./components",children:"Components API"})," - UI components for building interfaces"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"./state-management",children:"State Management API"})," - Managing application state"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(e.p,{children:["See the ",(0,a.jsx)(e.a,{href:"../tutorial-basics/your-first-app",children:"Tutorial - Basics"})," section for complete examples and step-by-step guides."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:"The App class provides the foundation for all OneForAll applications, offering simple yet powerful window management and application lifecycle control."})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},1197:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>o});var t=i(6363);const a={},s=t.createContext(a);function l(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:l(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);
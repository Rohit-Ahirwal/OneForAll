"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[940],{1197:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6363);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},7365:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"tutorial-basics/styling","title":"Styling with Tailwind CSS","description":"OneForAll integrates seamlessly with Tailwind CSS, providing a powerful utility-first approach to styling your desktop applications. Learn how to create beautiful, responsive interfaces with minimal custom CSS.","source":"@site/versioned_docs/version-0.1.0.0a3/tutorial-basics/styling.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/styling","permalink":"/OneForAll/docs/tutorial-basics/styling","draft":false,"unlisted":false,"editUrl":"https://github.com/Rohit-Ahirwal/oneforall/tree/main/docs/versioned_docs/version-0.1.0.0a3/tutorial-basics/styling.md","tags":[],"version":"0.1.0.0a3","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Creating Layouts","permalink":"/OneForAll/docs/tutorial-basics/creating-layouts"},"next":{"title":"Multiple Windows","permalink":"/OneForAll/docs/tutorial-basics/multiple-windows"}}');var s=t(7259),r=t(1197);const i={sidebar_position:5},o="Styling with Tailwind CSS",l={},d=[{value:"Getting Started with Tailwind",id:"getting-started-with-tailwind",level:2},{value:"Automatic CSS Generation",id:"automatic-css-generation",level:3},{value:"Basic Styling",id:"basic-styling",level:3},{value:"Typography",id:"typography",level:2},{value:"Text Styling",id:"text-styling",level:3},{value:"Text Colors and Alignment",id:"text-colors-and-alignment",level:3},{value:"Colors and Backgrounds",id:"colors-and-backgrounds",level:2},{value:"Background Colors",id:"background-colors",level:3},{value:"Color Palette",id:"color-palette",level:3},{value:"Spacing and Layout",id:"spacing-and-layout",level:2},{value:"Padding and Margins",id:"padding-and-margins",level:3},{value:"Spacing Between Elements",id:"spacing-between-elements",level:3},{value:"Borders and Shadows",id:"borders-and-shadows",level:2},{value:"Border Styling",id:"border-styling",level:3},{value:"Shadow Effects",id:"shadow-effects",level:3},{value:"Interactive States",id:"interactive-states",level:2},{value:"Hover Effects",id:"hover-effects",level:3},{value:"Focus and Active States",id:"focus-and-active-states",level:3},{value:"Responsive Design",id:"responsive-design",level:2},{value:"Breakpoint-Specific Styles",id:"breakpoint-specific-styles",level:3},{value:"Mobile-First Approach",id:"mobile-first-approach",level:3},{value:"Component Styling Patterns",id:"component-styling-patterns",level:2},{value:"Button Variants",id:"button-variants",level:3},{value:"Card Components",id:"card-components",level:3},{value:"Advanced Styling Techniques",id:"advanced-styling-techniques",level:2},{value:"CSS Grid Layouts",id:"css-grid-layouts",level:3},{value:"Animations and Transitions",id:"animations-and-transitions",level:3},{value:"Custom Utility Classes",id:"custom-utility-classes",level:3},{value:"Dark Mode Support",id:"dark-mode-support",level:2},{value:"Performance Best Practices",id:"performance-best-practices",level:2},{value:"Efficient Class Usage",id:"efficient-class-usage",level:3},{value:"Reusable Style Patterns",id:"reusable-style-patterns",level:3},{value:"Debugging Styles",id:"debugging-styles",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"styling-with-tailwind-css",children:"Styling with Tailwind CSS"})}),"\n",(0,s.jsx)(n.p,{children:"OneForAll integrates seamlessly with Tailwind CSS, providing a powerful utility-first approach to styling your desktop applications. Learn how to create beautiful, responsive interfaces with minimal custom CSS."}),"\n",(0,s.jsx)(n.admonition,{title:"Alpha Version",type:"info",children:(0,s.jsxs)(n.p,{children:["Tailwind CSS integration is fully functional in OneForAll ",(0,s.jsx)(n.strong,{children:"alpha"})," (v0.1.0a3). The CLI automatically scans and builds your styles."]})}),"\n",(0,s.jsx)(n.h2,{id:"getting-started-with-tailwind",children:"Getting Started with Tailwind"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-css-generation",children:"Automatic CSS Generation"}),"\n",(0,s.jsx)(n.p,{children:"OneForAll automatically scans your Python files for Tailwind classes and generates the necessary CSS:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Development mode (auto-rebuilds CSS)\noneforall dev\n\n# Manual CSS build\noneforall css\n"})}),"\n",(0,s.jsx)(n.h3,{id:"basic-styling",children:"Basic Styling"}),"\n",(0,s.jsxs)(n.p,{children:["Apply Tailwind classes using the ",(0,s.jsx)(n.code,{children:"className"})," parameter:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from oneforall import Container, Text, Button\n\n# Basic styling\nstyled_text = Text(\n    "Welcome to OneForAll", \n    className="text-2xl font-bold text-blue-600 mb-4"\n)\n\n# Styled button\nprimary_button = Button(\n    "Get Started", \n    className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"\n)\n\n# Styled container\ncard = Container(className="bg-white rounded-lg shadow-lg p-6 max-w-md mx-auto")\ncard.add(styled_text)\ncard.add(primary_button)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"typography",children:"Typography"}),"\n",(0,s.jsx)(n.h3,{id:"text-styling",children:"Text Styling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Headings\nheading_1 = Text("Main Title", className="text-4xl font-bold text-gray-900 mb-4")\nheading_2 = Text("Subtitle", className="text-2xl font-semibold text-gray-700 mb-3")\nheading_3 = Text("Section Title", className="text-xl font-medium text-gray-600 mb-2")\n\n# Body text\nparagraph = Text(\n    "This is a paragraph with proper typography styling for readability.",\n    className="text-base text-gray-600 leading-relaxed mb-4"\n)\n\n# Small text\ncaption = Text("Caption text", className="text-sm text-gray-500")\n\n# Text variations\nbold_text = Text("Bold text", className="font-bold")\nitalic_text = Text("Italic text", className="italic")\nunderlined_text = Text("Underlined text", className="underline")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"text-colors-and-alignment",children:"Text Colors and Alignment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Color variations\nprimary_text = Text("Primary text", className="text-blue-600")\nsuccess_text = Text("Success message", className="text-green-600")\nwarning_text = Text("Warning message", className="text-yellow-600")\nerror_text = Text("Error message", className="text-red-600")\n\n# Text alignment\nleft_aligned = Text("Left aligned", className="text-left")\ncenter_aligned = Text("Center aligned", className="text-center")\nright_aligned = Text("Right aligned", className="text-right")\njustified = Text("Justified text content", className="text-justify")\n\n# Text transform\nuppercase_text = Text("uppercase text", className="uppercase")\nlowercase_text = Text("LOWERCASE TEXT", className="lowercase")\ncapitalized_text = Text("capitalized text", className="capitalize")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"colors-and-backgrounds",children:"Colors and Backgrounds"}),"\n",(0,s.jsx)(n.h3,{id:"background-colors",children:"Background Colors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Solid backgrounds\nwhite_bg = Container(className="bg-white p-4")\ngray_bg = Container(className="bg-gray-100 p-4")\nblue_bg = Container(className="bg-blue-500 p-4")\ngradient_bg = Container(className="bg-gradient-to-r from-blue-500 to-purple-600 p-4")\n\n# Background with opacity\ntransparent_bg = Container(className="bg-black bg-opacity-50 p-4")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"color-palette",children:"Color Palette"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def create_color_palette():\n    """Demonstrate OneForAll color palette"""\n    palette = Container(className="grid grid-cols-2 md:grid-cols-4 gap-4 p-6")\n    \n    colors = [\n        ("Primary", "bg-blue-500", "text-white"),\n        ("Secondary", "bg-gray-500", "text-white"),\n        ("Success", "bg-green-500", "text-white"),\n        ("Warning", "bg-yellow-500", "text-black"),\n        ("Error", "bg-red-500", "text-white"),\n        ("Info", "bg-cyan-500", "text-white"),\n        ("Light", "bg-gray-100", "text-gray-800"),\n        ("Dark", "bg-gray-800", "text-white")\n    ]\n    \n    for name, bg_color, text_color in colors:\n        color_card = Container(className=f"{bg_color} {text_color} p-4 rounded-lg text-center")\n        color_card.add(Text(name, className="font-semibold"))\n        palette.add(color_card)\n    \n    return palette\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spacing-and-layout",children:"Spacing and Layout"}),"\n",(0,s.jsx)(n.h3,{id:"padding-and-margins",children:"Padding and Margins"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Padding variations\nsmall_padding = Container(className="p-2")      # 8px\nmedium_padding = Container(className="p-4")     # 16px\nlarge_padding = Container(className="p-6")      # 24px\nextra_large_padding = Container(className="p-8") # 32px\n\n# Directional padding\ntop_padding = Container(className="pt-4")\nright_padding = Container(className="pr-4")\nbottom_padding = Container(className="pb-4")\nleft_padding = Container(className="pl-4")\n\n# Horizontal and vertical padding\nhorizontal_padding = Container(className="px-4")  # left and right\nvertical_padding = Container(className="py-4")    # top and bottom\n\n# Margins (similar to padding)\nmargin_container = Container(className="m-4 mx-auto")  # margin with auto centering\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spacing-between-elements",children:"Spacing Between Elements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Vertical spacing\nvertical_stack = Container(className="space-y-4")\nvertical_stack.add(Text("Item 1"))\nvertical_stack.add(Text("Item 2"))\nvertical_stack.add(Text("Item 3"))\n\n# Horizontal spacing\nhorizontal_stack = Container(className="flex space-x-4")\nhorizontal_stack.add(Button("Button 1"))\nhorizontal_stack.add(Button("Button 2"))\nhorizontal_stack.add(Button("Button 3"))\n'})}),"\n",(0,s.jsx)(n.h2,{id:"borders-and-shadows",children:"Borders and Shadows"}),"\n",(0,s.jsx)(n.h3,{id:"border-styling",children:"Border Styling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Basic borders\nbordered_container = Container(className="border border-gray-300 p-4")\n\n# Border variations\nthick_border = Container(className="border-2 border-blue-500 p-4")\ndashed_border = Container(className="border-2 border-dashed border-gray-400 p-4")\nrounded_border = Container(className="border border-gray-300 rounded-lg p-4")\n\n# Directional borders\ntop_border = Container(className="border-t-2 border-blue-500 p-4")\nbottom_border = Container(className="border-b border-gray-300 p-4")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"shadow-effects",children:"Shadow Effects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Shadow variations\nsmall_shadow = Container(className="shadow-sm bg-white p-4 rounded")\nmedium_shadow = Container(className="shadow-md bg-white p-4 rounded")\nlarge_shadow = Container(className="shadow-lg bg-white p-4 rounded")\nextra_large_shadow = Container(className="shadow-xl bg-white p-4 rounded")\n\n# Colored shadows\nblue_shadow = Container(className="shadow-lg shadow-blue-500/25 bg-white p-4 rounded")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"interactive-states",children:"Interactive States"}),"\n",(0,s.jsx)(n.h3,{id:"hover-effects",children:"Hover Effects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Hover color changes\nhover_button = Button(\n    "Hover Me", \n    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"\n)\n\n# Hover transformations\nhover_card = Container(className="bg-white p-4 rounded-lg shadow hover:shadow-lg hover:scale-105 transition-all duration-200")\n\n# Hover text effects\nhover_text = Text(\n    "Hover for effect", \n    className="text-blue-500 hover:text-blue-700 hover:underline cursor-pointer"\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"focus-and-active-states",children:"Focus and Active States"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Focus styles (for interactive elements)\nfocused_button = Button(\n    "Focus Me", \n    className="px-4 py-2 bg-blue-500 text-white rounded focus:outline-none focus:ring-2 focus:ring-blue-300"\n)\n\n# Active states\nactive_button = Button(\n    "Press Me", \n    className="px-4 py-2 bg-blue-500 text-white rounded active:bg-blue-700 active:scale-95 transition-all"\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"responsive-design",children:"Responsive Design"}),"\n",(0,s.jsx)(n.h3,{id:"breakpoint-specific-styles",children:"Breakpoint-Specific Styles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Responsive text sizes\nresponsive_title = Text(\n    "Responsive Title", \n    className="text-lg sm:text-xl md:text-2xl lg:text-3xl xl:text-4xl font-bold"\n)\n\n# Responsive padding\nresponsive_container = Container(className="p-2 sm:p-4 md:p-6 lg:p-8")\n\n# Responsive grid\nresponsive_grid = Container(className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4")\n\n# Show/hide on different screens\nmobile_only = Text("Mobile Only", className="block sm:hidden")\ndesktop_only = Text("Desktop Only", className="hidden lg:block")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mobile-first-approach",children:"Mobile-First Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def create_responsive_card():\n    """Create a card that adapts to different screen sizes"""\n    \n    card = Container(className="bg-white rounded-lg shadow-md overflow-hidden")\n    \n    # Responsive image container\n    image_container = Container(className="h-32 sm:h-48 md:h-64 bg-gray-200")\n    \n    # Responsive content\n    content = Container(className="p-3 sm:p-4 md:p-6")\n    \n    # Responsive title\n    title = Text(\n        "Responsive Card Title", \n        className="text-base sm:text-lg md:text-xl font-bold mb-2"\n    )\n    \n    # Responsive description\n    description = Text(\n        "This card adapts its layout and typography based on screen size.",\n        className="text-sm sm:text-base text-gray-600 mb-3 sm:mb-4"\n    )\n    \n    # Responsive button\n    button = Button(\n        "Learn More", \n        className="w-full sm:w-auto px-3 sm:px-4 py-2 bg-blue-500 text-white rounded text-sm sm:text-base"\n    )\n    \n    content.add(title)\n    content.add(description)\n    content.add(button)\n    \n    card.add(image_container)\n    card.add(content)\n    \n    return card\n'})}),"\n",(0,s.jsx)(n.h2,{id:"component-styling-patterns",children:"Component Styling Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"button-variants",children:"Button Variants"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def create_button_variants():\n    """Create different button styles"""\n    \n    container = Container(className="space-y-4 p-6")\n    \n    # Primary button\n    primary = Button(\n        "Primary", \n        className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all"\n    )\n    \n    # Secondary button\n    secondary = Button(\n        "Secondary", \n        className="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all"\n    )\n    \n    # Outline button\n    outline = Button(\n        "Outline", \n        className="px-6 py-3 border-2 border-blue-500 text-blue-500 rounded-lg hover:bg-blue-500 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all"\n    )\n    \n    # Ghost button\n    ghost = Button(\n        "Ghost", \n        className="px-6 py-3 text-blue-500 rounded-lg hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all"\n    )\n    \n    # Danger button\n    danger = Button(\n        "Danger", \n        className="px-6 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300 transition-all"\n    )\n    \n    container.add(primary)\n    container.add(secondary)\n    container.add(outline)\n    container.add(ghost)\n    container.add(danger)\n    \n    return container\n'})}),"\n",(0,s.jsx)(n.h3,{id:"card-components",children:"Card Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def create_styled_cards():\n    """Create various card styles"""\n    \n    cards_container = Container(className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6")\n    \n    # Basic card\n    basic_card = Container(className="bg-white rounded-lg shadow-md p-6")\n    basic_card.add(Text("Basic Card", className="text-xl font-bold mb-2"))\n    basic_card.add(Text("Simple card with shadow", className="text-gray-600"))\n    \n    # Elevated card\n    elevated_card = Container(className="bg-white rounded-lg shadow-xl p-6 hover:shadow-2xl transition-shadow")\n    elevated_card.add(Text("Elevated Card", className="text-xl font-bold mb-2"))\n    elevated_card.add(Text("Card with hover effect", className="text-gray-600"))\n    \n    # Bordered card\n    bordered_card = Container(className="bg-white border-2 border-gray-200 rounded-lg p-6 hover:border-blue-300 transition-colors")\n    bordered_card.add(Text("Bordered Card", className="text-xl font-bold mb-2"))\n    bordered_card.add(Text("Card with border styling", className="text-gray-600"))\n    \n    # Gradient card\n    gradient_card = Container(className="bg-gradient-to-br from-purple-500 to-pink-500 text-white rounded-lg p-6")\n    gradient_card.add(Text("Gradient Card", className="text-xl font-bold mb-2"))\n    gradient_card.add(Text("Card with gradient background", className="text-purple-100"))\n    \n    cards_container.add(basic_card)\n    cards_container.add(elevated_card)\n    cards_container.add(bordered_card)\n    cards_container.add(gradient_card)\n    \n    return cards_container\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-styling-techniques",children:"Advanced Styling Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"css-grid-layouts",children:"CSS Grid Layouts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Complex grid layout\ngrid_container = Container(className="grid grid-cols-4 grid-rows-3 gap-4 h-96")\n\n# Grid item spanning multiple columns/rows\nheader_item = Container(className="col-span-4 bg-blue-500 text-white p-4 rounded")\nheader_item.add(Text("Header (spans 4 columns)", className="font-bold"))\n\nsidebar_item = Container(className="row-span-2 bg-gray-200 p-4 rounded")\nsidebar_item.add(Text("Sidebar (spans 2 rows)", className="font-semibold"))\n\nmain_item = Container(className="col-span-2 bg-white border p-4 rounded"))\nmain_item.add(Text("Main Content", className="font-semibold"))\n\naside_item = Container(className="bg-gray-100 p-4 rounded"))\naside_item.add(Text("Aside", className="font-semibold"))\n\nfooter_item = Container(className="col-span-3 bg-gray-800 text-white p-4 rounded"))\nfooter_item.add(Text("Footer (spans 3 columns)", className="font-bold"))\n\ngrid_container.add(header_item)\ngrid_container.add(sidebar_item)\ngrid_container.add(main_item)\ngrid_container.add(aside_item)\ngrid_container.add(footer_item)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"animations-and-transitions",children:"Animations and Transitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Smooth transitions\nanimated_button = Button(\n    "Animated Button", \n    className="px-6 py-3 bg-blue-500 text-white rounded-lg transform hover:scale-105 hover:bg-blue-600 transition-all duration-300 ease-in-out"\n)\n\n# Loading animation\nloading_spinner = Container(className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500")\n\n# Fade in animation\nfade_in_container = Container(className="animate-fade-in opacity-0 animate-delay-300")\n\n# Pulse animation\npulse_notification = Container(className="animate-pulse bg-red-500 text-white p-2 rounded")\npulse_notification.add(Text("New notification!", className="font-semibold"))\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-utility-classes",children:"Custom Utility Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Create reusable style patterns\nBUTTON_STYLES = {\n    'primary': 'px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all',\n    'secondary': 'px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all',\n    'danger': 'px-6 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300 transition-all'\n}\n\nCARD_STYLES = {\n    'default': 'bg-white rounded-lg shadow-md p-6',\n    'elevated': 'bg-white rounded-lg shadow-xl p-6 hover:shadow-2xl transition-shadow',\n    'bordered': 'bg-white border-2 border-gray-200 rounded-lg p-6 hover:border-blue-300 transition-colors'\n}\n\n# Usage\nprimary_button = Button(\"Save\", className=BUTTON_STYLES['primary'])\ninfo_card = Container(className=CARD_STYLES['elevated'])\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dark-mode-support",children:"Dark Mode Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def create_dark_mode_component():\n    """Create a component that supports dark mode"""\n    \n    # Container with dark mode variants\n    container = Container(className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg")\n    \n    # Text with dark mode\n    title = Text(\n        "Dark Mode Example", \n        className="text-2xl font-bold text-gray-900 dark:text-white mb-4"\n    )\n    \n    description = Text(\n        "This component adapts to dark mode automatically.",\n        className="text-gray-600 dark:text-gray-300 mb-4"\n    )\n    \n    # Button with dark mode\n    button = Button(\n        "Toggle Theme", \n        className="px-4 py-2 bg-blue-500 dark:bg-blue-600 text-white rounded hover:bg-blue-600 dark:hover:bg-blue-700 transition-colors"\n    )\n    \n    container.add(title)\n    container.add(description)\n    container.add(button)\n    \n    return container\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-best-practices",children:"Performance Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"efficient-class-usage",children:"Efficient Class Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Good: Combine related classes\nefficient_button = Button(\n    "Efficient", \n    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"\n)\n\n# \u274c Avoid: Redundant or conflicting classes\ninefficient_button = Button(\n    "Inefficient", \n    className="px-4 py-2 p-3 bg-blue-500 bg-red-500 text-white rounded"  # conflicting classes\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"reusable-style-patterns",children:"Reusable Style Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Create a style system\nclass StyleSystem:\n    COLORS = {\n        'primary': 'blue-500',\n        'secondary': 'gray-500',\n        'success': 'green-500',\n        'warning': 'yellow-500',\n        'danger': 'red-500'\n    }\n    \n    SIZES = {\n        'sm': 'px-3 py-1 text-sm',\n        'md': 'px-4 py-2 text-base',\n        'lg': 'px-6 py-3 text-lg'\n    }\n    \n    @classmethod\n    def button(cls, variant='primary', size='md', extra_classes=''):\n        base = f\"rounded font-medium transition-colors focus:outline-none focus:ring-2\"\n        color = f\"bg-{cls.COLORS[variant]} hover:bg-{cls.COLORS[variant].replace('500', '600')} text-white focus:ring-{cls.COLORS[variant].replace('500', '300')}\"\n        size_classes = cls.SIZES[size]\n        return f\"{base} {color} {size_classes} {extra_classes}\".strip()\n\n# Usage\nstyled_button = Button(\"Click Me\", className=StyleSystem.button('primary', 'lg', 'w-full'))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"debugging-styles",children:"Debugging Styles"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Proper container setup\nproper_container = Container(className="flex flex-col space-y-4 p-4")\n\n# \u274c Common mistake: Missing flex direction\nimproper_container = Container(className="flex space-y-4 p-4")  # space-y won\'t work with flex-row\n\n# \u2705 Proper responsive classes\nresponsive_text = Text("Responsive", className="text-sm md:text-base lg:text-lg")\n\n# \u274c Common mistake: Wrong breakpoint order\nwrong_responsive = Text("Wrong", className="text-lg md:text-base text-sm")  # should be mobile-first\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you've mastered OneForAll styling:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./multiple-windows",children:"Multiple Windows"})," - Style across multiple windows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/components",children:"API Reference"})," - Complete styling API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../advanced/custom-components",children:"Advanced Patterns"})," - Create custom styled components"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"With Tailwind CSS and OneForAll, you have everything needed to create beautiful, professional desktop applications!"})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);